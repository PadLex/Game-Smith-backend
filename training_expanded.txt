5x5 intersecting lines, forming a grid Diagonals in each quadrant. A triangular appendage, the apex being the midpoint of one of the sides of the grid. A line from the apex to the midpoint of the base, and a line bisecting this line and intersecting with the midpoints of the two sides of the triangle. There are fourteen "dog" pieces and one "jaguar" piece. The jaguar attempts to capture all of the dogs by hopping over them. The dogs attempt to surround the jaguar and block it from moving. Pieces move from the points where lines intersect to adjacent points along the lines on the board.[Num, "End Rules/Capture at least five dogs", dogs:<9>, priority 0] 
(game "Adugo" (players 2) (equipment {(board (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3)) use:Vertex) (piece "Jaguar" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog2" (difference (expand (sites Top) steps:2) (sites {"C5"}))) (place "Jaguar1" coord:"C5")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 0) (result P2 Loss))}))) 
5x5 intersecting lines, forming a grid Diagonals in each quadrant. A triangular appendage, the apex being the midpoint of one of the sides of the grid. A line from the apex to the midpoint of the base, and a line bisecting this line and intersecting with the midpoints of the two sides of the triangle. There are fourteen "dog" pieces and one "jaguar" piece. The jaguar attempts to capture all of the dogs by hopping over them. The dogs attempt to surround the jaguar and block it from moving. Pieces move from the points where lines intersect to adjacent points along the lines on the board.[Num, "End Rules/Capture all the dogs", dogs:<0>, priority 1] 
(game "Adugo" (players 2) (equipment {(board (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3)) use:Vertex) (piece "Jaguar" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog2" (difference (expand (sites Top) steps:2) (sites {"C5"}))) (place "Jaguar1" coord:"C5")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 0) (result P2 Loss))}))) 
5x5 intersecting lines, forming a grid Diagonals in each quadrant. A triangular appendage, the apex being the midpoint of one of the sides of the grid. A line from the apex to the midpoint of the base, and a line bisecting this line and intersecting with the midpoints of the two sides of the triangle. There are fourteen "dog" pieces and one "jaguar" piece. The jaguar attempts to capture all of the dogs by hopping over them. The dogs attempt to surround the jaguar and block it from moving. Pieces move from the points where lines intersect to adjacent points along the lines on the board.[Num, "End Rules/Capture at least five dogs", dogs:<9>, priority 0] 
(game "Adugo" (players 2) (equipment {(board (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3)) use:Vertex) (piece "Jaguar" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog2" (difference (expand (sites Top) steps:2) (sites {"C5"}))) (place "Jaguar1" coord:"C5")}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 0) (result P2 Loss))}))) 
Played on the Fox and Geese board, but the top arm of the cross is surrounded by a double line, indicating it is a fortress, in which one player puts two officers. The opponent has 24 pieces, which occupy the points outside the fortress. Officers may capture one of the opponent's pieces by hopping over it to an empty space immediately on the opposite side of the opponent's piece. If the officer does not capture when it is possible, it is huffed. The soldiers win by occupying all of the points in the fortress or by blocking the officers from being able to move; the officers win by capturing enough soldiers to prevent this.
(game "Asalto" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (sites {"C6" "E6"})) (place "Marker2" (union (expand (union (sites Right) (sites Left))) (expand (sites Bottom) steps:3)))}) (play (if (is Mover P1) (do (forEach Site (sites From (forEach Piece "Marker" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (remember Value "From" (site))) next:(forEach Piece) (then (and (if (!= 0 (count Sites in:(sites (values Remembered "From")))) (if (= 1 (count Steps (last From) (last To))) (and (forEach Site (sites (values Remembered "From")) (remove (site))) (if (is In (last From) (sites (values Remembered "From"))) (remove (last To)))))) (forget Value All)))) (forEach Piece))) (end {(if (no Pieces P2) (result P1 Win)) (if (or (or (no Pieces P1) (no Moves P1)) (all Sites (expand (sites Top) steps:2) if:(= (who at:(site)) P2))) (result P2 Win))}))) 
Played on the Fox and Geese board, but the top arm of the cross is surrounded by a double line, indicating it is a fortress, in which one player puts two officers. The opponent has 24 pieces, which occupy the points outside the fortress. Officers may capture one of the opponent's pieces by hopping over it to an empty space immediately on the opposite side of the opponent's piece. If the officer does not capture when it is possible, it is huffed. The soldiers win by occupying all of the points in the fortress or by blocking the officers from being able to move; the officers win by capturing enough soldiers to prevent this.
(game "Asalto" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (sites {"C6" "E6"})) (place "Marker2" (union (expand (union (sites Right) (sites Left))) (expand (sites Bottom) steps:3)))}) (play (if (is Mover P1) (do (forEach Site (sites From (forEach Piece "Marker" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (remember Value "From" (site))) next:(forEach Piece) (then (and (if (!= 0 (count Sites in:(sites (values Remembered "From")))) (if (= 1 (count Steps (last From) (last To))) (and (forEach Site (sites (values Remembered "From")) (remove (site))) (if (is In (last From) (sites (values Remembered "From"))) (remove (last To)))))) (forget Value All)))) (forEach Piece))) (end {(if (no Pieces P2) (result P1 Win)) (if (or (or (no Pieces P1) (no Moves P1)) (all Sites (expand (sites Top) steps:2) if:(= (who at:(site)) P2))) (result P2 Win))}))) 
Played on the Fox and Geese board, but the top arm of the cross is surrounded by a double line, indicating it is a fortress, in which one player puts two officers. The opponent has 24 pieces, which occupy the points outside the fortress. Officers may capture one of the opponent's pieces by hopping over it to an empty space immediately on the opposite side of the opponent's piece. If the officer does not capture when it is possible, it is huffed. The soldiers win by occupying all of the points in the fortress or by blocking the officers from being able to move; the officers win by capturing enough soldiers to prevent this.
(game "Asalto" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (sites {"C6" "E6"})) (place "Marker2" (union (expand (union (sites Right) (sites Left))) (expand (sites Bottom) steps:3)))}) (play (if (is Mover P1) (do (forEach Site (sites From (forEach Piece "Marker" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (remember Value "From" (site))) next:(forEach Piece) (then (and (if (!= 0 (count Sites in:(sites (values Remembered "From")))) (if (= 1 (count Steps (last From) (last To))) (and (forEach Site (sites (values Remembered "From")) (remove (site))) (if (is In (last From) (sites (values Remembered "From"))) (remove (last To)))))) (forget Value All)))) (forEach Piece))) (end {(if (no Pieces P2) (result P1 Win)) (if (or (or (no Pieces P1) (no Moves P1)) (all Sites (expand (sites Top) steps:2) if:(= (who at:(site)) P2))) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as two tigers, which can be placed anywhere on the board, and the other player plays as 32 goats, which begin on the four central points of the quadrants of the square board, eight per stack. Players alternate turns moving a piece to an empty adjacent spot along the lines. The goats move one at a time from their stacks, and cannot be restacked once they have been moved. The tiger may capture a goat by hopping over it to an empty spot immediately on the opposite side of an adjacent goat. Multiple captures in one turn are allowed, but a tiger cannot hop over a stack of goats and hop over it again in the opposite direction. When tigers hop over a stack of goats, only one goat is captured. The goats win by blocking the tigers from being able to move; the tigers win by capturing all the goats.
(game "Bagh Bandi" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "Goat" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (regions "CentralSites" (sites {6 8 16 18})) (hand P1)}) (rules (start {(place Stack "Tiger1" (handSite P1) count:2) (place Stack "Goat2" 6 count:8) (place Stack "Goat2" 8 count:8) (place Stack "Goat2" 16 count:8) (place Stack "Goat2" 18 count:8)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece top:True))))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as two tigers, which can be placed anywhere on the board, and the other player plays as 32 goats, which begin on the four central points of the quadrants of the square board, eight per stack. Players alternate turns moving a piece to an empty adjacent spot along the lines. The goats move one at a time from their stacks, and cannot be restacked once they have been moved. The tiger may capture a goat by hopping over it to an empty spot immediately on the opposite side of an adjacent goat. Multiple captures in one turn are allowed, but a tiger cannot hop over a stack of goats and hop over it again in the opposite direction. When tigers hop over a stack of goats, only one goat is captured. The goats win by blocking the tigers from being able to move; the tigers win by capturing all the goats.
(game "Bagh Bandi" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "Goat" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (regions "CentralSites" (sites {6 8 16 18})) (hand P1)}) (rules (start {(place Stack "Tiger1" (handSite P1) count:2) (place Stack "Goat2" 6 count:8) (place Stack "Goat2" 8 count:8) (place Stack "Goat2" 16 count:8) (place Stack "Goat2" 18 count:8)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece top:True))))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as two tigers, which can be placed anywhere on the board, and the other player plays as 32 goats, which begin on the four central points of the quadrants of the square board, eight per stack. Players alternate turns moving a piece to an empty adjacent spot along the lines. The goats move one at a time from their stacks, and cannot be restacked once they have been moved. The tiger may capture a goat by hopping over it to an empty spot immediately on the opposite side of an adjacent goat. Multiple captures in one turn are allowed, but a tiger cannot hop over a stack of goats and hop over it again in the opposite direction. When tigers hop over a stack of goats, only one goat is captured. The goats win by blocking the tigers from being able to move; the tigers win by capturing all the goats.
(game "Bagh Bandi" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "Goat" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))))) (regions "CentralSites" (sites {6 8 16 18})) (hand P1)}) (rules (start {(place Stack "Tiger1" (handSite P1) count:2) (place Stack "Goat2" 6 count:8) (place Stack "Goat2" 8 count:8) (place Stack "Goat2" 16 count:8) (place Stack "Goat2" 18 count:8)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (if (is Prev Mover) (or (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (difference Orthogonal OppositeDirection) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece top:True))))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 board, played on intersections, with lines forming a diamond shape connecting the midpoints of the edges of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed on the next adjacent spot to the tigers on the diamond. The goats move first. Goats may move one at a time to any adjacent vacant spot. The tiger may move in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; the goal of the tigers is to capture all the goats.[Start, "Start Rules/Center and Top", tigerSites:<(sites {"C3" "C5"})>, priority 0] [Board, "Board/Alquerque", type:<("AlquerqueBoard" 5 5)>, priority 0] [Tiger, "Play Rules/No Multiple hops", move:<
        (or
            ("StepToEmpty")
            ("HopCapture")
        )
        > playMove:<(forEach Piece top:True)>, priority 0] 
(game "Bagh Guti" (players 2) (equipment {(board (makeFaces (remove (square 5 diagonals:Alternating) edges:{{{0 0} {1 1}} {{1 1} {2 2}} {{2 2} {3 3}} {{3 3} {4 4}} {{4 0} {3 1}} {{3 1} {2 2}} {{2 2} {1 3}} {{1 3} {0 4}}})) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) counts:{5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 board, played on intersections, with lines forming a diamond shape connecting the midpoints of the edges of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed on the next adjacent spot to the tigers on the diamond. The goats move first. Goats may move one at a time to any adjacent vacant spot. The tiger may move in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; the goal of the tigers is to capture all the goats.[Start, "Start Rules/Opposite", tigerSites:<(sites {"C1" "C5"})>, priority 1] [Board, "Board/No diagonal", type:<(board (square 5) use:Vertex)>, priority 0] [Tiger, "Play Rules/Multiple hops", move:<
        (or
            ("StepToEmpty")
            ("HopSequenceCapture")
        )
        > playMove:<
        (if ("SameTurn")
            (or
                (move Pass)
                ("HopSequenceCaptureAgain")
            )
            (forEach Piece top:True)
        )
        >, priority 1] 
(game "Bagh Guti" (players 2) (equipment {(board (makeFaces (remove (square 5 diagonals:Alternating) edges:{{{0 0} {1 1}} {{1 1} {2 2}} {{2 2} {3 3}} {{3 3} {4 4}} {{4 0} {3 1}} {{3 1} {2 2}} {{2 2} {1 3}} {{1 3} {0 4}}})) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) counts:{5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 board, played on intersections, with lines forming a diamond shape connecting the midpoints of the edges of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with twenty goats, divided into four stacks of five, placed on the next adjacent spot to the tigers on the diamond. The goats move first. Goats may move one at a time to any adjacent vacant spot. The tiger may move in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move; the goal of the tigers is to capture all the goats.[Start, "Start Rules/Center and Top", tigerSites:<(sites {"C3" "C5"})>, priority 0] [Board, "Board/With Diamond", type:<(board 
            (makeFaces
                (remove 
                    (square 5 diagonals:Alternating)
                    edges:{
                    { {0 0} {1 1} }
                    { {1 1} {2 2} }
                    { {2 2} {3 3} }
                    { {3 3} {4 4} }
                    { {4 0} {3 1} }
                    { {3 1} {2 2} }
                    { {2 2} {1 3} }
                    { {1 3} {0 4} }
                    }
                )
            ) 
            use:Vertex
        )>, priority 1] [Tiger, "Play Rules/No Multiple hops", move:<
        (or
            ("StepToEmpty")
            ("HopCapture")
        )
        > playMove:<(forEach Piece top:True)>, priority 0] 
(game "Bagh Guti" (players 2) (equipment {(board (makeFaces (remove (square 5 diagonals:Alternating) edges:{{{0 0} {1 1}} {{1 1} {2 2}} {{2 2} {3 3}} {{3 3} {4 4}} {{4 0} {3 1}} {{3 1} {2 2}} {{2 2} {1 3}} {{1 3} {0 4}}})) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))))}) (rules (start {(place Stack "Goat1" (sites {"B2" "D2" "B4" "D4"}) counts:{5 5 5 5}) (place "Tiger2" (sites {"C1" "C5"}))}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
Played on 5x5 grid including diagonals and pieces are played on the intersections of the lines. One player has four tigers, placed on the corners, and the other has up to 20 goats, placed on the board on a free space. Tigers and goats can move to an adjacent intersection along the lines on the board. Tigers may capture goats by hopping over them. The game ends when tigers have captured all of the goats or the goats block the tigers from being able to move.[Num, "End Rules/Capture at least five tigers", tigers:<15>, priority 0] 
(game "Baghchal" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (hand P1) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Tiger2" (sites Corners)) (place "Goat1" (handSite P1) count:20)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 0) (result P1 Loss))}))) 
Played on 5x5 grid including diagonals and pieces are played on the intersections of the lines. One player has four tigers, placed on the corners, and the other has up to 20 goats, placed on the board on a free space. Tigers and goats can move to an adjacent intersection along the lines on the board. Tigers may capture goats by hopping over them. The game ends when tigers have captured all of the goats or the goats block the tigers from being able to move.[Num, "End Rules/Capture all the tigers", tigers:<0>, priority 1] 
(game "Baghchal" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (hand P1) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Tiger2" (sites Corners)) (place "Goat1" (handSite P1) count:20)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 0) (result P1 Loss))}))) 
Played on 5x5 grid including diagonals and pieces are played on the intersections of the lines. One player has four tigers, placed on the corners, and the other has up to 20 goats, placed on the board on a free space. Tigers and goats can move to an adjacent intersection along the lines on the board. Tigers may capture goats by hopping over them. The game ends when tigers have captured all of the goats or the goats block the tigers from being able to move.[Num, "End Rules/Capture at least five tigers", tigers:<15>, priority 0] 
(game "Baghchal" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (hand P1) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Tiger2" (sites Corners)) (place "Goat1" (handSite P1) count:20)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 0) (result P1 Loss))}))) 
An isosceles triangle, with a line intersecting the two equal sides, another line drawn from the apex to the midpoint of this line. A line extending below the base, and another line perpendicular to this one. One player plays as the tiger, and another player as three goats. The tiger begins at the apex of the triangle, the goats on the three points on the bottom line (the two ends and the place where it intersects with the other line. Players alternate turns moving a piece to an empty adjacent spot. The tiger may capture a goat by hopping over it to an empty adjacent spot along the lines of the board. The tiger wins by capturing all of the goats; the goats win by blocking the tiger from being able to move.
(game "Bam Blang Beh Khla" (players 2) (equipment {(board (add (remove (merge {(shift 0.4 -1 (scale 0.6 (rectangle 1 3))) (shift 0.2 0 (scale 0.8 2 (wedge 2))) (shift 0 -0.5 (scale 1 2.5 (wedge 2)))}) edges:{{3 8} {3 7} {3 9}}) edges:{{6 9} {4 7} {1 8}}) use:Vertex) (piece "Tiger" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Goat" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (sites Top)) (place "Goat2" (sites Bottom))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
An isosceles triangle, with a line intersecting the two equal sides, another line drawn from the apex to the midpoint of this line. A line extending below the base, and another line perpendicular to this one. One player plays as the tiger, and another player as three goats. The tiger begins at the apex of the triangle, the goats on the three points on the bottom line (the two ends and the place where it intersects with the other line. Players alternate turns moving a piece to an empty adjacent spot. The tiger may capture a goat by hopping over it to an empty adjacent spot along the lines of the board. The tiger wins by capturing all of the goats; the goats win by blocking the tiger from being able to move.
(game "Bam Blang Beh Khla" (players 2) (equipment {(board (add (remove (merge {(shift 0.4 -1 (scale 0.6 (rectangle 1 3))) (shift 0.2 0 (scale 0.8 2 (wedge 2))) (shift 0 -0.5 (scale 1 2.5 (wedge 2)))}) edges:{{3 8} {3 7} {3 9}}) edges:{{6 9} {4 7} {1 8}}) use:Vertex) (piece "Tiger" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Goat" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (sites Top)) (place "Goat2" (sites Bottom))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
An isosceles triangle, with a line intersecting the two equal sides, another line drawn from the apex to the midpoint of this line. A line extending below the base, and another line perpendicular to this one. One player plays as the tiger, and another player as three goats. The tiger begins at the apex of the triangle, the goats on the three points on the bottom line (the two ends and the place where it intersects with the other line. Players alternate turns moving a piece to an empty adjacent spot. The tiger may capture a goat by hopping over it to an empty adjacent spot along the lines of the board. The tiger wins by capturing all of the goats; the goats win by blocking the tiger from being able to move.
(game "Bam Blang Beh Khla" (players 2) (equipment {(board (add (remove (merge {(shift 0.4 -1 (scale 0.6 (rectangle 1 3))) (shift 0.2 0 (scale 0.8 2 (wedge 2))) (shift 0 -0.5 (scale 1 2.5 (wedge 2)))}) edges:{{3 8} {3 7} {3 9}}) edges:{{6 9} {4 7} {1 8}}) use:Vertex) (piece "Tiger" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Goat" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (sites Top)) (place "Goat2" (sites Bottom))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals in each 3x3 quadrant of the board. On one end, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. On the opposite side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays with two larger pieces, the Bulls, which start at the points where the triangle and square intersect with the main board. The other player plays with 24 smaller pieces. Eight of these begin on the points surrounding the central point of the board, the rest are in the hand. Players alternate turns. The Bulls move to an empty adjacent spot, the other player places one of the pieces from their hand onto the board. When all of these pieces are on the board, the player may move one of the pieces to an empty adjacent spot. The Bull may captured one of the smaller pieces my hopping over it onto an empty space. The goal of the Bulls is to capture all of the smaller pieces. The goal of the player with the smaller pieces is to corner the bulls so they cannot move. Doing so in the triangle and the square is a better win than cornering the Bulls on the main board.
(game "Bouge Shodra" (players 2) (equipment {(board (merge (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3)) (rotate 45 (shift 1.5 6.2 (square 2 diagonals:Solid)))) use:Vertex) (hand P1) (piece "Marker" P1 (move Step (to if:(is Empty (to))))) (piece "Bull" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Bull2" (sites {"C3" "C7"})) (place "Marker1" (difference (expand (sites Centre)) (centrePoint))) (place "Marker1" (handSite P1) count:16)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each 3x3 quadrant of the board. On one end, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. On the opposite side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays with two larger pieces, the Bulls, which start at the points where the triangle and square intersect with the main board. The other player plays with 24 smaller pieces. Eight of these begin on the points surrounding the central point of the board, the rest are in the hand. Players alternate turns. The Bulls move to an empty adjacent spot, the other player places one of the pieces from their hand onto the board. When all of these pieces are on the board, the player may move one of the pieces to an empty adjacent spot. The Bull may captured one of the smaller pieces my hopping over it onto an empty space. The goal of the Bulls is to capture all of the smaller pieces. The goal of the player with the smaller pieces is to corner the bulls so they cannot move. Doing so in the triangle and the square is a better win than cornering the Bulls on the main board.
(game "Bouge Shodra" (players 2) (equipment {(board (merge (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3)) (rotate 45 (shift 1.5 6.2 (square 2 diagonals:Solid)))) use:Vertex) (hand P1) (piece "Marker" P1 (move Step (to if:(is Empty (to))))) (piece "Bull" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Bull2" (sites {"C3" "C7"})) (place "Marker1" (difference (expand (sites Centre)) (centrePoint))) (place "Marker1" (handSite P1) count:16)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each 3x3 quadrant of the board. On one end, a square with diagonals, with one corner as the midpoint of one of the sides of the main board. On the opposite side, a triangle, with a line bisecting the base and another bisecting this line and intersecting with the other two sides of the triangle. The triangle's apex is the midpoint of the opposite side as the square. One player plays with two larger pieces, the Bulls, which start at the points where the triangle and square intersect with the main board. The other player plays with 24 smaller pieces. Eight of these begin on the points surrounding the central point of the board, the rest are in the hand. Players alternate turns. The Bulls move to an empty adjacent spot, the other player places one of the pieces from their hand onto the board. When all of these pieces are on the board, the player may move one of the pieces to an empty adjacent spot. The Bull may captured one of the smaller pieces my hopping over it onto an empty space. The goal of the Bulls is to capture all of the smaller pieces. The goal of the player with the smaller pieces is to corner the bulls so they cannot move. Doing so in the triangle and the square is a better win than cornering the Bulls on the main board.
(game "Bouge Shodra" (players 2) (equipment {(board (merge (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3)) (rotate 45 (shift 1.5 6.2 (square 2 diagonals:Solid)))) use:Vertex) (hand P1) (piece "Marker" P1 (move Step (to if:(is Empty (to))))) (piece "Bull" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Bull2" (sites {"C3" "C7"})) (place "Marker1" (difference (expand (sites Centre)) (centrePoint))) (place "Marker1" (handSite P1) count:16)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
One player is the rabbit, and the other player plays with twelve other pieces. They may also play with either ten or eleven pieces instead of twelve. The pieces move along the lines. The goal is to corner the rabbit so that it cannot move. The rabbit may hop over the other pieces to capture them. The rabbit wins by reducing the opponent to nine pieces.[Board, "Board/Less Diagonal", type:<(board 
            (remove 
                (rectangle 5 5 diagonals:Alternating)
                edges:{ 
                { {2 0} {1 1} } 
                { {0 2} {1 1} }
                { {0 2} {1 3} }
                { {1 3} {2 4} }
                { {2 0} {3 1} }
                { {3 1} {4 2} }
                { {4 2} {3 3} }
                { {3 3} {2 4} }
                }
            ) 
            use:Vertex
        )>, priority 0] [Jump, "Play Rules/Multiple hops", hare:<("HopSequenceCapture")>, priority 0] 
(game "Cercar La Liebre" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Counter" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (is Prev Mover) (move Pass) (move Step (to if:(is Empty (to)))))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Hare2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))}))) 
One player is the rabbit, and the other player plays with twelve other pieces. They may also play with either ten or eleven pieces instead of twelve. The pieces move along the lines. The goal is to corner the rabbit so that it cannot move. The rabbit may hop over the other pieces to capture them. The rabbit wins by reducing the opponent to nine pieces.[Board, "Board/No Diagonal", type:<(board (square 5) use:Vertex)>, priority 0] [Jump, "Play Rules/No multiple hops", hare:<"HopCapture">, priority 1] 
(game "Cercar La Liebre" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Counter" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (is Prev Mover) (move Pass) (move Step (to if:(is Empty (to)))))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Hare2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))}))) 
One player is the rabbit, and the other player plays with twelve other pieces. They may also play with either ten or eleven pieces instead of twelve. The pieces move along the lines. The goal is to corner the rabbit so that it cannot move. The rabbit may hop over the other pieces to capture them. The rabbit wins by reducing the opponent to nine pieces.[Board, "Board/Normal", type:<("AlquerqueBoard" 5 5)>, priority 1] [Jump, "Play Rules/Multiple hops", hare:<("HopSequenceCapture")>, priority 0] 
(game "Cercar La Liebre" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Counter" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (is Prev Mover) (move Pass) (move Step (to if:(is Empty (to)))))))}) (rules (start {(place "Counter1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Hare2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))}))) 
Played with three "leopards" and fifteen "dogs." The pieces are placed on the intersections of the lines, and move along the lines to the next intersection. The game starts with the leopards on the board, but in the beginning the player controlling the dogs places one dog on an intersection until they are all on the board. After this, the dogs move in the same manner as the leopards. The leopard can hop over a dog as in draughts, capturing it. The leopard wins the game if it captures more than half of the dogs, the dogs win if they block the leopard from being able to move.[Board, "Board/Large", type:<(scale 1.4 1
            (remove
                (scale 1 2 (wedge 5 8)) 
                edges:{{0 1} {0 2} {0 7} {0 8}}
                vertices:{32 31 26 25}
            )
        )> initTiger:<{"M4" "O4" "N5"}>, priority 0] 
(game "Demala Diviyan Keliya" (players 2) (equipment {(board (add (remove (merge (shift 0 2 (scale 8 2 (rectangle 3 2))) (scale 1 2 (wedge 5 4))) edges:{{0 1} {2 3} {4 5}}) edges:{{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) use:Vertex) (hand P2) (piece "Tiger" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" {"H5" "G4" "I4"}) (place "Dog2" (handSite P2) count:15)}) phases:{(phase "Placement" P2 (play (move (from (handSite P2)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 7) (result P2 Loss))}))})) 
Played with three "leopards" and fifteen "dogs." The pieces are placed on the intersections of the lines, and move along the lines to the next intersection. The game starts with the leopards on the board, but in the beginning the player controlling the dogs places one dog on an intersection until they are all on the board. After this, the dogs move in the same manner as the leopards. The leopard can hop over a dog as in draughts, capturing it. The leopard wins the game if it captures more than half of the dogs, the dogs win if they block the leopard from being able to move.[Board, "Board/Normal", type:<
        (add
            (remove
                (merge
                    (shift 0 2 (scale 8 2 (rectangle 3 2)))
                    (scale 1 2 (wedge 5 4)) 
                )
                edges:{ {0 1} {2 3} {4 5}}
            )
            edges:{ {0 15} {18 1} {2 11} {14 3} {4 7} {10 5} }
        )
        > initTiger:<{"H5" "G4" "I4"}>, priority 1] 
(game "Demala Diviyan Keliya" (players 2) (equipment {(board (add (remove (merge (shift 0 2 (scale 8 2 (rectangle 3 2))) (scale 1 2 (wedge 5 4))) edges:{{0 1} {2 3} {4 5}}) edges:{{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) use:Vertex) (hand P2) (piece "Tiger" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" {"H5" "G4" "I4"}) (place "Dog2" (handSite P2) count:15)}) phases:{(phase "Placement" P2 (play (move (from (handSite P2)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 7) (result P2 Loss))}))})) 
Played with three "leopards" and fifteen "dogs." The pieces are placed on the intersections of the lines, and move along the lines to the next intersection. The game starts with the leopards on the board, but in the beginning the player controlling the dogs places one dog on an intersection until they are all on the board. After this, the dogs move in the same manner as the leopards. The leopard can hop over a dog as in draughts, capturing it. The leopard wins the game if it captures more than half of the dogs, the dogs win if they block the leopard from being able to move.[Board, "Board/Large", type:<(scale 1.4 1
            (remove
                (scale 1 2 (wedge 5 8)) 
                edges:{{0 1} {0 2} {0 7} {0 8}}
                vertices:{32 31 26 25}
            )
        )> initTiger:<{"M4" "O4" "N5"}>, priority 0] 
(game "Demala Diviyan Keliya" (players 2) (equipment {(board (add (remove (merge (shift 0 2 (scale 8 2 (rectangle 3 2))) (scale 1 2 (wedge 5 4))) edges:{{0 1} {2 3} {4 5}}) edges:{{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) use:Vertex) (hand P2) (piece "Tiger" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" {"H5" "G4" "I4"}) (place "Dog2" (handSite P2) count:15)}) phases:{(phase "Placement" P2 (play (move (from (handSite P2)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P2) 7) (result P2 Loss))}))})) 
One player has two leopards, the other has 24 cows. Play begins by each player taking turns to place their pieces, and then can move to one adjacent intersection. Leopards capture cows by hopping over them. Leopards win by capturing all the cows, cows win by blocking the leopards from moving.[Move, "Play Rules/Multiple hops and Force to hop", leopard:<
        (if "SameTurn"
            ("HopSequenceCaptureAgain")
            (priority {
                (forEach Piece "Leopard" ("HopSequenceCapture")) 
                (forEach Piece "Leopard" "StepToEmpty")
            })
        )
        >, priority 0] 
(game "Diviyan Keliya" (players 2) (equipment {(board (merge {(shift 2 2 (square 5 diagonals:Alternating)) (shift 2 0 (wedge 3)) (shift 5 3 (rotate 90 (wedge 3))) (shift 2 6 (rotate 180 (wedge 3))) (shift -1 3 (rotate 270 (wedge 3)))}) use:Vertex) (hand Each) (piece "Leopard" P1) (piece "Cow" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Leopard1" "Hand1" count:2) (place "Cow2" "Hand2" count:24)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) {(nextPhase P1 (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "MovementP1") (nextPhase P2 (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "MovementP2")}) (phase "MovementP1" P1 (play (forEach Piece "Leopard" (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))))) (phase "MovementP2" P2 (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss))))) 
One player has two leopards, the other has 24 cows. Play begins by each player taking turns to place their pieces, and then can move to one adjacent intersection. Leopards capture cows by hopping over them. Leopards win by capturing all the cows, cows win by blocking the leopards from moving.[Move, "Play Rules/No multiple hops", leopard:<(forEach Piece "Leopard" (or "HopCapture" "StepToEmpty"))>, priority 1] 
(game "Diviyan Keliya" (players 2) (equipment {(board (merge {(shift 2 2 (square 5 diagonals:Alternating)) (shift 2 0 (wedge 3)) (shift 5 3 (rotate 90 (wedge 3))) (shift 2 6 (rotate 180 (wedge 3))) (shift -1 3 (rotate 270 (wedge 3)))}) use:Vertex) (hand Each) (piece "Leopard" P1) (piece "Cow" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Leopard1" "Hand1" count:2) (place "Cow2" "Hand2" count:24)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) {(nextPhase P1 (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "MovementP1") (nextPhase P2 (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "MovementP2")}) (phase "MovementP1" P1 (play (forEach Piece "Leopard" (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))))) (phase "MovementP2" P2 (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss))))) 
One player has two leopards, the other has 24 cows. Play begins by each player taking turns to place their pieces, and then can move to one adjacent intersection. Leopards capture cows by hopping over them. Leopards win by capturing all the cows, cows win by blocking the leopards from moving.[Move, "Play Rules/Multiple hops and Force to hop", leopard:<
        (if "SameTurn"
            ("HopSequenceCaptureAgain")
            (priority {
                (forEach Piece "Leopard" ("HopSequenceCapture")) 
                (forEach Piece "Leopard" "StepToEmpty")
            })
        )
        >, priority 0] 
(game "Diviyan Keliya" (players 2) (equipment {(board (merge {(shift 2 2 (square 5 diagonals:Alternating)) (shift 2 0 (wedge 3)) (shift 5 3 (rotate 90 (wedge 3))) (shift 2 6 (rotate 180 (wedge 3))) (shift -1 3 (rotate 270 (wedge 3)))}) use:Vertex) (hand Each) (piece "Leopard" P1) (piece "Cow" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Leopard1" "Hand1" count:2) (place "Cow2" "Hand2" count:24)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) {(nextPhase P1 (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "MovementP1") (nextPhase P2 (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "MovementP2")}) (phase "MovementP1" P1 (play (forEach Piece "Leopard" (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))))) (phase "MovementP2" P2 (play (forEach Piece)))} (end (if (no Moves Next) (result Next Loss))))) 
5x5 intersecting lines with diagonals drawn in the quadrants. One player plays as one hunter, placed in the central spot. The other player plays as twelve birds, which are placed in the two rows closest to the player and the two spots on the right hand side in the central row. The hunter may move in any direction along the lines of the board. The hunter may capture birds by hopping over them to an empty spot on the opposite side along the lines of the board. The birds may move forward orthogonally or diagonally. The birds win by blocking the hunter from being able to move; the hunter wins by capturing all of the birds or when it is no longer possible for the birds to capture the hunter.
(game "El Cazador" (players {(player S) (player N)}) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Human" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to if:(is Empty (to)))))}) (rules (start {(place "Human1" (centrePoint)) (place "Hen2" (union {(expand (sites Bottom)) (sites {"D3" "E3"})}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines with diagonals drawn in the quadrants. One player plays as one hunter, placed in the central spot. The other player plays as twelve birds, which are placed in the two rows closest to the player and the two spots on the right hand side in the central row. The hunter may move in any direction along the lines of the board. The hunter may capture birds by hopping over them to an empty spot on the opposite side along the lines of the board. The birds may move forward orthogonally or diagonally. The birds win by blocking the hunter from being able to move; the hunter wins by capturing all of the birds or when it is no longer possible for the birds to capture the hunter.
(game "El Cazador" (players {(player S) (player N)}) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Human" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to if:(is Empty (to)))))}) (rules (start {(place "Human1" (centrePoint)) (place "Hen2" (union {(expand (sites Bottom)) (sites {"D3" "E3"})}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines with diagonals drawn in the quadrants. One player plays as one hunter, placed in the central spot. The other player plays as twelve birds, which are placed in the two rows closest to the player and the two spots on the right hand side in the central row. The hunter may move in any direction along the lines of the board. The hunter may capture birds by hopping over them to an empty spot on the opposite side along the lines of the board. The birds may move forward orthogonally or diagonally. The birds win by blocking the hunter from being able to move; the hunter wins by capturing all of the birds or when it is no longer possible for the birds to capture the hunter.
(game "El Cazador" (players {(player S) (player N)}) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Human" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to if:(is Empty (to)))))}) (rules (start {(place "Human1" (centrePoint)) (place "Hen2" (union {(expand (sites Bottom)) (sites {"D3" "E3"})}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the quadrants. One player plays as one dog, which is a large stone, and the other as twelve goats, which are smaller stones. The goats begin on the two rows closest to the player to which they belong, and on the right hand spots in the central row. The dog begins in the central space. The dog moves first. The dog may move in any direction along the lines of the board. It may capture a goat by hopping over it to an empty adjacent spot on the opposite side of the goat, according to the lines of the board. Multiple captures are allowed. The goats move one space forward orthogonally or diagonally, or sideways, along the lines of the board. When all of the goats are unable to move forward anymore and all are are in spaces being equivalent to the starting position on the opposite side of the board, they may then commence moving in the opposite direction toward their original starting position, but not backwards with respect to this direction. The dog wins by capturing all the goats; the goats win by blocking the dog from being able to move.
(game "El Perro" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P2 (move Step (if (= (value Player Mover) 1) (directions {S SE SW E W}) (directions {N NE NW E W})) (to if:(is Empty (to))))) (piece "Dog" P1 (or (move Hop (from (from)) Adjacent (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Goat2" (union (intersection (union (sites Left) (sites Right)) (sites Row 2)) (expand (sites Bottom)))) (place "Dog1" (sites Centre))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece) (then (if (not (can Move (forEach Piece (move Step (if (= (value Player P2) 1) (directions {S SE SW}) (directions {N NE NW})) (to if:(is Empty (to)))) P2))) (set Value P2 (if (= (value Player P2) 1) 0 1)))))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the quadrants. One player plays as one dog, which is a large stone, and the other as twelve goats, which are smaller stones. The goats begin on the two rows closest to the player to which they belong, and on the right hand spots in the central row. The dog begins in the central space. The dog moves first. The dog may move in any direction along the lines of the board. It may capture a goat by hopping over it to an empty adjacent spot on the opposite side of the goat, according to the lines of the board. Multiple captures are allowed. The goats move one space forward orthogonally or diagonally, or sideways, along the lines of the board. When all of the goats are unable to move forward anymore and all are are in spaces being equivalent to the starting position on the opposite side of the board, they may then commence moving in the opposite direction toward their original starting position, but not backwards with respect to this direction. The dog wins by capturing all the goats; the goats win by blocking the dog from being able to move.
(game "El Perro" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P2 (move Step (if (= (value Player Mover) 1) (directions {S SE SW E W}) (directions {N NE NW E W})) (to if:(is Empty (to))))) (piece "Dog" P1 (or (move Hop (from (from)) Adjacent (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Goat2" (union (intersection (union (sites Left) (sites Right)) (sites Row 2)) (expand (sites Bottom)))) (place "Dog1" (sites Centre))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece) (then (if (not (can Move (forEach Piece (move Step (if (= (value Player P2) 1) (directions {S SE SW}) (directions {N NE NW})) (to if:(is Empty (to)))) P2))) (set Value P2 (if (= (value Player P2) 1) 0 1)))))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the quadrants. One player plays as one dog, which is a large stone, and the other as twelve goats, which are smaller stones. The goats begin on the two rows closest to the player to which they belong, and on the right hand spots in the central row. The dog begins in the central space. The dog moves first. The dog may move in any direction along the lines of the board. It may capture a goat by hopping over it to an empty adjacent spot on the opposite side of the goat, according to the lines of the board. Multiple captures are allowed. The goats move one space forward orthogonally or diagonally, or sideways, along the lines of the board. When all of the goats are unable to move forward anymore and all are are in spaces being equivalent to the starting position on the opposite side of the board, they may then commence moving in the opposite direction toward their original starting position, but not backwards with respect to this direction. The dog wins by capturing all the goats; the goats win by blocking the dog from being able to move.
(game "El Perro" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P2 (move Step (if (= (value Player Mover) 1) (directions {S SE SW E W}) (directions {N NE NW E W})) (to if:(is Empty (to))))) (piece "Dog" P1 (or (move Hop (from (from)) Adjacent (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Goat2" (union (intersection (union (sites Left) (sites Right)) (sites Row 2)) (expand (sites Bottom)))) (place "Dog1" (sites Centre))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (move Hop (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece) (then (if (not (can Move (forEach Piece (move Step (if (= (value Player P2) 1) (directions {S SE SW}) (directions {N NE NW})) (to if:(is Empty (to)))) P2))) (set Value P2 (if (= (value Player P2) 1) 0 1)))))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Five squares which are each divided with lines connecting the midpoints of their sides and diagonals. The five squares are arranged in a cross-shaped board. One player plays as two foxes the other as twenty hens. The hens begin on the twenty spaces on one half of the board, the foxes on the bottom two corners of the square on the opposite arm of the cross. The foxes may move in any direction, and hop over a hen to an empty space immediately adjacent on the opposite side of the hen along the lines of the board to capture. The hens may not move backward. The foxes win by capturing all the hens, the hens win by occupying all of the spaces in the square of the arm of the cross opposite from where they began.
(game "El Zorro" (players {(player N) (player S)}) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to if:(is Empty (to)))))}) (rules (start {(place "Hen2" (union (sites Top) (expand (sites Row 4)))) (place "Fox1" (intersection (union (sites Column 4) (sites Column 2)) (sites Bottom)))}) (play (forEach Piece)) (end {(if (all Sites (expand (sites Bottom) steps:2) if:(= (who at:(site)) P2)) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Five squares which are each divided with lines connecting the midpoints of their sides and diagonals. The five squares are arranged in a cross-shaped board. One player plays as two foxes the other as twenty hens. The hens begin on the twenty spaces on one half of the board, the foxes on the bottom two corners of the square on the opposite arm of the cross. The foxes may move in any direction, and hop over a hen to an empty space immediately adjacent on the opposite side of the hen along the lines of the board to capture. The hens may not move backward. The foxes win by capturing all the hens, the hens win by occupying all of the spaces in the square of the arm of the cross opposite from where they began.
(game "El Zorro" (players {(player N) (player S)}) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to if:(is Empty (to)))))}) (rules (start {(place "Hen2" (union (sites Top) (expand (sites Row 4)))) (place "Fox1" (intersection (union (sites Column 4) (sites Column 2)) (sites Bottom)))}) (play (forEach Piece)) (end {(if (all Sites (expand (sites Bottom) steps:2) if:(= (who at:(site)) P2)) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Five squares which are each divided with lines connecting the midpoints of their sides and diagonals. The five squares are arranged in a cross-shaped board. One player plays as two foxes the other as twenty hens. The hens begin on the twenty spaces on one half of the board, the foxes on the bottom two corners of the square on the opposite arm of the cross. The foxes may move in any direction, and hop over a hen to an empty space immediately adjacent on the opposite side of the hen along the lines of the board to capture. The hens may not move backward. The foxes win by capturing all the hens, the hens win by occupying all of the spaces in the square of the arm of the cross opposite from where they began.
(game "El Zorro" (players {(player N) (player S)}) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 (move Step (directions {Rightward Leftward Forwards}) (to if:(is Empty (to)))))}) (rules (start {(place "Hen2" (union (sites Top) (expand (sites Row 4)))) (place "Fox1" (intersection (union (sites Column 4) (sites Column 2)) (sites Bottom)))}) (play (forEach Piece)) (end {(if (all Sites (expand (sites Bottom) steps:2) if:(= (who at:(site)) P2)) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
The game is played on a cruciform board adapted from an Alquerque board. One player plays as the fox, the other as the geese. The geese begin in a set starting position; the person playing as the fox may choose any available spot to place the fox as their first move. Players move as in Alquerque, but only the fox can hop to capture. The goal of the geese is to block the fox from being able to move; the fox's goal is to capture all of the geese.[Place, "Start Rules/15 Geese", geese:<(place "Goose2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4"})}))>, priority 0] 
(game "Fox and Geese" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Goose" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Goose2" (union (expand (sites Bottom)) (sites Row 2))) (place "Fox1" (handSite P1))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
The game is played on a cruciform board adapted from an Alquerque board. One player plays as the fox, the other as the geese. The geese begin in a set starting position; the person playing as the fox may choose any available spot to place the fox as their first move. Players move as in Alquerque, but only the fox can hop to capture. The goal of the geese is to block the fox from being able to move; the fox's goal is to capture all of the geese.[Place, "Start Rules/17 Geese", geese:<(place "Goose2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))>, priority 0] 
(game "Fox and Geese" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Goose" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Goose2" (union (expand (sites Bottom)) (sites Row 2))) (place "Fox1" (handSite P1))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
The game is played on a cruciform board adapted from an Alquerque board. One player plays as the fox, the other as the geese. The geese begin in a set starting position; the person playing as the fox may choose any available spot to place the fox as their first move. Players move as in Alquerque, but only the fox can hop to capture. The goal of the geese is to block the fox from being able to move; the fox's goal is to capture all of the geese.[Place, "Start Rules/13 Geese", geese:<(place "Goose2" (union (expand (sites Bottom)) (sites Row 2)))>, priority 1] 
(game "Fox and Geese" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Goose" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Goose2" (union (expand (sites Bottom)) (sites Row 2))) (place "Fox1" (handSite P1))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
7x7 board, with an X in each corner space, the middle space along each side, and the central space. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces one space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces, or if it is in the corner and there are two opponent's pieces blocking it from moving. Capturing cannot happen in the placement phase. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala (Buginese)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to))) (then (and (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))) (surround (from (last To)) Orthogonal (between if:(and (is Enemy (who at:(between))) (is In (between) (sites Corners))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))))))) (hand Each) (regions "HalfBoard" P1 (expand (sites Bottom) steps:3)) (regions "HalfBoard" P2 (expand (sites Top) steps:3))}) (rules (start {(place "Marker1" (handSite P1) count:13) (place "Marker2" (handSite P2) count:10)}) phases:{(phase "CentrePlacing" P1 (play (move (from (handSite P1)) (to (centrePoint)))) (nextPhase "Placement")) (phase "Placement" P2 (play (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover)))) (move Pass))) (nextPhase (and (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 2) (result P2 Win))}))})) 
7x7 board, with an X in each corner space, the middle space along each side, and the central space. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces one space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces, or if it is in the corner and there are two opponent's pieces blocking it from moving. Capturing cannot happen in the placement phase. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala (Buginese)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to))) (then (and (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))) (surround (from (last To)) Orthogonal (between if:(and (is Enemy (who at:(between))) (is In (between) (sites Corners))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))))))) (hand Each) (regions "HalfBoard" P1 (expand (sites Bottom) steps:3)) (regions "HalfBoard" P2 (expand (sites Top) steps:3))}) (rules (start {(place "Marker1" (handSite P1) count:13) (place "Marker2" (handSite P2) count:10)}) phases:{(phase "CentrePlacing" P1 (play (move (from (handSite P1)) (to (centrePoint)))) (nextPhase "Placement")) (phase "Placement" P2 (play (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover)))) (move Pass))) (nextPhase (and (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 2) (result P2 Win))}))})) 
7x7 board, with an X in each corner space, the middle space along each side, and the central space. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces one space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces, or if it is in the corner and there are two opponent's pieces blocking it from moving. Capturing cannot happen in the placement phase. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala (Buginese)" (players 2) (equipment {(board (square 7)) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to))) (then (and (custodial (from (last To)) Orthogonal (between (max 1) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))) (surround (from (last To)) Orthogonal (between if:(and (is Enemy (who at:(between))) (is In (between) (sites Corners))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))))))) (hand Each) (regions "HalfBoard" P1 (expand (sites Bottom) steps:3)) (regions "HalfBoard" P2 (expand (sites Top) steps:3))}) (rules (start {(place "Marker1" (handSite P1) count:13) (place "Marker2" (handSite P2) count:10)}) phases:{(phase "CentrePlacing" P1 (play (move (from (handSite P1)) (to (centrePoint)))) (nextPhase "Placement")) (phase "Placement" P2 (play (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover)))) (move Pass))) (nextPhase (and (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P2) (result P1 Win)) (if (< (count Pieces P1) 2) (result P2 Win))}))})) 
5x5 board. Markings in the central square, each corner square, and the central square of each side. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces on space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala" (players 2) (equipment {(board (square 5)) (hand Each) (regions P1 (expand (sites Bottom) steps:2)) (regions P2 (expand (sites Top) steps:2)) (regions "MarkedCells" (union {(sites Centre) (sites Corners) (intersection (sites Outer) (sites Row (row of:(centrePoint)))) (intersection (sites Outer) (sites Column (column of:(centrePoint))))})) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (handSite P1) count:10) (place "Marker2" (handSite P2) count:12) (place "Marker2" (centrePoint))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))))) (nextPhase (and (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) "Movement")) (phase "Movement" (play (forEach Piece (then (custodial (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to)))))))) (end {(if (no Moves P1) (result P2 Win)) (if (< (count Pieces P2) 2) (result P1 Win))}))})) 
5x5 board. Markings in the central square, each corner square, and the central square of each side. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces on space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala" (players 2) (equipment {(board (square 5)) (hand Each) (regions P1 (expand (sites Bottom) steps:2)) (regions P2 (expand (sites Top) steps:2)) (regions "MarkedCells" (union {(sites Centre) (sites Corners) (intersection (sites Outer) (sites Row (row of:(centrePoint)))) (intersection (sites Outer) (sites Column (column of:(centrePoint))))})) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (handSite P1) count:10) (place "Marker2" (handSite P2) count:12) (place "Marker2" (centrePoint))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))))) (nextPhase (and (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) "Movement")) (phase "Movement" (play (forEach Piece (then (custodial (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to)))))))) (end {(if (no Moves P1) (result P2 Win)) (if (< (count Pieces P2) 2) (result P1 Win))}))})) 
5x5 board. Markings in the central square, each corner square, and the central square of each side. Black plays with thirteen pieces, white plays with ten. Black places the first piece on the central square, then players alternate turns placing a piece on their own half of the board. When all of the pieces are placed, players alternate turns moving pieces on space orthogonally. A piece is captured when it is surrounded on two opposite sides by opponent's pieces. Black wins if it can block white from being able to move. White wins if it is impossible for black to block them.
(game "Gala" (players 2) (equipment {(board (square 5)) (hand Each) (regions P1 (expand (sites Bottom) steps:2)) (regions P2 (expand (sites Top) steps:2)) (regions "MarkedCells" (union {(sites Centre) (sites Corners) (intersection (sites Outer) (sites Row (row of:(centrePoint)))) (intersection (sites Outer) (sites Column (column of:(centrePoint))))})) (piece "Marker" Each (move Step Orthogonal (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (handSite P1) count:10) (place "Marker2" (handSite P2) count:12) (place "Marker2" (centrePoint))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (intersection (sites Empty) (sites Mover))))) (nextPhase (and (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) "Movement")) (phase "Movement" (play (forEach Piece (then (custodial (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to)))))))) (end {(if (no Moves P1) (result P2 Win)) (if (< (count Pieces P2) 2) (result P1 Win))}))})) 
28 squares arranged in a cross-shaped board. Diagonals are drawn in each 2x2 square. Pieces are played on the lines of the board. One player plays as a single fox, placed on the center of the third line from the top of one arm of the cross. The other player plays as eighteen geese, placed on the points on the opposite arm of the cross and the first horizontal line of the horizontal arms of the cross. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The geese may not move backward. The fox may capture a goose by hopping over it to an empty spot immediately on the opposite side of the goose along the lines of the board. The geese win by blocking the fox from being able to move. The fox wins by capturing all the geese.
(game "Gasetavl (Gedved)" (players 2) (equipment {(board (merge (shift 0 (/ (- 9 3) 2) (rectangle 3 9 diagonals:Alternating)) (shift (/ (- 9 3) 2) 0 (rectangle 9 3 diagonals:Alternating))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" coord:"E7") (place "Geese2" (sites {"D1" "E1" "F1" "D2" "E2" "F2" "D3" "E3" "F3" "A4" "B4" "C4" "D4" "E4" "F4" "G4" "H4" "I4"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
28 squares arranged in a cross-shaped board. Diagonals are drawn in each 2x2 square. Pieces are played on the lines of the board. One player plays as a single fox, placed on the center of the third line from the top of one arm of the cross. The other player plays as eighteen geese, placed on the points on the opposite arm of the cross and the first horizontal line of the horizontal arms of the cross. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The geese may not move backward. The fox may capture a goose by hopping over it to an empty spot immediately on the opposite side of the goose along the lines of the board. The geese win by blocking the fox from being able to move. The fox wins by capturing all the geese.
(game "Gasetavl (Gedved)" (players 2) (equipment {(board (merge (shift 0 (/ (- 9 3) 2) (rectangle 3 9 diagonals:Alternating)) (shift (/ (- 9 3) 2) 0 (rectangle 9 3 diagonals:Alternating))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" coord:"E7") (place "Geese2" (sites {"D1" "E1" "F1" "D2" "E2" "F2" "D3" "E3" "F3" "A4" "B4" "C4" "D4" "E4" "F4" "G4" "H4" "I4"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
28 squares arranged in a cross-shaped board. Diagonals are drawn in each 2x2 square. Pieces are played on the lines of the board. One player plays as a single fox, placed on the center of the third line from the top of one arm of the cross. The other player plays as eighteen geese, placed on the points on the opposite arm of the cross and the first horizontal line of the horizontal arms of the cross. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The geese may not move backward. The fox may capture a goose by hopping over it to an empty spot immediately on the opposite side of the goose along the lines of the board. The geese win by blocking the fox from being able to move. The fox wins by capturing all the geese.
(game "Gasetavl (Gedved)" (players 2) (equipment {(board (merge (shift 0 (/ (- 9 3) 2) (rectangle 3 9 diagonals:Alternating)) (shift (/ (- 9 3) 2) 0 (rectangle 9 3 diagonals:Alternating))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" coord:"E7") (place "Geese2" (sites {"D1" "E1" "F1" "D2" "E2" "F2" "D3" "E3" "F3" "A4" "B4" "C4" "D4" "E4" "F4" "G4" "H4" "I4"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Twenty squares arranged in a cross shape, with diagonals in each square. The pieces are played on the intersections of the lines. Two foxes are placed on the outer corners of one of the arms of the cross, and twenty geese are placed on the points in the opposite arm, as well as the first two long lines in the perpendicular arms. Players alternate turns moving a piece to an empty spot along the lines on the board. The geese cannot move backward. The foxes may hop over a goose to an empty adjacent spot immediately on the opposite side of it along the lines on the board. The geese win by blocking the foxes from being able to move. The foxes win by capturing all the geese.
(game "Gasetavl" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Solid)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Solid))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (sites {"G9" "I7"})) (place "Geese2" (sites {"A3" "B2" "C1" "B4" "C3" "D2" "A7" "B6" "C5" "D4" "E3" "F2" "G1" "B8" "C7" "D6" "E5" "F4" "G3" "H2"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Twenty squares arranged in a cross shape, with diagonals in each square. The pieces are played on the intersections of the lines. Two foxes are placed on the outer corners of one of the arms of the cross, and twenty geese are placed on the points in the opposite arm, as well as the first two long lines in the perpendicular arms. Players alternate turns moving a piece to an empty spot along the lines on the board. The geese cannot move backward. The foxes may hop over a goose to an empty adjacent spot immediately on the opposite side of it along the lines on the board. The geese win by blocking the foxes from being able to move. The foxes win by capturing all the geese.
(game "Gasetavl" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Solid)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Solid))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (sites {"G9" "I7"})) (place "Geese2" (sites {"A3" "B2" "C1" "B4" "C3" "D2" "A7" "B6" "C5" "D4" "E3" "F2" "G1" "B8" "C7" "D6" "E5" "F4" "G3" "H2"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Twenty squares arranged in a cross shape, with diagonals in each square. The pieces are played on the intersections of the lines. Two foxes are placed on the outer corners of one of the arms of the cross, and twenty geese are placed on the points in the opposite arm, as well as the first two long lines in the perpendicular arms. Players alternate turns moving a piece to an empty spot along the lines on the board. The geese cannot move backward. The foxes may hop over a goose to an empty adjacent spot immediately on the opposite side of it along the lines on the board. The geese win by blocking the foxes from being able to move. The foxes win by capturing all the geese.
(game "Gasetavl" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Solid)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Solid))) use:Vertex) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Geese" P2 N (move Step (directions {Rightward Forwards Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (sites {"G9" "I7"})) (place "Geese2" (sites {"A3" "B2" "C1" "B4" "C3" "D2" "A7" "B6" "C5" "D4" "E3" "F2" "G1" "B8" "C7" "D6" "E5" "F4" "G3" "H2"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Two concentric circles, with four radii from the outer circle to in the center, dividing the circles into four equal parts. There are four arcs, each of which bisects a radius between where each radius intersects the circumference of each circle, the arc also intersecting with the outer circle's circumference. One player plays as a bear, which begins on the central point, the other as three hunters, which begin on any three points on the inner circle. The bear plays first. Players alternate turns moving a piece to an empty adjacent spot along the lines. When the bear is unable to move, the game ends and the players play again, switching sides. The player who lasts longest while playing as the bear wins.[Rule, "Rules/One Round", rule:<
        phases:{
        (phase "PlacementP1" 
            (play
                (move 
                    (from (handSite P1))
                    (to (intersection (sites Empty) (sites {1..4})))
                    (then (if ("HandOccupied" P1) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P1) "HuntingP2")
        )
        (phase "HuntingP2" 
            (play (forEach Piece))
            (end {
                (if (no Moves P2) (result P1 Win))
                (if 
                    (or
                        (>= (count Moves) (- (value MoveLimit) 10)) 
                        (>= (count Turns) (- (value TurnLimit) 5)) 
                    )
                    (result P2 Win)
                )
            }) 
        )
        }
        >, priority 0] 
(game "Gioco dell'Orso" (players 2) (equipment {(board (add (concentric {1 4 12}) edges:{{6 8} {9 11} {12 14} {5 15}}) use:Vertex) (piece "Human" Each (move Step (to if:(is Empty (to))))) (piece "Bear" Each (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "Human1" (handSite P1) count:3) (place "Bear2" (sites Centre))}) phases:{(phase "PlacementP1" (play (move (from (handSite P1)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P2)) (to if:(is Empty (to)))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied by:All container:"Board")) (add (piece "Bear1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2)) count:3)}))))) (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (handSite P2)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P1)) (to if:(is Empty (to)))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore))))})) 
Two concentric circles, with four radii from the outer circle to in the center, dividing the circles into four equal parts. There are four arcs, each of which bisects a radius between where each radius intersects the circumference of each circle, the arc also intersecting with the outer circle's circumference. One player plays as a bear, which begins on the central point, the other as three hunters, which begin on any three points on the inner circle. The bear plays first. Players alternate turns moving a piece to an empty adjacent spot along the lines. When the bear is unable to move, the game ends and the players play again, switching sides. The player who lasts longest while playing as the bear wins.[Rule, "Rules/Two Phases", rule:<
        phases:{
        (phase "PlacementP1" 
            (play
                (move 
                    (from (handSite P1))
                    (to (intersection (sites Empty) (sites {1..4})))
                    (then (if ("HandOccupied" P1) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P1) "HuntingP2")
        )
        (phase "HuntingP2" 
            (play 
                (forEach Piece
                    (then 
                        (if (not 
                                (can Move 
                                    ("StepToEmpty" (from (where "Bear" P2)))
                                )
                            )
                            (and {
                                (addScore P2 (- (count Moves) 3))
                                (remove (sites Occupied by:All container:"Board"))
                                (add (piece "Bear1") (to (sites Centre)))
                                (add (piece "Human2") (to (handSite P2)) count:3)
                            })
                        )
                    )
                )
            )
            (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")
        )
        (phase "PlacementP2" 
            (play
                (move 
                    (from (handSite P2))
                    (to (intersection (sites Empty) (sites {1..4})))
                    (then (if ("HandOccupied" P2) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P2) "HuntingP1")
        )
        (phase "HuntingP1" 
            (play 
                (forEach Piece
                    (then 
                        (if (not 
                                (can Move 
                                    ("StepToEmpty" (from (where "Bear" P1)))
                                )
                            )
                            (addScore P1 (- (count Moves) (+ (score P2) 6)))
                        )
                    )
                )
            )
            (end (if (!= 0 (score P1)) (byScore)))
        )
        }
        >, priority 1] 
(game "Gioco dell'Orso" (players 2) (equipment {(board (add (concentric {1 4 12}) edges:{{6 8} {9 11} {12 14} {5 15}}) use:Vertex) (piece "Human" Each (move Step (to if:(is Empty (to))))) (piece "Bear" Each (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "Human1" (handSite P1) count:3) (place "Bear2" (sites Centre))}) phases:{(phase "PlacementP1" (play (move (from (handSite P1)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P2)) (to if:(is Empty (to)))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied by:All container:"Board")) (add (piece "Bear1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2)) count:3)}))))) (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (handSite P2)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P1)) (to if:(is Empty (to)))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore))))})) 
Two concentric circles, with four radii from the outer circle to in the center, dividing the circles into four equal parts. There are four arcs, each of which bisects a radius between where each radius intersects the circumference of each circle, the arc also intersecting with the outer circle's circumference. One player plays as a bear, which begins on the central point, the other as three hunters, which begin on any three points on the inner circle. The bear plays first. Players alternate turns moving a piece to an empty adjacent spot along the lines. When the bear is unable to move, the game ends and the players play again, switching sides. The player who lasts longest while playing as the bear wins.[Rule, "Rules/One Round", rule:<
        phases:{
        (phase "PlacementP1" 
            (play
                (move 
                    (from (handSite P1))
                    (to (intersection (sites Empty) (sites {1..4})))
                    (then (if ("HandOccupied" P1) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P1) "HuntingP2")
        )
        (phase "HuntingP2" 
            (play (forEach Piece))
            (end {
                (if (no Moves P2) (result P1 Win))
                (if 
                    (or
                        (>= (count Moves) (- (value MoveLimit) 10)) 
                        (>= (count Turns) (- (value TurnLimit) 5)) 
                    )
                    (result P2 Win)
                )
            }) 
        )
        }
        >, priority 0] 
(game "Gioco dell'Orso" (players 2) (equipment {(board (add (concentric {1 4 12}) edges:{{6 8} {9 11} {12 14} {5 15}}) use:Vertex) (piece "Human" Each (move Step (to if:(is Empty (to))))) (piece "Bear" Each (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "Human1" (handSite P1) count:3) (place "Bear2" (sites Centre))}) phases:{(phase "PlacementP1" (play (move (from (handSite P1)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P2)) (to if:(is Empty (to)))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied by:All container:"Board")) (add (piece "Bear1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2)) count:3)}))))) (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (handSite P2)) (to (intersection (sites Empty) (sites {1 2 3 4}))) (then (if (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (move Step (from (where "Bear" P1)) (to if:(is Empty (to)))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore))))})) 
Players take turns moving their pieces. Black starts. Players may: Move one or two empty spaces in any direction, or hop over one ring marker in any direction into an empty space. multiple jumps. White may capture an opponent's piece by moving onto its space from an adjacent one. Both the white and black pieces are removed from play. After moving or capturing, the moving player places a hole-in-the-ice ring marker on the moving tokens starting space and any empty space passed over. The goal for the white player is to capture both black tokens. The goal for the black player is to isolate at least one of their pieces so that it cannot be captured. If both players cannot play, black wins.
(game "Go with the Floe" (players 2) (equipment {(board (keep (square 8) (poly {{-3 4} {4 -3} {11 4} {4 11}}))) (piece "Seal" P1 N (or (move Slide (between (max 2) trail:(id "Disc0"))) (move Hop (between if:(= (what at:(between)) (id "Disc0" Neutral))) (to if:(is Empty (to))) (then (add (piece "Disc0") (to (last From))))))) (piece "Bear" P2 (or {(move Slide (between (max 2) trail:(id "Disc0"))) (move Hop (between if:(= (what at:(between)) (id "Disc0" Neutral))) (to if:(is Empty (to))) (then (add (piece "Disc0") (to (last From))))) (move Step (to if:(= (what at:(to)) (id "Seal1" P1)) (apply (remove (to)))) (then (and (remove (last To)) (add (piece "Disc0") (to (last From))))))})) (piece "Disc" Neutral)}) (rules (start {(place "Bear2" {"G2" "G7"}) (place "Seal1" {"B2" "B7"})}) (play (forEach Piece)) (end {(if (= (count Sites in:(sites Occupied by:All)) 0) (result P2 Win)) (if (and (no Moves P1) (not (can Move (forEach Piece "Bear" (step (to if:(= (what at:(to)) (id "Seal1" P1)))))))) (result P1 Win)) (if (all Passed) (result P1 Win))}))) 
Players take turns moving their pieces. Black starts. Players may: Move one or two empty spaces in any direction, or hop over one ring marker in any direction into an empty space. multiple jumps. White may capture an opponent's piece by moving onto its space from an adjacent one. Both the white and black pieces are removed from play. After moving or capturing, the moving player places a hole-in-the-ice ring marker on the moving tokens starting space and any empty space passed over. The goal for the white player is to capture both black tokens. The goal for the black player is to isolate at least one of their pieces so that it cannot be captured. If both players cannot play, black wins.
(game "Go with the Floe" (players 2) (equipment {(board (keep (square 8) (poly {{-3 4} {4 -3} {11 4} {4 11}}))) (piece "Seal" P1 N (or (move Slide (between (max 2) trail:(id "Disc0"))) (move Hop (between if:(= (what at:(between)) (id "Disc0" Neutral))) (to if:(is Empty (to))) (then (add (piece "Disc0") (to (last From))))))) (piece "Bear" P2 (or {(move Slide (between (max 2) trail:(id "Disc0"))) (move Hop (between if:(= (what at:(between)) (id "Disc0" Neutral))) (to if:(is Empty (to))) (then (add (piece "Disc0") (to (last From))))) (move Step (to if:(= (what at:(to)) (id "Seal1" P1)) (apply (remove (to)))) (then (and (remove (last To)) (add (piece "Disc0") (to (last From))))))})) (piece "Disc" Neutral)}) (rules (start {(place "Bear2" {"G2" "G7"}) (place "Seal1" {"B2" "B7"})}) (play (forEach Piece)) (end {(if (= (count Sites in:(sites Occupied by:All)) 0) (result P2 Win)) (if (and (no Moves P1) (not (can Move (forEach Piece "Bear" (step (to if:(= (what at:(to)) (id "Seal1" P1)))))))) (result P1 Win)) (if (all Passed) (result P1 Win))}))) 
Players take turns moving their pieces. Black starts. Players may: Move one or two empty spaces in any direction, or hop over one ring marker in any direction into an empty space. multiple jumps. White may capture an opponent's piece by moving onto its space from an adjacent one. Both the white and black pieces are removed from play. After moving or capturing, the moving player places a hole-in-the-ice ring marker on the moving tokens starting space and any empty space passed over. The goal for the white player is to capture both black tokens. The goal for the black player is to isolate at least one of their pieces so that it cannot be captured. If both players cannot play, black wins.
(game "Go with the Floe" (players 2) (equipment {(board (keep (square 8) (poly {{-3 4} {4 -3} {11 4} {4 11}}))) (piece "Seal" P1 N (or (move Slide (between (max 2) trail:(id "Disc0"))) (move Hop (between if:(= (what at:(between)) (id "Disc0" Neutral))) (to if:(is Empty (to))) (then (add (piece "Disc0") (to (last From))))))) (piece "Bear" P2 (or {(move Slide (between (max 2) trail:(id "Disc0"))) (move Hop (between if:(= (what at:(between)) (id "Disc0" Neutral))) (to if:(is Empty (to))) (then (add (piece "Disc0") (to (last From))))) (move Step (to if:(= (what at:(to)) (id "Seal1" P1)) (apply (remove (to)))) (then (and (remove (last To)) (add (piece "Disc0") (to (last From))))))})) (piece "Disc" Neutral)}) (rules (start {(place "Bear2" {"G2" "G7"}) (place "Seal1" {"B2" "B7"})}) (play (forEach Piece)) (end {(if (= (count Sites in:(sites Occupied by:All)) 0) (result P2 Win)) (if (and (no Moves P1) (not (can Move (forEach Piece "Bear" (step (to if:(= (what at:(to)) (id "Seal1" P1)))))))) (result P1 Win)) (if (all Passed) (result P1 Win))}))) 
Square board, divided into eight equal triangles, with the central horizonal line extended past the square on either side and lines connecting the end point to the two nearby cornes of the square One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.[End, "End/Cond for P1 and P2", rule:<
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
        >, priority 0] 
(game "Haretavl" (players 2) (equipment {(board (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))}) use:Vertex) (hand Each) (piece "Dog" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog1" (handSite P1) count:3) (place "Hare2" (handSite P2))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))}))) 
Square board, divided into eight equal triangles, with the central horizonal line extended past the square on either side and lines connecting the end point to the two nearby cornes of the square One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.[End, "End/Cond for P1", rule:<
        (end {
            (if (no Moves P2) (result P1 Win))
        }) 
        >, priority 1] 
(game "Haretavl" (players 2) (equipment {(board (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))}) use:Vertex) (hand Each) (piece "Dog" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog1" (handSite P1) count:3) (place "Hare2" (handSite P2))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))}))) 
Square board, divided into eight equal triangles, with the central horizonal line extended past the square on either side and lines connecting the end point to the two nearby cornes of the square One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.[End, "End/Cond for P1 and P2", rule:<
        (end {
            (if (no Moves P2) (result P1 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P2 Win)
            )
        }) 
        >, priority 0] 
(game "Haretavl" (players 2) (equipment {(board (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))}) use:Vertex) (hand Each) (piece "Dog" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog1" (handSite P1) count:3) (place "Hare2" (handSite P2))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win))}))) 
Three diamonds in a row, the central one connecting to the others one opposite corners. A horizontal line connects the top corners of the diamonds, another horizontal line connects the bottom corners of the diamonds, and a longer horizontal line connects all the middle corners. The outer two diamonds have vertical lines connecting their top and bottom corners. One player plays as three hounds, which begin on the outer corner and top and bottom corner of one of the end diamonds. The other player plays as one hare, which begins on the central point of the same diamond. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The Hare moves first. The hounds win by blocking the hare from being able to move.[End, "End/Cond for P1 and P2", rule:<
        (end {
            (if (no Moves P1) (result P2 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P1 Win)
            )
        }) 
        >, priority 0] 
(game "Hund efter Hare (Vendsyssel)" (players 2) (equipment {(board (add (merge {(add (remove (rectangle 1 7) vertices:{3}) edges:{{2 3}}) (scale 2 (shift 0.5 -0.5 (rectangle 1 3))) (scale 2 (shift 0.5 0.5 (rectangle 1 3)))}) edges:{{0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8} {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11}}) use:Vertex) (piece "Hare" P1 (move Step (to if:(is Empty (to))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Hare1" coord:"B2") (place "Dog2" (sites {"A2" "B1" "B3"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))}))) 
Three diamonds in a row, the central one connecting to the others one opposite corners. A horizontal line connects the top corners of the diamonds, another horizontal line connects the bottom corners of the diamonds, and a longer horizontal line connects all the middle corners. The outer two diamonds have vertical lines connecting their top and bottom corners. One player plays as three hounds, which begin on the outer corner and top and bottom corner of one of the end diamonds. The other player plays as one hare, which begins on the central point of the same diamond. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The Hare moves first. The hounds win by blocking the hare from being able to move.[End, "End/Cond for P2", rule:<
        (end {
            (if (no Moves P1) (result P2 Win))
        }) 
        >, priority 1] 
(game "Hund efter Hare (Vendsyssel)" (players 2) (equipment {(board (add (merge {(add (remove (rectangle 1 7) vertices:{3}) edges:{{2 3}}) (scale 2 (shift 0.5 -0.5 (rectangle 1 3))) (scale 2 (shift 0.5 0.5 (rectangle 1 3)))}) edges:{{0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8} {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11}}) use:Vertex) (piece "Hare" P1 (move Step (to if:(is Empty (to))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Hare1" coord:"B2") (place "Dog2" (sites {"A2" "B1" "B3"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))}))) 
Three diamonds in a row, the central one connecting to the others one opposite corners. A horizontal line connects the top corners of the diamonds, another horizontal line connects the bottom corners of the diamonds, and a longer horizontal line connects all the middle corners. The outer two diamonds have vertical lines connecting their top and bottom corners. One player plays as three hounds, which begin on the outer corner and top and bottom corner of one of the end diamonds. The other player plays as one hare, which begins on the central point of the same diamond. Players alternate turns moving a piece to an empty adjacent spot along the lines of the board. The Hare moves first. The hounds win by blocking the hare from being able to move.[End, "End/Cond for P1 and P2", rule:<
        (end {
            (if (no Moves P1) (result P2 Win))
            (if 
                (or
                    (>= (count Moves) (- (value MoveLimit) 10)) 
                    (>= (count Turns) (- (value TurnLimit) 5)) 
                )
                (result P1 Win)
            )
        }) 
        >, priority 0] 
(game "Hund efter Hare (Vendsyssel)" (players 2) (equipment {(board (add (merge {(add (remove (rectangle 1 7) vertices:{3}) edges:{{2 3}}) (scale 2 (shift 0.5 -0.5 (rectangle 1 3))) (scale 2 (shift 0.5 0.5 (rectangle 1 3)))}) edges:{{0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8} {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11}}) use:Vertex) (piece "Hare" P1 (move Step (to if:(is Empty (to))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Hare1" coord:"B2") (place "Dog2" (sites {"A2" "B1" "B3"}))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win))}))) 
Square board, divided into eight equal triangles, and a circle around the square, touching it at the corners, One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.[Play, "Play Rules/White moves only when all placed and winning conditions for each player", rules:<
        phases:{
        (phase "Placement"
            (play 
                (if ("HandOccupied" Mover)
                    (move 
                        (from (handSite Mover)) 
                        (to (sites Empty))
                    ) 
                )
            )
            (nextPhase ("HandEmpty" P2) "Movement")
        )
        
        ("PhaseMovePiece" "Movement"
            (end {
                ("NoMoves" Loss)
                (if 
                    (or
                        (>= (count Moves) (- (value MoveLimit) 10)) 
                        (>= (count Turns) (- (value TurnLimit) 5)) 
                    )
                    (result P1 Win)
                )
            }) 
        )
        }
        >, priority 0] 
(game "Hyvn aetter Hare" (players 2) (equipment {(board (splitCrossings (merge (shift 0.5 0.5 (scale 0.707 (concentric {1 8}))) (square 2))) use:Vertex) (piece "Hare" P1 (move Step (to if:(is Empty (to))))) (piece "Dog" P2 (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "Hare1" (handSite P1) count:1) (place "Dog2" (handSite P2) count:3)}) phases:{(phase "Placement" (play (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (sites Empty))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))})) 
Square board, divided into eight equal triangles, and a circle around the square, touching it at the corners, One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.[Play, "Play Rules/White moves only when his piece is placed", rules:<
        phases:{
        (phase "Placement"
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase Mover ("HandEmpty" Mover) "Movement")
        )
        ("PhaseMovePiece" "Movement")
        }
        (end ("NoMoves" Loss)) 
        >, priority 0] 
(game "Hyvn aetter Hare" (players 2) (equipment {(board (splitCrossings (merge (shift 0.5 0.5 (scale 0.707 (concentric {1 8}))) (square 2))) use:Vertex) (piece "Hare" P1 (move Step (to if:(is Empty (to))))) (piece "Dog" P2 (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "Hare1" (handSite P1) count:1) (place "Dog2" (handSite P2) count:3)}) phases:{(phase "Placement" (play (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (sites Empty))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))})) 
Square board, divided into eight equal triangles, and a circle around the square, touching it at the corners, One player plays as the hare, the other player as three hounds. Players take turns placing one of their pieces on the board. When a player has placed all their pieces, they move to an adjacent empty spot. When the hounds block the hare from being able to move, the hounds win.[Play, "Play Rules/White moves only when all placed and P2 winning condition", rules:<
        phases:{
        (phase "Placement"
            (play 
                (if ("HandOccupied" Mover)
                    (move 
                        (from (handSite Mover)) 
                        (to (sites Empty))
                    ) 
                )
            )
            (nextPhase ("HandEmpty" P2) "Movement")
        )
        
        ("PhaseMovePiece" "Movement"
            (end ("NoMoves" Loss))
        )
        }
        >, priority 1] 
(game "Hyvn aetter Hare" (players 2) (equipment {(board (splitCrossings (merge (shift 0.5 0.5 (scale 0.707 (concentric {1 8}))) (square 2))) use:Vertex) (piece "Hare" P1 (move Step (to if:(is Empty (to))))) (piece "Dog" P2 (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "Hare1" (handSite P1) count:1) (place "Dog2" (handSite P2) count:3)}) phases:{(phase "Placement" (play (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (sites Empty))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))})) 
The board consists of three instersecting lines, with diagonals drawn in the square formed. On opposite ends of the square, the central line is extended beyond the square and lines drawn from the adjacent corners to the end of this line, forming two triangles at opposite ends. One player takes the part of three white towers, the other the part of a single black army piece. First the army moves their piece, then the towers move one of their pieces, play alternating thereafter until the game is ended. A tower piece may move one step along a marked line in any forward or sideways direction. Tower pieces cannot move backwards, diagonally or otherwise, towards the end of the board from which they started. The army may move one step in any direction along a marked line. The army wins by passing the towers and reaching the end of the board from which they started. The towers win by trapping the army so that it cannot move in its turn.[Tower, "Direction Tower/No Sideways", direction:<Forwards>, priority 0] [Army, "Direction Army/Orthogonal", direction:<Orthogonal>, priority 0] [EndCondP2, "P2 Ending Conditions/No Moves P1 after Moving three pieces", EndCondP1:<(and (= (count MovesThisTurn) 2) (no Moves Next))>, priority 0] [Version, "Version/Martin Gardner", hand:<(hand P1)> start:<(start {
            (place "Pawn1" "Hand1")
            (place "Pawn2" (sites P2))
        })
        > play:<
        phases:{
        (phase "Placement" P1 
            (play 
                (move 
                    (from (handSite P1)) 
                    (to (sites Empty))
                )
            ) 
            (nextPhase "Movement")
        )
        ("PhaseMovePiece" "Movement")
        }
        >, priority 0] [Move, "Move Limit/12", limit:<(if (= (count Moves) 12) (result P1 Draw))>, priority 0] 
(game "Jeu Militaire" (players 2) (equipment {(board (rotate 90 (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))})) use:Vertex) (piece "Pawn" P1 (move Step (to if:(is Empty (to))))) (piece "Pawn" P2 N (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Pawn1" (sites P1)) (place "Pawn2" (sites P2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Pawn" P1) (sites P2)) (result P1 Win))}))) 
The board consists of three instersecting lines, with diagonals drawn in the square formed. On opposite ends of the square, the central line is extended beyond the square and lines drawn from the adjacent corners to the end of this line, forming two triangles at opposite ends. One player takes the part of three white towers, the other the part of a single black army piece. First the army moves their piece, then the towers move one of their pieces, play alternating thereafter until the game is ended. A tower piece may move one step along a marked line in any forward or sideways direction. Tower pieces cannot move backwards, diagonally or otherwise, towards the end of the board from which they started. The army may move one step in any direction along a marked line. The army wins by passing the towers and reaching the end of the board from which they started. The towers win by trapping the army so that it cannot move in its turn.[Tower, "Direction Tower/Only Forward", direction:<Forward>, priority 0] [Army, "Direction Army/All directions", direction:<>, priority 2] [EndCondP2, "P2 Ending Conditions/No Moves P1", EndCondP1:<(no Moves P1)>, priority 2] [Version, "Version/Martin Gardner (improved)", hand:<(hand P1)> start:<(start {
            (place "Pawn1" "Hand1")
            (place "Pawn2" (sites P2))
        })
        > play:<
        phases:{
        (phase "Placement" P1 
            (play 
                (move 
                    (from (handSite P1)) 
                    (to (difference (sites Empty) (sites {"B2"})))
                )
            ) 
            (nextPhase "Movement")
        )
        ("PhaseMovePiece" "Movement")
        }
        >, priority 0] [Move, "Move Limit/No move limit", limit:<>, priority 2] 
(game "Jeu Militaire" (players 2) (equipment {(board (rotate 90 (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))})) use:Vertex) (piece "Pawn" P1 (move Step (to if:(is Empty (to))))) (piece "Pawn" P2 N (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Pawn1" (sites P1)) (place "Pawn2" (sites P2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Pawn" P1) (sites P2)) (result P1 Win))}))) 
The board consists of three instersecting lines, with diagonals drawn in the square formed. On opposite ends of the square, the central line is extended beyond the square and lines drawn from the adjacent corners to the end of this line, forming two triangles at opposite ends. One player takes the part of three white towers, the other the part of a single black army piece. First the army moves their piece, then the towers move one of their pieces, play alternating thereafter until the game is ended. A tower piece may move one step along a marked line in any forward or sideways direction. Tower pieces cannot move backwards, diagonally or otherwise, towards the end of the board from which they started. The army may move one step in any direction along a marked line. The army wins by passing the towers and reaching the end of the board from which they started. The towers win by trapping the army so that it cannot move in its turn.[Tower, "Direction Tower/Forward and Sideways", direction:<(directions {Forward Rightward Leftward})>, priority 0] [Army, "Direction Army/Orthogonal", direction:<Orthogonal>, priority 0] [EndCondP2, "P2 Ending Conditions/No Moves P1 after Moving three pieces", EndCondP1:<(and (= (count MovesThisTurn) 2) (no Moves Next))>, priority 0] [Version, "Version/Schuh", hand:<(hand P1)> start:<(start {
            (place "Pawn1" "Hand1")
            (place "Pawn2" (sites P2))
        })
        > play:<
        phases:{
        (phase "PlacementP1" P1 
            (play 
                (move 
                    (from (handSite P1)) 
                    (to (difference (sites Empty) (sites {"B2" "B3"})))
                )
            )  
            (nextPhase Mover "MovementP1")
        )
        (phase "MovementP1" P1 
            (play (forEach Piece)) 
        )
        (phase "MovementP2" P2 
            (play 
                (forEach Piece 
                    (if (!= 1 (state at:(from))) 
                        (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to)))
                            (then
                                (if (< (count MovesThisTurn) 2) 
                                    (and
                                        (moveAgain)
                                        (set State at:(last To) 1)
                                    )
                                    (forEach Site (sites Occupied by:P2)
                                        (set State at:(site) 0)
                                    )
                                    
                                )
                            )
                        )
                    )
                )
            )
        )
        }
        >, priority 0] [Move, "Move Limit/12", limit:<(if (= (count Moves) 12) (result P1 Draw))>, priority 0] 
(game "Jeu Militaire" (players 2) (equipment {(board (rotate 90 (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))})) use:Vertex) (piece "Pawn" P1 (move Step (to if:(is Empty (to))))) (piece "Pawn" P2 N (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Pawn1" (sites P1)) (place "Pawn2" (sites P2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Pawn" P1) (sites P2)) (result P1 Win))}))) 
8x8 Draughts board. One player plays with two foxes, the other with twelve or more hens, played on the white squares. The hens begin on the rows closest to the player; the foxes begin, one each on the left and right end of the row farthest from the hens. Hens move one space forward diagonally, the foxes move one space diagonally forward or backward. Foxes must alternate turns, i.e., when one fox moves, the other fox must move on the next turn. The foxes may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the foxes from being able to move; the foxes win by capturing all the hens.
(game "Jeu de Renard (Two Foxes)" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (if (= (state at:(from)) 1) (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (then (and (forEach Site (sites Occupied by:Mover) (if (= (state at:(site)) 0) (set State at:(site) 1))) (set State at:(last To) 0))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (intersection (sites Top) (union (sites Left) (difference (expand (sites Right)) (sites Right)))) state:1) (place "Hen2" (difference (expand (sites Bottom) steps:2) (sites Phase 0)))}) phases:{(phase "Opening" P1 (play (forEach Piece (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (then (set State at:(last To) 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
8x8 Draughts board. One player plays with two foxes, the other with twelve or more hens, played on the white squares. The hens begin on the rows closest to the player; the foxes begin, one each on the left and right end of the row farthest from the hens. Hens move one space forward diagonally, the foxes move one space diagonally forward or backward. Foxes must alternate turns, i.e., when one fox moves, the other fox must move on the next turn. The foxes may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the foxes from being able to move; the foxes win by capturing all the hens.
(game "Jeu de Renard (Two Foxes)" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (if (= (state at:(from)) 1) (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (then (and (forEach Site (sites Occupied by:Mover) (if (= (state at:(site)) 0) (set State at:(site) 1))) (set State at:(last To) 0))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (intersection (sites Top) (union (sites Left) (difference (expand (sites Right)) (sites Right)))) state:1) (place "Hen2" (difference (expand (sites Bottom) steps:2) (sites Phase 0)))}) phases:{(phase "Opening" P1 (play (forEach Piece (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (then (set State at:(last To) 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
8x8 Draughts board. One player plays with two foxes, the other with twelve or more hens, played on the white squares. The hens begin on the rows closest to the player; the foxes begin, one each on the left and right end of the row farthest from the hens. Hens move one space forward diagonally, the foxes move one space diagonally forward or backward. Foxes must alternate turns, i.e., when one fox moves, the other fox must move on the next turn. The foxes may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the foxes from being able to move; the foxes win by capturing all the hens.
(game "Jeu de Renard (Two Foxes)" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (if (= (state at:(from)) 1) (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))) (then (and (forEach Site (sites Occupied by:Mover) (if (= (state at:(site)) 0) (set State at:(site) 1))) (set State at:(last To) 0))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (intersection (sites Top) (union (sites Left) (difference (expand (sites Right)) (sites Right)))) state:1) (place "Hen2" (difference (expand (sites Bottom) steps:2) (sites Phase 0)))}) phases:{(phase "Opening" P1 (play (forEach Piece (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (then (set State at:(last To) 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
8x8 Draughts board. One player plays with a single fox, the other with twelve hens, played on the white squares. The hens begin on the first three rows; the fox may begin on whatever spot the player chooses. Hens move one space forward diagonally, the fox moves one space diagonally forward or backward. The fox may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the fox from being able to move; the fox wins by capturing all the hens.
(game "Jeu de Renard" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (hand P1)}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (difference (expand (sites Bottom) steps:2) (sites Phase 0)))}) phases:{(phase "Placement" P1 (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Phase 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
8x8 Draughts board. One player plays with a single fox, the other with twelve hens, played on the white squares. The hens begin on the first three rows; the fox may begin on whatever spot the player chooses. Hens move one space forward diagonally, the fox moves one space diagonally forward or backward. The fox may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the fox from being able to move; the fox wins by capturing all the hens.
(game "Jeu de Renard" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (hand P1)}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (difference (expand (sites Bottom) steps:2) (sites Phase 0)))}) phases:{(phase "Placement" P1 (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Phase 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
8x8 Draughts board. One player plays with a single fox, the other with twelve hens, played on the white squares. The hens begin on the first three rows; the fox may begin on whatever spot the player chooses. Hens move one space forward diagonally, the fox moves one space diagonally forward or backward. The fox may capture a hen by hopping over it to an empty space diagonally on the other side of it. The hens win by blocking the fox from being able to move; the fox wins by capturing all the hens.
(game "Jeu de Renard" (players 2) (equipment {(board (square 8)) (piece "Fox" P1 (or (move Step Diagonal (to if:(is Empty (to)))) (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (hand P1)}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (difference (expand (sites Bottom) steps:2) (sites Phase 0)))}) phases:{(phase "Placement" P1 (play (move (from (handSite Mover)) (to (difference (sites Empty) (sites Phase 0))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as thirteen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm. The other player plays as one fox, which can be placed on any empty point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward direction. The fox may hop over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. The fox wins by capturing all the hens, the hens win by blocking the fox from being able to move.
(game "Jeu du Renard et de la Poule" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step Forwards (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (union (expand (sites Bottom)) (sites Row 2)))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as thirteen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm. The other player plays as one fox, which can be placed on any empty point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward direction. The fox may hop over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. The fox wins by capturing all the hens, the hens win by blocking the fox from being able to move.
(game "Jeu du Renard et de la Poule" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step Forwards (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (union (expand (sites Bottom)) (sites Row 2)))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as thirteen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm. The other player plays as one fox, which can be placed on any empty point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward direction. The fox may hop over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. The fox wins by capturing all the hens, the hens win by blocking the fox from being able to move.
(game "Jeu du Renard et de la Poule" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step Forwards (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (handSite P1)) (place "Hen2" (union (expand (sites Bottom)) (sites Row 2)))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Played on a five-pointed star shaped board. One player plays with one piece, the "tiger," and the other plays with seven pieces, the "kaooas." The player with the kaooas attempt to checkmate the tiger by moving to one of the points where the lines of the board intersect. The tiger captures kaooas by hopping over them. The tiger wins by capturing all the kaooas.[Num, "Start rules/3 Pieces", pieces:<3>, priority 0] 
(game "Kaooa" (players 2) (equipment {(board (splitCrossings (regular Star 5)) use:Vertex) (hand Each) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (handSite P1) count:1) (place "Marker2" (handSite P2) count:7)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))})) 
Played on a five-pointed star shaped board. One player plays with one piece, the "tiger," and the other plays with seven pieces, the "kaooas." The player with the kaooas attempt to checkmate the tiger by moving to one of the points where the lines of the board intersect. The tiger captures kaooas by hopping over them. The tiger wins by capturing all the kaooas.[Num, "Start rules/4 Pieces", pieces:<4>, priority 0] 
(game "Kaooa" (players 2) (equipment {(board (splitCrossings (regular Star 5)) use:Vertex) (hand Each) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (handSite P1) count:1) (place "Marker2" (handSite P2) count:7)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))})) 
Played on a five-pointed star shaped board. One player plays with one piece, the "tiger," and the other plays with seven pieces, the "kaooas." The player with the kaooas attempt to checkmate the tiger by moving to one of the points where the lines of the board intersect. The tiger captures kaooas by hopping over them. The tiger wins by capturing all the kaooas.[Num, "Start rules/5 Pieces", pieces:<5>, priority 0] 
(game "Kaooa" (players 2) (equipment {(board (splitCrossings (regular Star 5)) use:Vertex) (hand Each) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker1" (handSite P1) count:1) (place "Marker2" (handSite P2) count:7)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end (if (no Moves Next) (result Next Loss))))})) 
One player has a single piece, the other has twelve, playing as jackrabbits. The player playing as the jackrabbits attempts to move all of their pieces to the opposite side of the board until they form the same configuration as the starting position on the opposite side. Pieces move orthogonally to accomplish this. The opponent's goal is to capture one of the jackrabbits by hopping over it.
(game "Ko-app-paw-na" (players 2) (equipment {(board (square 5) use:Vertex) (piece "Rabbit" P1 (move Step (to if:(is Empty (to))))) (piece "Counter" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (regions P1 (union (expand (sites Top)) (sites {"A3" "E3"})))}) (rules (start {(place "Rabbit1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Counter2" (centrePoint))}) (play (forEach Piece)) (end {(if (= (sites P1) (sites Occupied by:P1)) (result P1 Win)) (if (= (count Pieces P1) 11) (result P2 Win))}))) 
One player has a single piece, the other has twelve, playing as jackrabbits. The player playing as the jackrabbits attempts to move all of their pieces to the opposite side of the board until they form the same configuration as the starting position on the opposite side. Pieces move orthogonally to accomplish this. The opponent's goal is to capture one of the jackrabbits by hopping over it.
(game "Ko-app-paw-na" (players 2) (equipment {(board (square 5) use:Vertex) (piece "Rabbit" P1 (move Step (to if:(is Empty (to))))) (piece "Counter" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (regions P1 (union (expand (sites Top)) (sites {"A3" "E3"})))}) (rules (start {(place "Rabbit1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Counter2" (centrePoint))}) (play (forEach Piece)) (end {(if (= (sites P1) (sites Occupied by:P1)) (result P1 Win)) (if (= (count Pieces P1) 11) (result P2 Win))}))) 
One player has a single piece, the other has twelve, playing as jackrabbits. The player playing as the jackrabbits attempts to move all of their pieces to the opposite side of the board until they form the same configuration as the starting position on the opposite side. Pieces move orthogonally to accomplish this. The opponent's goal is to capture one of the jackrabbits by hopping over it.
(game "Ko-app-paw-na" (players 2) (equipment {(board (square 5) use:Vertex) (piece "Rabbit" P1 (move Step (to if:(is Empty (to))))) (piece "Counter" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (regions P1 (union (expand (sites Top)) (sites {"A3" "E3"})))}) (rules (start {(place "Rabbit1" (union (expand (sites Bottom)) (sites {"A3" "E3"}))) (place "Counter2" (centrePoint))}) (play (forEach Piece)) (end {(if (= (sites P1) (sites Occupied by:P1)) (result P1 Win)) (if (= (count Pieces P1) 11) (result P2 Win))}))) 
A square, with diagonals and lines connecting the midpoints. Two triangles on opposite sides of the triangle. One player plays as three galgos, which are placed on the three points of one of the triangles. The other player plays as one hare, which begins on the point between two of the galgos. The hare may move in any direction along the lines on the board, but must move to the central point of the board on its first move. The galgos may move forward orthogonally or diagonally; they may never move horizontally and may only move backwards if the galgo which starts on the apex of the triangle has moved and the piece to move backwards has not yet moved. If the galgos block the hare from being able to move, they win, if the hare moves past the galgos it wins.
(game "La Liebre Perseguida" (players 2) (equipment {(board (rotate 90 (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))})) use:Vertex) (piece "Hare" P1 (move Step Orthogonal (to if:(is Empty (to))))) (piece "Rabbit" P2 N (or (if (= (state at:(from)) 1) (move Step Backwards (to if:(and (is In (to) (sites Bottom)) (is Empty (to)))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (move Step Forwards (to if:(is Empty (to))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0)))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Hare1" (sites P1)) (place "Rabbit2" (sites P2) state:1)}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Hare" P1) (sites P2)) (result P1 Win))}))) 
A square, with diagonals and lines connecting the midpoints. Two triangles on opposite sides of the triangle. One player plays as three galgos, which are placed on the three points of one of the triangles. The other player plays as one hare, which begins on the point between two of the galgos. The hare may move in any direction along the lines on the board, but must move to the central point of the board on its first move. The galgos may move forward orthogonally or diagonally; they may never move horizontally and may only move backwards if the galgo which starts on the apex of the triangle has moved and the piece to move backwards has not yet moved. If the galgos block the hare from being able to move, they win, if the hare moves past the galgos it wins.
(game "La Liebre Perseguida" (players 2) (equipment {(board (rotate 90 (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))})) use:Vertex) (piece "Hare" P1 (move Step Orthogonal (to if:(is Empty (to))))) (piece "Rabbit" P2 N (or (if (= (state at:(from)) 1) (move Step Backwards (to if:(and (is In (to) (sites Bottom)) (is Empty (to)))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (move Step Forwards (to if:(is Empty (to))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0)))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Hare1" (sites P1)) (place "Rabbit2" (sites P2) state:1)}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Hare" P1) (sites P2)) (result P1 Win))}))) 
A square, with diagonals and lines connecting the midpoints. Two triangles on opposite sides of the triangle. One player plays as three galgos, which are placed on the three points of one of the triangles. The other player plays as one hare, which begins on the point between two of the galgos. The hare may move in any direction along the lines on the board, but must move to the central point of the board on its first move. The galgos may move forward orthogonally or diagonally; they may never move horizontally and may only move backwards if the galgo which starts on the apex of the triangle has moved and the piece to move backwards has not yet moved. If the galgos block the hare from being able to move, they win, if the hare moves past the galgos it wins.
(game "La Liebre Perseguida" (players 2) (equipment {(board (rotate 90 (merge {(rectangle 3 3 diagonals:Alternating) (shift 1.5 0.5 (rotate -90 (wedge 2))) (shift -1.5 0.5 (rotate 90 (wedge 2)))})) use:Vertex) (piece "Hare" P1 (move Step Orthogonal (to if:(is Empty (to))))) (piece "Rabbit" P2 N (or (if (= (state at:(from)) 1) (move Step Backwards (to if:(and (is In (to) (sites Bottom)) (is Empty (to)))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0))))) (move Step Forwards (to if:(is Empty (to))) (then (if (= (state at:(last To)) 1) (set State at:(last To) 0)))))) (regions "Home" P2 (sites {"B1" "C2" "A2"})) (regions "Home" P1 (sites {"B2"}))}) (rules (start {(place "Hare1" (sites P1)) (place "Rabbit2" (sites P2) state:1)}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (is In (where "Hare" P1) (sites P2)) (result P1 Win))}))) 
4x4 board. One player plays as four tigers, which begin the board placed in the four corner spaces. The other player plays as twelve oxen. The first move is made by placing one of the oxen on an empty space, followed by a move by the tiger closest to the ox. Players continue alternating moves, the oxen player placing an ox and the tiger player moving a tiger. When moving, pieces move to an empty adjacent spot orthogonally. Once all of the oxen are placed, the players alternate turns moving their pieces on the board. Pieces may capture another piece by hopping over an adjacent opponent's piece to an empty space immediately on the opposite side of it. Tigers capture orthogonally, oxen capture diagonally. Oxen may also capture a tiger by blocking it from being able to move. The oxen win by reducing the tigers to two.
(game "Len Cua Kin Ngoa" (players 2) (equipment {(board (square 4)) (hand P1) (piece "Ox" P1 (or (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step Orthogonal (to if:(is Empty (to)))))) (piece "Tiger" P2 (or (move Hop Orthogonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step Orthogonal (to if:(is Empty (to))))))}) (rules (start {(place "Ox1" (handSite P1) count:12) (place "Tiger2" (sites Corners))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (forEach Site (sites Occupied by:Next) (if (not (can Move (or (step (from (site)) Orthogonal (to if:(is Empty (to)))) (hop (from (site)) Orthogonal (between if:(= (who at:(between)) P1) (apply (remove (between)))) (to if:(is Empty (to))))))) (remove (site))))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "MovementP1")) (phase "MovementP1" P1 (play (forEach Piece (then (forEach Site (sites Occupied by:Next) (if (not (can Move (or (step (from (site)) Orthogonal (to if:(is Empty (to)))) (hop (from (site)) Orthogonal (between if:(= (who at:(between)) P1) (apply (remove (between)))) (to if:(is Empty (to))))))) (remove (site)))))))) (phase "FirstTigerMovement" P2 (play (forEach Piece (if (= (count Steps (from) (last To)) (min (results from:(last To) to:(sites Corners) (count Steps (from) (to))))) (or (move Hop Orthogonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))))) (nextPhase Mover "MovementP2")) (phase "MovementP2" P2 (play (forEach Piece)))} (end {(if (no Pieces P1) (result P2 Win)) (if (>= 2 (count Pieces P2)) (result P1 Win))}))) 
4x4 board. One player plays as four tigers, which begin the board placed in the four corner spaces. The other player plays as twelve oxen. The first move is made by placing one of the oxen on an empty space, followed by a move by the tiger closest to the ox. Players continue alternating moves, the oxen player placing an ox and the tiger player moving a tiger. When moving, pieces move to an empty adjacent spot orthogonally. Once all of the oxen are placed, the players alternate turns moving their pieces on the board. Pieces may capture another piece by hopping over an adjacent opponent's piece to an empty space immediately on the opposite side of it. Tigers capture orthogonally, oxen capture diagonally. Oxen may also capture a tiger by blocking it from being able to move. The oxen win by reducing the tigers to two.
(game "Len Cua Kin Ngoa" (players 2) (equipment {(board (square 4)) (hand P1) (piece "Ox" P1 (or (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step Orthogonal (to if:(is Empty (to)))))) (piece "Tiger" P2 (or (move Hop Orthogonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step Orthogonal (to if:(is Empty (to))))))}) (rules (start {(place "Ox1" (handSite P1) count:12) (place "Tiger2" (sites Corners))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (forEach Site (sites Occupied by:Next) (if (not (can Move (or (step (from (site)) Orthogonal (to if:(is Empty (to)))) (hop (from (site)) Orthogonal (between if:(= (who at:(between)) P1) (apply (remove (between)))) (to if:(is Empty (to))))))) (remove (site))))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "MovementP1")) (phase "MovementP1" P1 (play (forEach Piece (then (forEach Site (sites Occupied by:Next) (if (not (can Move (or (step (from (site)) Orthogonal (to if:(is Empty (to)))) (hop (from (site)) Orthogonal (between if:(= (who at:(between)) P1) (apply (remove (between)))) (to if:(is Empty (to))))))) (remove (site)))))))) (phase "FirstTigerMovement" P2 (play (forEach Piece (if (= (count Steps (from) (last To)) (min (results from:(last To) to:(sites Corners) (count Steps (from) (to))))) (or (move Hop Orthogonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))))) (nextPhase Mover "MovementP2")) (phase "MovementP2" P2 (play (forEach Piece)))} (end {(if (no Pieces P1) (result P2 Win)) (if (>= 2 (count Pieces P2)) (result P1 Win))}))) 
4x4 board. One player plays as four tigers, which begin the board placed in the four corner spaces. The other player plays as twelve oxen. The first move is made by placing one of the oxen on an empty space, followed by a move by the tiger closest to the ox. Players continue alternating moves, the oxen player placing an ox and the tiger player moving a tiger. When moving, pieces move to an empty adjacent spot orthogonally. Once all of the oxen are placed, the players alternate turns moving their pieces on the board. Pieces may capture another piece by hopping over an adjacent opponent's piece to an empty space immediately on the opposite side of it. Tigers capture orthogonally, oxen capture diagonally. Oxen may also capture a tiger by blocking it from being able to move. The oxen win by reducing the tigers to two.
(game "Len Cua Kin Ngoa" (players 2) (equipment {(board (square 4)) (hand P1) (piece "Ox" P1 (or (move Hop Diagonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step Orthogonal (to if:(is Empty (to)))))) (piece "Tiger" P2 (or (move Hop Orthogonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step Orthogonal (to if:(is Empty (to))))))}) (rules (start {(place "Ox1" (handSite P1) count:12) (place "Tiger2" (sites Corners))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (forEach Site (sites Occupied by:Next) (if (not (can Move (or (step (from (site)) Orthogonal (to if:(is Empty (to)))) (hop (from (site)) Orthogonal (between if:(= (who at:(between)) P1) (apply (remove (between)))) (to if:(is Empty (to))))))) (remove (site))))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "MovementP1")) (phase "MovementP1" P1 (play (forEach Piece (then (forEach Site (sites Occupied by:Next) (if (not (can Move (or (step (from (site)) Orthogonal (to if:(is Empty (to)))) (hop (from (site)) Orthogonal (between if:(= (who at:(between)) P1) (apply (remove (between)))) (to if:(is Empty (to))))))) (remove (site)))))))) (phase "FirstTigerMovement" P2 (play (forEach Piece (if (= (count Steps (from) (last To)) (min (results from:(last To) to:(sites Corners) (count Steps (from) (to))))) (or (move Hop Orthogonal (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))))) (nextPhase Mover "MovementP2")) (phase "MovementP2" P2 (play (forEach Piece)))} (end {(if (no Pieces P1) (result P2 Win)) (if (>= 2 (count Pieces P2)) (result P1 Win))}))) 
The board has no extension and joined diagonals. Haretavl rules.[Variant, "Variant/Haretavl - Top Extension Joined Diagonal", variant:<
        (players 2)
        (equipment {
            ("TopExtensionJoinedDiagonal")
            ("HaretavlEquipment")
        })
        ("HaretavlRules")
        >, priority 0] 
(game "Ludus Coriovalli" (players 2) (equipment {(board (add (merge {(scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3)))}) edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}) use:Vertex) (hand Each) (piece "Dog" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog1" (handSite P1) count:3) (place "Hare2" (handSite P2))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5))) (result P2 Win))}))) 
The board has no extension and joined diagonals. Haretavl rules.[Variant, "Variant/Haretavl - Both Extension Joined Diagonal", variant:<
        (players 2)
        (equipment {
            ("BothExtensionJoinedDiagonal")
            ("HaretavlEquipment")
        })
        ("HaretavlRules")
        >, priority 0] 
(game "Ludus Coriovalli" (players 2) (equipment {(board (add (merge {(scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3)))}) edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}) use:Vertex) (hand Each) (piece "Dog" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog1" (handSite P1) count:3) (place "Hare2" (handSite P2))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5))) (result P2 Win))}))) 
The board has no extension and joined diagonals. Haretavl rules.[Variant, "Variant/Haretavl - No Extension No Joined Diagonal", variant:<
        (players 2)
        (equipment {
            ("NoExtensionNoJoinedDiagonal")
            ("HaretavlEquipment")
        })
        ("HaretavlRules")
        >, priority 0] 
(game "Ludus Coriovalli" (players 2) (equipment {(board (add (merge {(scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3)))}) edges:{{3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7}}) use:Vertex) (hand Each) (piece "Dog" P1 (move Step (to if:(is Empty (to))))) (piece "Hare" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Dog1" (handSite P1) count:3) (place "Hare2" (handSite P2))}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5))) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each 3x3 quadrant. One player plays with two tigers, which begin on the central spot. The other player plays as 24 goats. The goats play first, and may place a piece on any empty spot. The tigers move to an empty spot any distance along the lines on the board, or may hop over an adjacent goat to capture it, provided there is an empty spot immediately on the other side of the goat. Once all of the goats are placed, they may move along the lines to an empty adjacent spot. If the tigers cannot move, the goats win. The tigers win by capturing all the goats.
(game "Main Tapak Empat" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (hand P1)}) (rules (start {(place Stack "Tiger2" (centrePoint)) (place Stack "Goat1" (handSite P1) count:24)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each 3x3 quadrant. One player plays with two tigers, which begin on the central spot. The other player plays as 24 goats. The goats play first, and may place a piece on any empty spot. The tigers move to an empty spot any distance along the lines on the board, or may hop over an adjacent goat to capture it, provided there is an empty spot immediately on the other side of the goat. Once all of the goats are placed, they may move along the lines to an empty adjacent spot. If the tigers cannot move, the goats win. The tigers win by capturing all the goats.
(game "Main Tapak Empat" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (hand P1)}) (rules (start {(place Stack "Tiger2" (centrePoint)) (place Stack "Goat1" (handSite P1) count:24)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each 3x3 quadrant. One player plays with two tigers, which begin on the central spot. The other player plays as 24 goats. The goats play first, and may place a piece on any empty spot. The tigers move to an empty spot any distance along the lines on the board, or may hop over an adjacent goat to capture it, provided there is an empty spot immediately on the other side of the goat. Once all of the goats are placed, they may move along the lines to an empty adjacent spot. If the tigers cannot move, the goats win. The tigers win by capturing all the goats.
(game "Main Tapak Empat" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (hand P1)}) (rules (start {(place Stack "Tiger2" (centrePoint)) (place Stack "Goat1" (handSite P1) count:24)}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))))) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. The other plays as the Punipeki, which is placed on any empty spot on the first turn. Pieces move along the lines to an adjacent empty spot. The Punipeki may jump over an adjacent piece to capture it. The Punipeki wins if it can capture all the opponent's pieces, the other player wins by blocking the Punipeki from moving.
(game "Manu" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Stick" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker2" (union (expand (sites Bottom)) (sites Row 2))) (place "Stick1" (handSite P1))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. The other plays as the Punipeki, which is placed on any empty spot on the first turn. Pieces move along the lines to an adjacent empty spot. The Punipeki may jump over an adjacent piece to capture it. The Punipeki wins if it can capture all the opponent's pieces, the other player wins by blocking the Punipeki from moving.
(game "Manu" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Stick" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker2" (union (expand (sites Bottom)) (sites Row 2))) (place "Stick1" (handSite P1))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. The other plays as the Punipeki, which is placed on any empty spot on the first turn. Pieces move along the lines to an adjacent empty spot. The Punipeki may jump over an adjacent piece to capture it. The Punipeki wins if it can capture all the opponent's pieces, the other player wins by blocking the Punipeki from moving.
(game "Manu" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Stick" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker2" (union (expand (sites Bottom)) (sites Row 2))) (place "Stick1" (handSite P1))}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting two sides of the triangle. One player plays as twenty people, stacked five each in the four points where the diagonals cross in each quadrant. The other player plays as two tigers, which are placed on the midpoints of the sides without triangles. Players alternate turns moving one piece to an adjacent spot along the lines of the board. The tiger may hop over one of the people to an empty point on the opposite side immediately adjacent to it along the lines of the board. When the tiger hops over one of the stacks, it captures only one of the people. The tigers win by capturing all the people, the people win by blocking the tigers from being able to move.
(game "Mao Naga Tiger Game" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "Human" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place Stack "Human1" (sites {"B4" "B6" "D4" "D6"}) count:5) (place "Tiger2" (sites {"A5" "E5"}))}) (play (forEach Piece top:True)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting two sides of the triangle. One player plays as twenty people, stacked five each in the four points where the diagonals cross in each quadrant. The other player plays as two tigers, which are placed on the midpoints of the sides without triangles. Players alternate turns moving one piece to an adjacent spot along the lines of the board. The tiger may hop over one of the people to an empty point on the opposite side immediately adjacent to it along the lines of the board. When the tiger hops over one of the stacks, it captures only one of the people. The tigers win by capturing all the people, the people win by blocking the tigers from being able to move.
(game "Mao Naga Tiger Game" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "Human" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place Stack "Human1" (sites {"B4" "B6" "D4" "D6"}) count:5) (place "Tiger2" (sites {"A5" "E5"}))}) (play (forEach Piece top:True)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting two sides of the triangle. One player plays as twenty people, stacked five each in the four points where the diagonals cross in each quadrant. The other player plays as two tigers, which are placed on the midpoints of the sides without triangles. Players alternate turns moving one piece to an adjacent spot along the lines of the board. The tiger may hop over one of the people to an empty point on the opposite side immediately adjacent to it along the lines of the board. When the tiger hops over one of the stacks, it captures only one of the people. The tigers win by capturing all the people, the people win by blocking the tigers from being able to move.
(game "Mao Naga Tiger Game" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "Human" P1 (move Step (to if:(is Empty (to))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place Stack "Human1" (sites {"B4" "B6" "D4" "D6"}) count:5) (place "Tiger2" (sites {"A5" "E5"}))}) (play (forEach Piece top:True)) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
One player plays as the tigers (five in number), the other as the sheep (fifteen in number). They take turns placing the pieces on the intersections of the lines. When all of the player's pieces are on the board, the piece may move to any adjacent intersection along the connecting lines. The tiger hops over a sheep to capture it. The goal of the tiger is to capture all of the sheep; the sheep try to prevent all of the tigers from moving.
(game "Merimueng-rimueng-do" (players 2) (equipment {(board (scale 1.4 1 (remove (scale 1 2 (wedge 5 6)) edges:{{0 1} {0 6}} vertices:{24 19})) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))) (move Hop (between (exact 3) if:(and (!= (row of:(between)) (row of:(from))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Hop (between (exact 4) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "Sheep" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (handSite P1) count:5) (place "Sheep2" (handSite P2) count:15)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))})) 
One player plays as the tigers (five in number), the other as the sheep (fifteen in number). They take turns placing the pieces on the intersections of the lines. When all of the player's pieces are on the board, the piece may move to any adjacent intersection along the connecting lines. The tiger hops over a sheep to capture it. The goal of the tiger is to capture all of the sheep; the sheep try to prevent all of the tigers from moving.
(game "Merimueng-rimueng-do" (players 2) (equipment {(board (scale 1.4 1 (remove (scale 1 2 (wedge 5 6)) edges:{{0 1} {0 6}} vertices:{24 19})) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))) (move Hop (between (exact 3) if:(and (!= (row of:(between)) (row of:(from))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Hop (between (exact 4) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "Sheep" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (handSite P1) count:5) (place "Sheep2" (handSite P2) count:15)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))})) 
One player plays as the tigers (five in number), the other as the sheep (fifteen in number). They take turns placing the pieces on the intersections of the lines. When all of the player's pieces are on the board, the piece may move to any adjacent intersection along the connecting lines. The tiger hops over a sheep to capture it. The goal of the tiger is to capture all of the sheep; the sheep try to prevent all of the tigers from moving.
(game "Merimueng-rimueng-do" (players 2) (equipment {(board (scale 1.4 1 (remove (scale 1 2 (wedge 5 6)) edges:{{0 1} {0 6}} vertices:{24 19})) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))) (move Hop (between (exact 3) if:(and (!= (row of:(between)) (row of:(from))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Hop (between (exact 4) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "Sheep" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (handSite P1) count:5) (place "Sheep2" (handSite P2) count:15)}) phases:{(phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))})) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. one player plays as two tigers, which start on the central point. The other player has 23 sheep, eight of which start on the board, on the points immediately adjacent to the tigers. Pieces move one space along the lines to an empty adjacent spot. The tigers may capture an unbroken line of sheep in one direction, provided there is an unoccupied space at the opposite end of the line. The player with the sheep replaces any captured sheep from those remaining in their hand. The tigers win when they capture all of the sheep; the sheep win when they block the tigers from being able to move.
(game "Merimueng-rimueng" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand P2) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "Sheep" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Sheep2" (difference (expand (sites Centre)) (centrePoint))) (place Stack "Sheep2" (handSite P2) count:15) (place Stack "Tiger1" (sites Centre) counts:{2})}) phases:{(phase "Movement" (play (forEach Piece top:True)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}) (nextPhase (and (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (< (count Sites in:(sites Occupied by:P2 container:"Board")) 8)) "Placement")) (phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain)))) (nextPhase (or (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) (= (count Sites in:(sites Occupied by:P2 container:"Board")) 8)) "Movement"))})) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. one player plays as two tigers, which start on the central point. The other player has 23 sheep, eight of which start on the board, on the points immediately adjacent to the tigers. Pieces move one space along the lines to an empty adjacent spot. The tigers may capture an unbroken line of sheep in one direction, provided there is an unoccupied space at the opposite end of the line. The player with the sheep replaces any captured sheep from those remaining in their hand. The tigers win when they capture all of the sheep; the sheep win when they block the tigers from being able to move.
(game "Merimueng-rimueng" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand P2) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "Sheep" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Sheep2" (difference (expand (sites Centre)) (centrePoint))) (place Stack "Sheep2" (handSite P2) count:15) (place Stack "Tiger1" (sites Centre) counts:{2})}) phases:{(phase "Movement" (play (forEach Piece top:True)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}) (nextPhase (and (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (< (count Sites in:(sites Occupied by:P2 container:"Board")) 8)) "Placement")) (phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain)))) (nextPhase (or (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) (= (count Sites in:(sites Occupied by:P2 container:"Board")) 8)) "Movement"))})) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The bast of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. one player plays as two tigers, which start on the central point. The other player has 23 sheep, eight of which start on the board, on the points immediately adjacent to the tigers. Pieces move one space along the lines to an empty adjacent spot. The tigers may capture an unbroken line of sheep in one direction, provided there is an unoccupied space at the opposite end of the line. The player with the sheep replaces any captured sheep from those remaining in their hand. The tigers win when they capture all of the sheep; the sheep win when they block the tigers from being able to move.
(game "Merimueng-rimueng" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand P2) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "Sheep" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Sheep2" (difference (expand (sites Centre)) (centrePoint))) (place Stack "Sheep2" (handSite P2) count:15) (place Stack "Tiger1" (sites Centre) counts:{2})}) phases:{(phase "Movement" (play (forEach Piece top:True)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}) (nextPhase (and (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (< (count Sites in:(sites Occupied by:P2 container:"Board")) 8)) "Placement")) (phase "Placement" (play (move (from (handSite Mover)) (to (sites Empty)) (then (moveAgain)))) (nextPhase (or (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) (= (count Sites in:(sites Occupied by:P2 container:"Board")) 8)) "Movement"))})) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with one larger piece, the Oke-mow, placed on the central point, and the other player with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. Pieces move along the lines to an adjacent empty spot. The Oke-mow may jump over an adjacent piece to capture it. Multiple captures are allowed. The Oke-mow wins if it can capture all the opponent's pieces, the other player wins by blocking the Oke-mow from moving.
(game "Musinaykahwhanmetowaywin" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Disc" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Disc2" (union (expand (sites Bottom)) (sites Row 2))) (place "Marker1" (centrePoint))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with one larger piece, the Oke-mow, placed on the central point, and the other player with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. Pieces move along the lines to an adjacent empty spot. The Oke-mow may jump over an adjacent piece to capture it. Multiple captures are allowed. The Oke-mow wins if it can capture all the opponent's pieces, the other player wins by blocking the Oke-mow from moving.
(game "Musinaykahwhanmetowaywin" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Disc" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Disc2" (union (expand (sites Bottom)) (sites Row 2))) (place "Marker1" (centrePoint))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays with one larger piece, the Oke-mow, placed on the central point, and the other player with thirteen pieces situated on every point of one arm of the cross and along the line immediately perpendicular to that arm. Pieces move along the lines to an adjacent empty spot. The Oke-mow may jump over an adjacent piece to capture it. Multiple captures are allowed. The Oke-mow wins if it can capture all the opponent's pieces, the other player wins by blocking the Oke-mow from moving.
(game "Musinaykahwhanmetowaywin" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Step (to if:(is Empty (to)))))) (piece "Disc" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Disc2" (union (expand (sites Bottom)) (sites Row 2))) (place "Marker1" (centrePoint))}) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))) (move Pass)) (forEach Piece))) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
A triangle, with two lines drawn from the apex to the base. A rectangle is drawn across the triangle, and another line connecting the midpoints of the short sides of the rectangle. One player plays as three tigers, the other as seventeen people. One tiger begins on the apex of the triangle and the other two may be placed anywhere. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Three Tigers)" (players 2) (equipment {(board (add (remove (merge (shift 0 2 (scale 8 2 (rectangle 3 2))) (scale 1 2 (wedge 5 4))) edges:{{0 1} {2 3} {4 5}}) edges:{{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) use:Vertex) (hand Each) (piece "Human" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Human2" (handSite P2) count:17) (place "Tiger1" (sites Top)) (place "Tiger1" (handSite P1) count:2)}) phases:{(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
A triangle, with two lines drawn from the apex to the base. A rectangle is drawn across the triangle, and another line connecting the midpoints of the short sides of the rectangle. One player plays as three tigers, the other as seventeen people. One tiger begins on the apex of the triangle and the other two may be placed anywhere. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Three Tigers)" (players 2) (equipment {(board (add (remove (merge (shift 0 2 (scale 8 2 (rectangle 3 2))) (scale 1 2 (wedge 5 4))) edges:{{0 1} {2 3} {4 5}}) edges:{{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) use:Vertex) (hand Each) (piece "Human" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Human2" (handSite P2) count:17) (place "Tiger1" (sites Top)) (place "Tiger1" (handSite P1) count:2)}) phases:{(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
A triangle, with two lines drawn from the apex to the base. A rectangle is drawn across the triangle, and another line connecting the midpoints of the short sides of the rectangle. One player plays as three tigers, the other as seventeen people. One tiger begins on the apex of the triangle and the other two may be placed anywhere. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Three Tigers)" (players 2) (equipment {(board (add (remove (merge (shift 0 2 (scale 8 2 (rectangle 3 2))) (scale 1 2 (wedge 5 4))) edges:{{0 1} {2 3} {4 5}}) edges:{{0 15} {18 1} {2 11} {14 3} {4 7} {10 5}}) use:Vertex) (hand Each) (piece "Human" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Human2" (handSite P2) count:17) (place "Tiger1" (sites Top)) (place "Tiger1" (handSite P1) count:2)}) phases:{(phase "Opening" P1 (play (move (from (handSite Mover)) (to (sites Empty)) (then (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Opening" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. At the midpoint of each side, the apex of a triangle. A line is drawn from the apex to the base of each triangle, and another line bisecting this one and the two opposite sides of the triangle. One player plays as two tigers, the other as 25 people. One tiger begins on the central point, and the other may be placed anywhere on the board. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Two Tigers)" (players 2) (equipment {(board (merge {(shift 2 2 (square 5 diagonals:Alternating)) (shift 2 0 (wedge 3)) (shift 5 3 (rotate 90 (wedge 3))) (shift 2 6 (rotate 180 (wedge 3))) (shift -1 3 (rotate 270 (wedge 3)))}) use:Vertex) (hand Each) (piece "Human" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Human2" (handSite P2) count:25) (place "Tiger1" (sites Centre)) (place "Tiger1" (handSite P1))}) phases:{(phase "Opening" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. At the midpoint of each side, the apex of a triangle. A line is drawn from the apex to the base of each triangle, and another line bisecting this one and the two opposite sides of the triangle. One player plays as two tigers, the other as 25 people. One tiger begins on the central point, and the other may be placed anywhere on the board. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Two Tigers)" (players 2) (equipment {(board (merge {(shift 2 2 (square 5 diagonals:Alternating)) (shift 2 0 (wedge 3)) (shift 5 3 (rotate 90 (wedge 3))) (shift 2 6 (rotate 180 (wedge 3))) (shift -1 3 (rotate 270 (wedge 3)))}) use:Vertex) (hand Each) (piece "Human" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Human2" (handSite P2) count:25) (place "Tiger1" (sites Centre)) (place "Tiger1" (handSite P1))}) phases:{(phase "Opening" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. At the midpoint of each side, the apex of a triangle. A line is drawn from the apex to the base of each triangle, and another line bisecting this one and the two opposite sides of the triangle. One player plays as two tigers, the other as 25 people. One tiger begins on the central point, and the other may be placed anywhere on the board. Players alternate turns, with the person playing as the people first placing a person on the board, and then one of the tigers moving to an empty adjacent spot along the lines of the board. When all of the people have been placed, the people move on the board in the same fashion. The tigers may capture one of the people by jumping over it to an empty adjacent spot immediately on the opposite side of one of the people along the lines of the board. The tigers win when they capture enough people so that the people cannot block the tiger, the people win when they can block the tiger from being able to move.
(game "Mysore Tiger Game (Two Tigers)" (players 2) (equipment {(board (merge {(shift 2 2 (square 5 diagonals:Alternating)) (shift 2 0 (wedge 3)) (shift 5 3 (rotate 90 (wedge 3))) (shift 2 6 (rotate 180 (wedge 3))) (shift -1 3 (rotate 270 (wedge 3)))}) use:Vertex) (hand Each) (piece "Human" P2 (move Step (to if:(is Empty (to))))) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))}) (rules (start {(place "Human2" (handSite P2) count:25) (place "Tiger1" (sites Centre)) (place "Tiger1" (handSite P1))}) phases:{(phase "Opening" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
Rectangular board, with 32 points along each long side. Lines connect the points opposite each other, as well as a diagonal line connecting each point on the left to the next highest point on the right (e.g., the first left point with the second right point, the second left point with the third right point, an so on). One player plays as the calf, which begins in the bottom right corner. The second player plays as two children, which begin in the bottom left corner and the second point on the right. Players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The children move first, and cannot move backward during the game. The calf can move in any direction. The children win by forcing the calf to move to the top left corner of the board, the calf wins by returning to its starting point after first having left it.
(game "Neg Tugal Tuux" (players 2) (equipment {(board (add (scale 15 1 (rectangle 32 2)) edges:{{0 3} {2 5} {4 7} {6 9} {8 11} {10 13} {12 15} {14 17} {16 19} {18 21} {20 23} {22 25} {24 27} {26 29} {28 31} {30 33} {32 35} {34 37} {36 39} {38 41} {40 43} {42 45} {44 47} {46 49} {48 51} {50 53} {52 55} {54 57} {56 59} {58 61} {60 63}}) use:Vertex) (piece "Cow" P2 (move Step (to if:(is Empty (to))))) (piece "Human" P1 (move Step (to if:(and (is Empty (to)) (>= 1 (- (from) (to)))))))}) (rules (start {(place "Cow2" 1) (place "Human1" (sites {0 3}))}) (play (forEach Piece)) (end {(if (and (is Mover P2) (= 1 (where "Cow2" P2))) (result P2 Win)) (if (= 62 (where "Cow2" P2)) (result P1 Win))}))) 
Rectangular board, with 32 points along each long side. Lines connect the points opposite each other, as well as a diagonal line connecting each point on the left to the next highest point on the right (e.g., the first left point with the second right point, the second left point with the third right point, an so on). One player plays as the calf, which begins in the bottom right corner. The second player plays as two children, which begin in the bottom left corner and the second point on the right. Players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The children move first, and cannot move backward during the game. The calf can move in any direction. The children win by forcing the calf to move to the top left corner of the board, the calf wins by returning to its starting point after first having left it.
(game "Neg Tugal Tuux" (players 2) (equipment {(board (add (scale 15 1 (rectangle 32 2)) edges:{{0 3} {2 5} {4 7} {6 9} {8 11} {10 13} {12 15} {14 17} {16 19} {18 21} {20 23} {22 25} {24 27} {26 29} {28 31} {30 33} {32 35} {34 37} {36 39} {38 41} {40 43} {42 45} {44 47} {46 49} {48 51} {50 53} {52 55} {54 57} {56 59} {58 61} {60 63}}) use:Vertex) (piece "Cow" P2 (move Step (to if:(is Empty (to))))) (piece "Human" P1 (move Step (to if:(and (is Empty (to)) (>= 1 (- (from) (to)))))))}) (rules (start {(place "Cow2" 1) (place "Human1" (sites {0 3}))}) (play (forEach Piece)) (end {(if (and (is Mover P2) (= 1 (where "Cow2" P2))) (result P2 Win)) (if (= 62 (where "Cow2" P2)) (result P1 Win))}))) 
Rectangular board, with 32 points along each long side. Lines connect the points opposite each other, as well as a diagonal line connecting each point on the left to the next highest point on the right (e.g., the first left point with the second right point, the second left point with the third right point, an so on). One player plays as the calf, which begins in the bottom right corner. The second player plays as two children, which begin in the bottom left corner and the second point on the right. Players alternate turns moving one of their pieces to an empty adjacent spot on the board along the lines. The children move first, and cannot move backward during the game. The calf can move in any direction. The children win by forcing the calf to move to the top left corner of the board, the calf wins by returning to its starting point after first having left it.
(game "Neg Tugal Tuux" (players 2) (equipment {(board (add (scale 15 1 (rectangle 32 2)) edges:{{0 3} {2 5} {4 7} {6 9} {8 11} {10 13} {12 15} {14 17} {16 19} {18 21} {20 23} {22 25} {24 27} {26 29} {28 31} {30 33} {32 35} {34 37} {36 39} {38 41} {40 43} {42 45} {44 47} {46 49} {48 51} {50 53} {52 55} {54 57} {56 59} {58 61} {60 63}}) use:Vertex) (piece "Cow" P2 (move Step (to if:(is Empty (to))))) (piece "Human" P1 (move Step (to if:(and (is Empty (to)) (>= 1 (- (from) (to)))))))}) (rules (start {(place "Cow2" 1) (place "Human1" (sites {0 3}))}) (play (forEach Piece)) (end {(if (and (is Mover P2) (= 1 (where "Cow2" P2))) (result P2 Win)) (if (= 62 (where "Cow2" P2)) (result P1 Win))}))) 
Cross-shaped board made of five squares. The four squares of the arms have diagonals and lines connecting the midpoints of opposite sides. The central square has diagonals and a line connecting the central point with the midpoint of the lower side. One player plays with nineteen pieces, which begin on the uppermost nineteen points. The other player plays with two pieces, which begin on the central space and the one immediately below it. The player with two pieces goes first. Pieces move along the lines of the board to an empty adjacent spot. The player with two pieces may capture an adjacent opponent's piece by hopping over it to an empty spot immediately on the opposite side of it. The player with two pieces wins by capturing all of the opponent's pieces; the player with nineteen pieces wins by blocking the opponent from being able to move.
(game "Nuktagaq" (players 2) (equipment {(board (remove (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) edges:{{17 10} {9 10} {10 11}}) use:Vertex) (hand P1) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker2" (difference (expand (sites Top) steps:4) (union (sites Row 2) (sites Centre)))) (place "Marker1" (sites Direction from:(sites Centre) S included:True distance:1))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Cross-shaped board made of five squares. The four squares of the arms have diagonals and lines connecting the midpoints of opposite sides. The central square has diagonals and a line connecting the central point with the midpoint of the lower side. One player plays with nineteen pieces, which begin on the uppermost nineteen points. The other player plays with two pieces, which begin on the central space and the one immediately below it. The player with two pieces goes first. Pieces move along the lines of the board to an empty adjacent spot. The player with two pieces may capture an adjacent opponent's piece by hopping over it to an empty spot immediately on the opposite side of it. The player with two pieces wins by capturing all of the opponent's pieces; the player with nineteen pieces wins by blocking the opponent from being able to move.
(game "Nuktagaq" (players 2) (equipment {(board (remove (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) edges:{{17 10} {9 10} {10 11}}) use:Vertex) (hand P1) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker2" (difference (expand (sites Top) steps:4) (union (sites Row 2) (sites Centre)))) (place "Marker1" (sites Direction from:(sites Centre) S included:True distance:1))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
Cross-shaped board made of five squares. The four squares of the arms have diagonals and lines connecting the midpoints of opposite sides. The central square has diagonals and a line connecting the central point with the midpoint of the lower side. One player plays with nineteen pieces, which begin on the uppermost nineteen points. The other player plays with two pieces, which begin on the central space and the one immediately below it. The player with two pieces goes first. Pieces move along the lines of the board to an empty adjacent spot. The player with two pieces may capture an adjacent opponent's piece by hopping over it to an empty spot immediately on the opposite side of it. The player with two pieces wins by capturing all of the opponent's pieces; the player with nineteen pieces wins by blocking the opponent from being able to move.
(game "Nuktagaq" (players 2) (equipment {(board (remove (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) edges:{{17 10} {9 10} {10 11}}) use:Vertex) (hand P1) (piece "Marker" P1 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Marker" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Marker2" (difference (expand (sites Top) steps:4) (union (sites Row 2) (sites Centre)))) (place "Marker1" (sites Direction from:(sites Centre) S included:True distance:1))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (no Pieces P2) (result P2 Win))}))) 
5x5 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. One triangle, its apex intersecting the main board at the midpoint of one side. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the tiger, placed on the central point of the triangle, and the other plays as twelve goats, which begin on the first two rows of points opposite the triangle and on the outer two points in the third row. The tiger moves first. Pieces move to an empty adjacent spot along the lines on the board. The tiger alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tiger wins by capturing all the goats; the goats win by blocking the tiger from being able to move.
(game "Orissa Tiger Game (One Tiger)" (players 2) (equipment {(board (rotate 180 (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))) use:Vertex) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Goat" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (sites {"C6"})) (place "Goat2" (union (expand (sites Bottom)) (sites {"A3" "E3"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. One triangle, its apex intersecting the main board at the midpoint of one side. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the tiger, placed on the central point of the triangle, and the other plays as twelve goats, which begin on the first two rows of points opposite the triangle and on the outer two points in the third row. The tiger moves first. Pieces move to an empty adjacent spot along the lines on the board. The tiger alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tiger wins by capturing all the goats; the goats win by blocking the tiger from being able to move.
(game "Orissa Tiger Game (One Tiger)" (players 2) (equipment {(board (rotate 180 (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))) use:Vertex) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Goat" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (sites {"C6"})) (place "Goat2" (union (expand (sites Bottom)) (sites {"A3" "E3"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 lines, intersecting to form a square. Diagonals are drawn in the four quadrants of the board. One triangle, its apex intersecting the main board at the midpoint of one side. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the tiger, placed on the central point of the triangle, and the other plays as twelve goats, which begin on the first two rows of points opposite the triangle and on the outer two points in the third row. The tiger moves first. Pieces move to an empty adjacent spot along the lines on the board. The tiger alone may capture a goat by hopping over it to an empty spot immediately opposite a goat. The tiger wins by capturing all the goats; the goats win by blocking the tiger from being able to move.
(game "Orissa Tiger Game (One Tiger)" (players 2) (equipment {(board (rotate 180 (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))) use:Vertex) (piece "Tiger" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Goat" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Tiger1" (sites {"C6"})) (place "Goat2" (union (expand (sites Bottom)) (sites {"A3" "E3"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
To be reconstructed. Rules as inferred by Murray 1951. One player is the bean, and the other player plays with twelve corn kernels. The corn kernels move along the lines. The goal is to corner the bean so that it cannot move. The bean may hop over the corn kernels to capture them or move to an adjacent empty point along the lines. The bean wins by reducing the opponent to nine corn kernels.[Jump, "Play Rules/Multiple hops", bean:<("HopSequenceCapture" ~ ~ at:EndOfTurn)>, priority 0] 
(game "Pon Chochotl" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Corn" P1 (move Step (to if:(is Empty (to))))) (piece "Bean" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (is Prev Mover) (move Pass) (move Step (to if:(is Empty (to)))))))}) (rules (start {(place "Corn1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Bean2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))}))) 
To be reconstructed. Rules as inferred by Murray 1951. One player is the bean, and the other player plays with twelve corn kernels. The corn kernels move along the lines. The goal is to corner the bean so that it cannot move. The bean may hop over the corn kernels to capture them or move to an adjacent empty point along the lines. The bean wins by reducing the opponent to nine corn kernels.[Jump, "Play Rules/No multiple hops", bean:<("HopCapture")>, priority 1] 
(game "Pon Chochotl" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Corn" P1 (move Step (to if:(is Empty (to))))) (piece "Bean" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (is Prev Mover) (move Pass) (move Step (to if:(is Empty (to)))))))}) (rules (start {(place "Corn1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Bean2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))}))) 
To be reconstructed. Rules as inferred by Murray 1951. One player is the bean, and the other player plays with twelve corn kernels. The corn kernels move along the lines. The goal is to corner the bean so that it cannot move. The bean may hop over the corn kernels to capture them or move to an adjacent empty point along the lines. The bean wins by reducing the opponent to nine corn kernels.[Jump, "Play Rules/Multiple hops", bean:<("HopSequenceCapture" ~ ~ at:EndOfTurn)>, priority 0] 
(game "Pon Chochotl" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Corn" P1 (move Step (to if:(is Empty (to))))) (piece "Bean" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (is Prev Mover) (move Pass) (move Step (to if:(is Empty (to)))))))}) (rules (start {(place "Corn1" (union {(expand (sites Bottom)) (sites {"A3" "E3"})})) (place "Bean2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 9) (result P1 Loss))}))) 
Cross-shaped board, made of four 3x3 intersecting lines with diagonals. One player plays as the fox, which begins on the central space of the board. The other player plays as the lambs, who start in the spaces of one arm of the cross and the line of seven spots in front of that arm. Players alternate turns moving their pieces along the lines. The fox may capture one lamb by hopping over it in a straight line to an empty space on the opposite side of it. The fox wins by capturing seven lambs, the lambs win by blocking the fox so it cannot move.
(game "Refskak" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Lamb" P1 (move Step (to if:(is Empty (to))))) (piece "Fox" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Fox2" (centrePoint)) (place "Lamb1" (union (expand (sites Bottom) steps:2) (sites {"A3" "B3" "F3" "G3"})))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 6) (result P1 Loss))}))) 
Cross-shaped board, made of four 3x3 intersecting lines with diagonals. One player plays as the fox, which begins on the central space of the board. The other player plays as the lambs, who start in the spaces of one arm of the cross and the line of seven spots in front of that arm. Players alternate turns moving their pieces along the lines. The fox may capture one lamb by hopping over it in a straight line to an empty space on the opposite side of it. The fox wins by capturing seven lambs, the lambs win by blocking the fox so it cannot move.
(game "Refskak" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Lamb" P1 (move Step (to if:(is Empty (to))))) (piece "Fox" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Fox2" (centrePoint)) (place "Lamb1" (union (expand (sites Bottom) steps:2) (sites {"A3" "B3" "F3" "G3"})))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 6) (result P1 Loss))}))) 
Cross-shaped board, made of four 3x3 intersecting lines with diagonals. One player plays as the fox, which begins on the central space of the board. The other player plays as the lambs, who start in the spaces of one arm of the cross and the line of seven spots in front of that arm. Players alternate turns moving their pieces along the lines. The fox may capture one lamb by hopping over it in a straight line to an empty space on the opposite side of it. The fox wins by capturing seven lambs, the lambs win by blocking the fox so it cannot move.
(game "Refskak" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (piece "Lamb" P1 (move Step (to if:(is Empty (to))))) (piece "Fox" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Fox2" (centrePoint)) (place "Lamb1" (union (expand (sites Bottom) steps:2) (sites {"A3" "B3" "F3" "G3"})))}) (play (forEach Piece)) (end {(if (no Moves Next) (result Next Loss)) (if (<= (count Pieces P1) 6) (result P1 Loss))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as seventeen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm, and on the two outermost points on the left and right arms. The other player plays as one fox, which starts on the central point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward or horizontal direction. The fox hops over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. At the beginning of the game, the players choose whether to allow the fox the ability to make multiple captures in one turn. If the fox is able to capture but does not, the opponent adds another hen on an empty point in the bottom row. If there is no empty spot on the bottom row, the player waits until there is one to place the new hen. The fox wins by capturing all of the hens or by moving to the furthest line on the hens' side of the board. The hens win by blocking the fox from being able to move.[Fox, "Fox Moves/Multi Captures", hopCapture:<("HopSequenceCapture")> stepMove:<("StepToEmpty")> rememberHopCapture:<
        (do 
            ("RememberSiteWithPossibleMultiCapture" ("HopSequenceCaptureAgain") ("HopSequenceCapture")) 
            next:
            (if ("SameTurn")
                (or
                    ("HopSequenceCaptureAgain")
                    (move Pass)
                )
                (forEach Piece)
                (then 
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >, priority 0] 
(game "Renard et les Poules" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 S (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (centrePoint)) (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))}) phases:{(phase "FoxPhase" P1 (play (do (set Pending (sites To (forEach Piece "Fox" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))) next:(forEach Piece (then (if (and (is Pending) (not (is In (last To) (sites Pending)))) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))))))))) (phase "HenPhase" P2 (play (if (and (> (value Player Prev) 0) (!= 0 (count Sites in:(intersection (sites Empty) (sites Bottom))))) (move Add (to (intersection (sites Empty) (sites Bottom))) (then (and (set Value Prev (- (value Player Prev) 1)) (moveAgain)))) (forEach Piece))))} (end {(if (no Moves P1) (result P1 Loss)) (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as seventeen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm, and on the two outermost points on the left and right arms. The other player plays as one fox, which starts on the central point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward or horizontal direction. The fox hops over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. At the beginning of the game, the players choose whether to allow the fox the ability to make multiple captures in one turn. If the fox is able to capture but does not, the opponent adds another hen on an empty point in the bottom row. If there is no empty spot on the bottom row, the player waits until there is one to place the new hen. The fox wins by capturing all of the hens or by moving to the furthest line on the hens' side of the board. The hens win by blocking the fox from being able to move.[Fox, "Fox Moves/One Single Orthogonal Capture", hopCapture:<("HopCapture" (directions {N S E W}))> stepMove:<("StepToEmpty" (directions {N S E W}))> rememberHopCapture:<
        (do 
            ("RememberSiteWithPossibleCapture" ("HopCapture" (directions {N S E W}))) 
            next:(forEach Piece
                (then 
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >, priority 0] 
(game "Renard et les Poules" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 S (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (centrePoint)) (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))}) phases:{(phase "FoxPhase" P1 (play (do (set Pending (sites To (forEach Piece "Fox" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))) next:(forEach Piece (then (if (and (is Pending) (not (is In (last To) (sites Pending)))) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))))))))) (phase "HenPhase" P2 (play (if (and (> (value Player Prev) 0) (!= 0 (count Sites in:(intersection (sites Empty) (sites Bottom))))) (move Add (to (intersection (sites Empty) (sites Bottom))) (then (and (set Value Prev (- (value Player Prev) 1)) (moveAgain)))) (forEach Piece))))} (end {(if (no Moves P1) (result P1 Loss)) (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))}))) 
Played on cross-shaped board, made of five squares, each divided into four squares and with the diagonals of the larger squares drawn. One player plays as seventeen hens, which begin on the points on one of the arms of the cross and along the line immediately perpendicular to that arm, and on the two outermost points on the left and right arms. The other player plays as one fox, which starts on the central point of the board. Players alternate turns moving to an empty adjacent spot along the lines of the board. The hens, however, can only move in a forward or horizontal direction. The fox hops over an adjacent hen to an empty spot immediately on the opposite side of the hen along the lines of the board. At the beginning of the game, the players choose whether to allow the fox the ability to make multiple captures in one turn. If the fox is able to capture but does not, the opponent adds another hen on an empty point in the bottom row. If there is no empty spot on the bottom row, the player waits until there is one to place the new hen. The fox wins by capturing all of the hens or by moving to the furthest line on the hens' side of the board. The hens win by blocking the fox from being able to move.[Fox, "Fox Moves/Multi Orthogonal Captures", hopCapture:<("HopCustomSequenceCapture" (directions {N S E W}))> stepMove:<("StepToEmpty" (directions {N S E W}))> rememberHopCapture:<
        (do 
            ("RememberSiteWithPossibleMultiCapture" 
                ("HopCustomSequenceCapture" (from (last To)) (directions {N S E W})) 
                ("HopCustomSequenceCapture" (from) (directions {N S E W}))
            ) 
            next:
            (if ("SameTurn")
                (or
                    ("HopCustomSequenceCapture" (from (last To)) (directions {N S E W})) 
                    (move Pass)
                )
                (forEach Piece)
                (then 
                    (if ("ShouldCapturedButMoved")
                        ("HasNotCaptured")
                    )
                )
            )
        )
        >, priority 0] 
(game "Renard et les Poules" (players 2) (equipment {(board (merge (shift 0 (/ (- 7 3) 2) (rectangle 3 7 diagonals:Alternating)) (shift (/ (- 7 3) 2) 0 (rectangle 7 3 diagonals:Alternating))) use:Vertex) (hand P1) (piece "Fox" P1 S (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to)))))) (piece "Hen" P2 N (move Step (directions {Forwards Rightward Leftward}) (to if:(is Empty (to)))))}) (rules (start {(place "Fox1" (centrePoint)) (place "Hen2" (union {(expand (sites Bottom)) (sites Row 2) (sites {"A4" "G4" "A5" "G5"})}))}) phases:{(phase "FoxPhase" P1 (play (do (set Pending (sites To (forEach Piece "Fox" (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))))) next:(forEach Piece (then (if (and (is Pending) (not (is In (last To) (sites Pending)))) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))))))))) (phase "HenPhase" P2 (play (if (and (> (value Player Prev) 0) (!= 0 (count Sites in:(intersection (sites Empty) (sites Bottom))))) (move Add (to (intersection (sites Empty) (sites Bottom))) (then (and (set Value Prev (- (value Player Prev) 1)) (moveAgain)))) (forEach Piece))))} (end {(if (no Moves P1) (result P1 Loss)) (if (or (is In (where "Fox" P1) (sites Bottom)) (no Pieces P2)) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as the tiger, which is placed on the apex of either triangle. The other player plays as 24 people, nine of which begin on the nine central points of the board. To begin, the person playing as the tiger removes three of the people from their starting position and places them on any points on the board. The person playing as the people then places one of the remaining people on an empty spot on the board. The tiger then moves to an empty adjacent spot along the lines of the board. Play continues like this until all of the people are placed, at which point the people move to an adjacent empty spot on the board as well. On its turn, the tiger may hop over a line of people to an empty spot on the other side of the line, following the lines of the board and only if the number of people in the line is odd. The tiger wins if it captures all the people; the people win when they block the tiger from being able to move.
(game "Rimau-Rimau (One Tiger)" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is Empty (to)) (is Even (count Steps (from) (to))))))})) (piece "human" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "human2" (expand (sites Centre))) (place "human2" (handSite P2) count:15) (place "Tiger1" (handSite P1))}) phases:{(phase "PlacementTiger" P1 (play (move (from (handSite P1)) (to (sites {"C3" "C7"})) (then (moveAgain)))) (nextPhase Mover "MoveHuman")) (phase "MoveHuman" P1 (play (move (from (intersection (expand (sites Centre)) (sites Occupied by:Next))) (to (difference (sites Empty) (expand (sites Centre)))) (then (if (< 6 (count Sites in:(intersection (expand (sites Centre)) (sites Occupied by:Next)))) (moveAgain))))) (nextPhase Mover (= 6 (count Sites in:(intersection (expand (sites Centre)) (sites Occupied by:Next)))) "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))})) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as the tiger, which is placed on the apex of either triangle. The other player plays as 24 people, nine of which begin on the nine central points of the board. To begin, the person playing as the tiger removes three of the people from their starting position and places them on any points on the board. The person playing as the people then places one of the remaining people on an empty spot on the board. The tiger then moves to an empty adjacent spot along the lines of the board. Play continues like this until all of the people are placed, at which point the people move to an adjacent empty spot on the board as well. On its turn, the tiger may hop over a line of people to an empty spot on the other side of the line, following the lines of the board and only if the number of people in the line is odd. The tiger wins if it captures all the people; the people win when they block the tiger from being able to move.
(game "Rimau-Rimau (One Tiger)" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is Empty (to)) (is Even (count Steps (from) (to))))))})) (piece "human" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "human2" (expand (sites Centre))) (place "human2" (handSite P2) count:15) (place "Tiger1" (handSite P1))}) phases:{(phase "PlacementTiger" P1 (play (move (from (handSite P1)) (to (sites {"C3" "C7"})) (then (moveAgain)))) (nextPhase Mover "MoveHuman")) (phase "MoveHuman" P1 (play (move (from (intersection (expand (sites Centre)) (sites Occupied by:Next))) (to (difference (sites Empty) (expand (sites Centre)))) (then (if (< 6 (count Sites in:(intersection (expand (sites Centre)) (sites Occupied by:Next)))) (moveAgain))))) (nextPhase Mover (= 6 (count Sites in:(intersection (expand (sites Centre)) (sites Occupied by:Next)))) "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))})) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as the tiger, which is placed on the apex of either triangle. The other player plays as 24 people, nine of which begin on the nine central points of the board. To begin, the person playing as the tiger removes three of the people from their starting position and places them on any points on the board. The person playing as the people then places one of the remaining people on an empty spot on the board. The tiger then moves to an empty adjacent spot along the lines of the board. Play continues like this until all of the people are placed, at which point the people move to an adjacent empty spot on the board as well. On its turn, the tiger may hop over a line of people to an empty spot on the other side of the line, following the lines of the board and only if the number of people in the line is odd. The tiger wins if it captures all the people; the people win when they block the tiger from being able to move.
(game "Rimau-Rimau (One Tiger)" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is Empty (to)) (is Even (count Steps (from) (to))))))})) (piece "human" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "human2" (expand (sites Centre))) (place "human2" (handSite P2) count:15) (place "Tiger1" (handSite P1))}) phases:{(phase "PlacementTiger" P1 (play (move (from (handSite P1)) (to (sites {"C3" "C7"})) (then (moveAgain)))) (nextPhase Mover "MoveHuman")) (phase "MoveHuman" P1 (play (move (from (intersection (expand (sites Centre)) (sites Occupied by:Next))) (to (difference (sites Empty) (expand (sites Centre)))) (then (if (< 6 (count Sites in:(intersection (expand (sites Centre)) (sites Occupied by:Next)))) (moveAgain))))) (nextPhase Mover (= 6 (count Sites in:(intersection (expand (sites Centre)) (sites Occupied by:Next)))) "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))})) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as two tigers, the other as 23 people. One of the tigers begins on any spot on the board. Eight of the people begin on the spots surrounding the central point of the board. The tiger player, on their first turn, removes one of the people and then places the second tiger anywhere on the board. The people then play, placing one of the remaining people on an empty spot on the board. On the tiger's turn, the player may move one of the tigers to an empty adjacent spot along the lines of the board. The tiger may also capture a person by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. When all of the people are placed, they move to an empty adjacent spot along the lines of the board on their turn. The tigers win by capturing all the people; the people win by blocking both tigers from being able to move.[Start, "Start Rules/Tigers start at the centre", start:<
        (start {
            (place "human2" (difference (expand (sites Centre)) (centrePoint)))
            (place "human2" (handSite P2) count:15)
            (place "Tiger1" (centrePoint) count:2)
        })
        > play:<
        phases:{
        (phase "PlacementHuman" P2
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase 
                ("HandEmpty" P2) 
                "Movement"
            )
        )
        
        ("PhaseMovePiece" "Movement"
            (end ("NoMovesP1NoPiecesP2"))
        )
        }
        >, priority 0] 
(game "Rimau-Rimau (Two Tigers)" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "human" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "human2" (difference (expand (sites Centre)) (centrePoint))) (place "human2" (handSite P2) count:16) (place "Tiger1" (handSite P1) count:2)}) phases:{(phase "PlacementFirstTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (moveAgain)))) (nextPhase Mover "RemoveHuman")) (phase "RemoveHuman" P1 (play (move Remove (intersection (sites Board) (sites Occupied by:Next)) (then (moveAgain)))) (nextPhase Mover "PlacementSecondTiger")) (phase "PlacementSecondTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))})) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as two tigers, the other as 23 people. One of the tigers begins on any spot on the board. Eight of the people begin on the spots surrounding the central point of the board. The tiger player, on their first turn, removes one of the people and then places the second tiger anywhere on the board. The people then play, placing one of the remaining people on an empty spot on the board. On the tiger's turn, the player may move one of the tigers to an empty adjacent spot along the lines of the board. The tiger may also capture a person by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. When all of the people are placed, they move to an empty adjacent spot along the lines of the board on their turn. The tigers win by capturing all the people; the people win by blocking both tigers from being able to move.[Start, "Start Rules/Tigers Start in hand", start:<
        (start {
            (place "human2" (difference (expand (sites Centre)) (centrePoint)))
            (place "human2" (handSite P2) count:16)
            (place "Tiger1" (handSite P1) count:2)
        })
        > play:<
        phases:{
        
        (phase "PlacementFirstTiger" P1
            (play (move (from (handSite P1)) (to (sites Empty)) (then (moveAgain))))
            (nextPhase Mover "RemoveHuman")
        )
        
        (phase "RemoveHuman" P1
            (play 
                (move
                    Remove
                    (intersection (sites Board) (sites Occupied by:Next))
                    (then (moveAgain))
                )
            )
            (nextPhase Mover "PlacementSecondTiger")
        )
        
        (phase "PlacementSecondTiger" P1
            (play (move (from (handSite P1)) (to (sites Empty))))
            (nextPhase Mover "Movement")
        )
        
        (phase "PlacementHuman" P2
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase 
                ("HandEmpty" P2) 
                "Movement"
            )
        )
        
        ("PhaseMovePiece" "Movement"
            (end {
                (if (no Moves P1) (result P2 Win))
                (if (no Pieces P2) (result P1 Win))
            })
        )
        }
        >, priority 1] 
(game "Rimau-Rimau (Two Tigers)" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "human" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "human2" (difference (expand (sites Centre)) (centrePoint))) (place "human2" (handSite P2) count:16) (place "Tiger1" (handSite P1) count:2)}) phases:{(phase "PlacementFirstTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (moveAgain)))) (nextPhase Mover "RemoveHuman")) (phase "RemoveHuman" P1 (play (move Remove (intersection (sites Board) (sites Occupied by:Next)) (then (moveAgain)))) (nextPhase Mover "PlacementSecondTiger")) (phase "PlacementSecondTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))})) 
5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. One player plays as two tigers, the other as 23 people. One of the tigers begins on any spot on the board. Eight of the people begin on the spots surrounding the central point of the board. The tiger player, on their first turn, removes one of the people and then places the second tiger anywhere on the board. The people then play, placing one of the remaining people on an empty spot on the board. On the tiger's turn, the player may move one of the tigers to an empty adjacent spot along the lines of the board. The tiger may also capture a person by hopping over it to an empty adjacent spot immediately on the opposite side of it along the lines of the board. When all of the people are placed, they move to an empty adjacent spot along the lines of the board on their turn. The tigers win by capturing all the people; the people win by blocking both tigers from being able to move.[Start, "Start Rules/Tigers start at the centre", start:<
        (start {
            (place "human2" (difference (expand (sites Centre)) (centrePoint)))
            (place "human2" (handSite P2) count:15)
            (place "Tiger1" (centrePoint) count:2)
        })
        > play:<
        phases:{
        (phase "PlacementHuman" P2
            (play 
                (move 
                    (from (handSite Mover)) 
                    (to (sites Empty))
                ) 
            )
            (nextPhase 
                ("HandEmpty" P2) 
                "Movement"
            )
        )
        
        ("PhaseMovePiece" "Movement"
            (end ("NoMovesP1NoPiecesP2"))
        )
        }
        >, priority 0] 
(game "Rimau-Rimau (Two Tigers)" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (hand Each) (piece "Tiger" P1 (or {(move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))))})) (piece "human" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "human2" (difference (expand (sites Centre)) (centrePoint))) (place "human2" (handSite P2) count:16) (place "Tiger1" (handSite P1) count:2)}) phases:{(phase "PlacementFirstTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)) (then (moveAgain)))) (nextPhase Mover "RemoveHuman")) (phase "RemoveHuman" P1 (play (move Remove (intersection (sites Board) (sites Occupied by:Next)) (then (moveAgain)))) (nextPhase Mover "PlacementSecondTiger")) (phase "PlacementSecondTiger" P1 (play (move (from (handSite P1)) (to (sites Empty)))) (nextPhase Mover "Movement")) (phase "PlacementHuman" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)) (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))})) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the Rimoe (king), which starts on the central point. The other player has 24 pieces, eight of which start on the board, on the points immediately adjacent to the Rimoe. The Rimoe plays first, and takes one of the opponent's pieces by hopping over it to an empty spot immediately behind it in a straight line. The Rimoe captures in this way any uninterrupted line of pieces with an odd number. The Rimoe cannot capture a line of pieces with an even number. When the Rimoe cannot capture, it moves one to an empty adjacent space along the lines of the board. The other player places on of their remaining pieces on the board on their turn. When there are no more pieces left to place, the player moves one of the pieces to an empty adjacent spot along the lines. The Rimoe wins by capturing all of the opponent's pieces; the opponent wins by blocking the Rimoe from being able to move.[Play, "Play Rules/Two Rimoes", kingHop:<
        ("HopCapture")
        > numKings:<2>, priority 0] 
(game "Rimoe" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "King" P1 (priority {(move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is Empty (to)) (is Even (count Steps (from) (to)))))) (move Step (to if:(is Empty (to))))})) (piece "Marker" P2 (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "King1" (centrePoint) count:1) (place "Marker2" (handSite P2) count:16) (place "Marker2" (difference (expand (sites Centre)) (centrePoint)))}) phases:{(phase "Placement" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the Rimoe (king), which starts on the central point. The other player has 24 pieces, eight of which start on the board, on the points immediately adjacent to the Rimoe. The Rimoe plays first, and takes one of the opponent's pieces by hopping over it to an empty spot immediately behind it in a straight line. The Rimoe captures in this way any uninterrupted line of pieces with an odd number. The Rimoe cannot capture a line of pieces with an even number. When the Rimoe cannot capture, it moves one to an empty adjacent space along the lines of the board. The other player places on of their remaining pieces on the board on their turn. When there are no more pieces left to place, the player moves one of the pieces to an empty adjacent spot along the lines. The Rimoe wins by capturing all of the opponent's pieces; the opponent wins by blocking the Rimoe from being able to move.[Play, "Play Rules/One Rimoe", kingHop:<
        (move
            Hop 
            (between 
                (range 1 9)
                if:("IsEnemyAt" (between))
                (apply (remove (between)))
            )
            (to 
                if:(and 
                    (is Empty (to)) 
                    ("NumCapturedPiecesIsOdd")
                )
            )
        )
        > numKings:<1>, priority 1] 
(game "Rimoe" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "King" P1 (priority {(move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is Empty (to)) (is Even (count Steps (from) (to)))))) (move Step (to if:(is Empty (to))))})) (piece "Marker" P2 (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "King1" (centrePoint) count:1) (place "Marker2" (handSite P2) count:16) (place "Marker2" (difference (expand (sites Centre)) (centrePoint)))}) phases:{(phase "Placement" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 intersecting lines, with diagonals drawn in the four quadrants of the board. Two triangles, their apices intersecting the main board at opposite midpoints. The base of the triangle is bisected by a line drawn from the apex, and this line is bisected and intersects with the other two sides of the triangle. One player plays as the Rimoe (king), which starts on the central point. The other player has 24 pieces, eight of which start on the board, on the points immediately adjacent to the Rimoe. The Rimoe plays first, and takes one of the opponent's pieces by hopping over it to an empty spot immediately behind it in a straight line. The Rimoe captures in this way any uninterrupted line of pieces with an odd number. The Rimoe cannot capture a line of pieces with an even number. When the Rimoe cannot capture, it moves one to an empty adjacent space along the lines of the board. The other player places on of their remaining pieces on the board on their turn. When there are no more pieces left to place, the player moves one of the pieces to an empty adjacent spot along the lines. The Rimoe wins by capturing all of the opponent's pieces; the opponent wins by blocking the Rimoe from being able to move.[Play, "Play Rules/Two Rimoes", kingHop:<
        ("HopCapture")
        > numKings:<2>, priority 0] 
(game "Rimoe" (players 2) (equipment {(board (merge {(square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3))}) use:Vertex) (piece "King" P1 (priority {(move Hop (between (range 1 9) if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(and (is Empty (to)) (is Even (count Steps (from) (to)))))) (move Step (to if:(is Empty (to))))})) (piece "Marker" P2 (move Step (to if:(is Empty (to))))) (hand Each)}) (rules (start {(place "King1" (centrePoint) count:1) (place "Marker2" (handSite P2) count:16) (place "Marker2" (difference (expand (sites Centre)) (centrePoint)))}) phases:{(phase "Placement" P2 (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase Mover (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site)))) "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (no Moves P1) (result P2 Win)) (if (no Pieces P2) (result P1 Win))}))) 
5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with nineteen goats, divided into three stacks of five and one stack of four, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move. The goal of the tigers is to capture all the goats.
(game "Sher Bakar" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P1 (move Step (to if:(or (and (is In (to) (sites "StartingSitesGoats")) (is Friend (who at:(to)))) (is Empty (to)))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))))) (regions "StartingSitesGoats" (sites {"B2" "D2" "D4" "B4"}))}) (rules (start {(place "Tiger2" (sites {"C1" "C5"})) (place Stack "Goat1" (sites {"B2" "D2" "D4"}) count:5) (place Stack "Goat1" (sites {"B4"}) count:4)}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with nineteen goats, divided into three stacks of five and one stack of four, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move. The goal of the tigers is to capture all the goats.
(game "Sher Bakar" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P1 (move Step (to if:(or (and (is In (to) (sites "StartingSitesGoats")) (is Friend (who at:(to)))) (is Empty (to)))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))))) (regions "StartingSitesGoats" (sites {"B2" "D2" "D4" "B4"}))}) (rules (start {(place "Tiger2" (sites {"C1" "C5"})) (place Stack "Goat1" (sites {"B2" "D2" "D4"}) count:5) (place Stack "Goat1" (sites {"B4"}) count:4)}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
5x5 board, played on intersections, with diagonals for each quadrant of the board. One player plays with two tiger pieces, placed on the midpoints of two opposite sides. The other player plays with nineteen goats, divided into three stacks of five and one stack of four, placed in the center of each quadrant. The goats move first. Goats may move one at a time to any adjacent vacant spot. More than one goat can be placed on the goats' starting spots, but not elsewhere. The tiger moves in the same manner, but also may capture a piece by hopping over it. Multiple captures can be made on the same turn with subsequent hops, but only the top goat in a stack is captured when a tiger leaps over it. The goal of the goats is to surround the tigers so they cannot move. The goal of the tigers is to capture all the goats.
(game "Sher Bakar" (players 2) (equipment {(board (rectangle 5 5 diagonals:Alternating) use:Vertex) (piece "Goat" P1 (move Step (to if:(or (and (is In (to) (sites "StartingSitesGoats")) (is Friend (who at:(to)))) (is Empty (to)))))) (piece "Tiger" P2 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain)))))) (regions "StartingSitesGoats" (sites {"B2" "D2" "D4" "B4"}))}) (rules (start {(place "Tiger2" (sites {"C1" "C5"})) (place Stack "Goat1" (sites {"B2" "D2" "D4"}) count:5) (place Stack "Goat1" (sites {"B4"}) count:4)}) (play (if (is Prev Mover) (or (move Pass) (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between)))) (apply (remove (between)))) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))))) (to if:(is Empty (to))))) (moveAgain))))) (forEach Piece top:True))) (end {(if (no Moves P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win))}))) 
An isosceles triangle, with the height of the triangle and two lines, which bisect the sides of the triangle, but intersect the height at the same point, roughly central, such that they are at an angle but do not bisect it. One player plays as the tiger, which begins at the apex of the triangle, the other as four goats, which begin on the central point. The goats play first, removing one of the pieces from the stack to an adjacent empty spot. The tiger moves along the lines to an empty adjacent spot. The goats also move in this way. Goats may only be stacked on the central point. The tiger may capture a goat by jumping over it, and a jump from one side of the triangle to the opposite side, over the central point, is allowed. The goats win by blocking the tiger from being able to move, the tiger wins by capturing one goat.
(game "Sher Bakr" (players 2) (equipment {(board (rotate 180 (add (remove (scale 1 2 (wedge 3)) vertices:{2}) vertices:{{2 1.333}} edges:{{4 6} {6 0} {1 6} {6 2}})) use:Vertex) (hand Each) (piece "Goat" P1 (move Step (to if:(or (is Empty (to)) (and (= (to) (centrePoint)) (is Friend (who at:(to)))))))) (piece "Tiger" P2 (or {(move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (and {(= (from) 2) (is Enemy (who at:(centrePoint))) (is Empty 1)}) (move (from 2) (to 1) (then (remove (centrePoint))))) (if (and {(= (from) 1) (is Enemy (who at:(centrePoint))) (is Empty 2)}) (move (from 1) (to 2) (then (remove (centrePoint)))))}))}) (rules (start {(place Stack "Goat1" (centrePoint) count:4) (place Stack "Tiger2" 0)}) (play (forEach Piece top:True)) (end {(if (no Moves P2) (result P1 Win)) (if (= 3 (count Pieces P1)) (result P2 Win))}))) 
An isosceles triangle, with the height of the triangle and two lines, which bisect the sides of the triangle, but intersect the height at the same point, roughly central, such that they are at an angle but do not bisect it. One player plays as the tiger, which begins at the apex of the triangle, the other as four goats, which begin on the central point. The goats play first, removing one of the pieces from the stack to an adjacent empty spot. The tiger moves along the lines to an empty adjacent spot. The goats also move in this way. Goats may only be stacked on the central point. The tiger may capture a goat by jumping over it, and a jump from one side of the triangle to the opposite side, over the central point, is allowed. The goats win by blocking the tiger from being able to move, the tiger wins by capturing one goat.
(game "Sher Bakr" (players 2) (equipment {(board (rotate 180 (add (remove (scale 1 2 (wedge 3)) vertices:{2}) vertices:{{2 1.333}} edges:{{4 6} {6 0} {1 6} {6 2}})) use:Vertex) (hand Each) (piece "Goat" P1 (move Step (to if:(or (is Empty (to)) (and (= (to) (centrePoint)) (is Friend (who at:(to)))))))) (piece "Tiger" P2 (or {(move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (and {(= (from) 2) (is Enemy (who at:(centrePoint))) (is Empty 1)}) (move (from 2) (to 1) (then (remove (centrePoint))))) (if (and {(= (from) 1) (is Enemy (who at:(centrePoint))) (is Empty 2)}) (move (from 1) (to 2) (then (remove (centrePoint)))))}))}) (rules (start {(place Stack "Goat1" (centrePoint) count:4) (place Stack "Tiger2" 0)}) (play (forEach Piece top:True)) (end {(if (no Moves P2) (result P1 Win)) (if (= 3 (count Pieces P1)) (result P2 Win))}))) 
An isosceles triangle, with the height of the triangle and two lines, which bisect the sides of the triangle, but intersect the height at the same point, roughly central, such that they are at an angle but do not bisect it. One player plays as the tiger, which begins at the apex of the triangle, the other as four goats, which begin on the central point. The goats play first, removing one of the pieces from the stack to an adjacent empty spot. The tiger moves along the lines to an empty adjacent spot. The goats also move in this way. Goats may only be stacked on the central point. The tiger may capture a goat by jumping over it, and a jump from one side of the triangle to the opposite side, over the central point, is allowed. The goats win by blocking the tiger from being able to move, the tiger wins by capturing one goat.
(game "Sher Bakr" (players 2) (equipment {(board (rotate 180 (add (remove (scale 1 2 (wedge 3)) vertices:{2}) vertices:{{2 1.333}} edges:{{4 6} {6 0} {1 6} {6 2}})) use:Vertex) (hand Each) (piece "Goat" P1 (move Step (to if:(or (is Empty (to)) (and (= (to) (centrePoint)) (is Friend (who at:(to)))))))) (piece "Tiger" P2 (or {(move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (if (and {(= (from) 2) (is Enemy (who at:(centrePoint))) (is Empty 1)}) (move (from 2) (to 1) (then (remove (centrePoint))))) (if (and {(= (from) 1) (is Enemy (who at:(centrePoint))) (is Empty 2)}) (move (from 1) (to 2) (then (remove (centrePoint)))))}))}) (rules (start {(place Stack "Goat1" (centrePoint) count:4) (place Stack "Tiger2" 0)}) (play (forEach Piece top:True)) (end {(if (no Moves P2) (result P1 Win)) (if (= 3 (count Pieces P1)) (result P2 Win))}))) 
Board with 5x5 lines, diagonals drawn in the four quadrants of the board, and a triangle at the top, connecting the apex with the three central points at the top edge, and a line perpendicularly bisecting the height of the triangle. One player plays as the general, placed in the central position. The other player plays with sixteen pieces, arranged on the perimeter points of the square. Pieces move one spot along the lines on the board. The general may capture pieces when it moves into a space that is surrounded on two opposite sides, along the lines on the board, thus capturing the pieces on either side of it. Conversely, the general can be captured by surrounding it on two opposite sides with pieces. Only the general may enter the triangle. The goal of the general is to capture all of the opponent's pieces, the goal of the person playing with sixteen pieces is to capture the general. If the general becomes trapped in the triangle, the opponent wins.
(game "Shi Liu Kan Tsiang Kun" (players 2) (equipment {(board (merge (scale 2 (square 5 diagonals:Alternating)) (shift 2 8 (rotate 180 (wedge 3)))) use:Vertex) (piece "General" P1 (move Step (to if:(is Empty (to))) (then (intervene (from (last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))))) (piece "Marker" P2 (move Step (to if:(and (not (is In (to) (expand (sites Top)))) (is Empty (to)))) (then (custodial (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))))))}) (rules (start {(place "General1" (ahead (centrePoint) S)) (place "Marker2" (difference (sites Outer) (expand (sites Top))))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win)) (if (and {(is In (where "General" P1) (expand (sites Top))) (>= (count Pieces P2) 2) (= (who at:(coord "D5")) P2)}) (result P2 Win))}))) 
Board with 5x5 lines, diagonals drawn in the four quadrants of the board, and a triangle at the top, connecting the apex with the three central points at the top edge, and a line perpendicularly bisecting the height of the triangle. One player plays as the general, placed in the central position. The other player plays with sixteen pieces, arranged on the perimeter points of the square. Pieces move one spot along the lines on the board. The general may capture pieces when it moves into a space that is surrounded on two opposite sides, along the lines on the board, thus capturing the pieces on either side of it. Conversely, the general can be captured by surrounding it on two opposite sides with pieces. Only the general may enter the triangle. The goal of the general is to capture all of the opponent's pieces, the goal of the person playing with sixteen pieces is to capture the general. If the general becomes trapped in the triangle, the opponent wins.
(game "Shi Liu Kan Tsiang Kun" (players 2) (equipment {(board (merge (scale 2 (square 5 diagonals:Alternating)) (shift 2 8 (rotate 180 (wedge 3)))) use:Vertex) (piece "General" P1 (move Step (to if:(is Empty (to))) (then (intervene (from (last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))))) (piece "Marker" P2 (move Step (to if:(and (not (is In (to) (expand (sites Top)))) (is Empty (to)))) (then (custodial (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))))))}) (rules (start {(place "General1" (ahead (centrePoint) S)) (place "Marker2" (difference (sites Outer) (expand (sites Top))))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win)) (if (and {(is In (where "General" P1) (expand (sites Top))) (>= (count Pieces P2) 2) (= (who at:(coord "D5")) P2)}) (result P2 Win))}))) 
Board with 5x5 lines, diagonals drawn in the four quadrants of the board, and a triangle at the top, connecting the apex with the three central points at the top edge, and a line perpendicularly bisecting the height of the triangle. One player plays as the general, placed in the central position. The other player plays with sixteen pieces, arranged on the perimeter points of the square. Pieces move one spot along the lines on the board. The general may capture pieces when it moves into a space that is surrounded on two opposite sides, along the lines on the board, thus capturing the pieces on either side of it. Conversely, the general can be captured by surrounding it on two opposite sides with pieces. Only the general may enter the triangle. The goal of the general is to capture all of the opponent's pieces, the goal of the person playing with sixteen pieces is to capture the general. If the general becomes trapped in the triangle, the opponent wins.
(game "Shi Liu Kan Tsiang Kun" (players 2) (equipment {(board (merge (scale 2 (square 5 diagonals:Alternating)) (shift 2 8 (rotate 180 (wedge 3)))) use:Vertex) (piece "General" P1 (move Step (to if:(is Empty (to))) (then (intervene (from (last To)) (to if:(is Enemy (who at:(to))) (apply (remove (to)))))))) (piece "Marker" P2 (move Step (to if:(and (not (is In (to) (expand (sites Top)))) (is Empty (to)))) (then (custodial (from (last To)) (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Friend (who at:(to))))))))}) (rules (start {(place "General1" (ahead (centrePoint) S)) (place "Marker2" (difference (sites Outer) (expand (sites Top))))}) (play (forEach Piece)) (end {(if (no Pieces P2) (result P1 Win)) (if (no Pieces P1) (result P2 Win)) (if (and {(is In (where "General" P1) (expand (sites Top))) (>= (count Pieces P2) 2) (= (who at:(coord "D5")) P2)}) (result P2 Win))}))) 
Played on a 5x5 board. There are 3 'Musketeer' pieces and 22 'Enemy' pieces. Musketeers can only move by capturing enemies on any adjacent space. Enemies can only move to empty adjacent spaces. Enemies win if all three musketeers are ever on the same line or column. Musketeers win as soon as they run out of legal moves.
(game "Three Musketeers" (players 2) (equipment {(board (square 5)) (piece "Musketeer" P1 (move Step Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Enemy" P2 (move Step Orthogonal (to if:(is Empty (to)))))}) (rules (start {(place "Musketeer1" {"A1" "C3" "E5"}) (place "Enemy2" (difference (sites Board) (sites {"A1" "C3" "E5"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Win)) (if (and (is Mover P1) (is Line 3 Orthogonal contiguous:False)) (result P2 Win))}))) 
Played on a 5x5 board. There are 3 'Musketeer' pieces and 22 'Enemy' pieces. Musketeers can only move by capturing enemies on any adjacent space. Enemies can only move to empty adjacent spaces. Enemies win if all three musketeers are ever on the same line or column. Musketeers win as soon as they run out of legal moves.
(game "Three Musketeers" (players 2) (equipment {(board (square 5)) (piece "Musketeer" P1 (move Step Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Enemy" P2 (move Step Orthogonal (to if:(is Empty (to)))))}) (rules (start {(place "Musketeer1" {"A1" "C3" "E5"}) (place "Enemy2" (difference (sites Board) (sites {"A1" "C3" "E5"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Win)) (if (and (is Mover P1) (is Line 3 Orthogonal contiguous:False)) (result P2 Win))}))) 
Played on a 5x5 board. There are 3 'Musketeer' pieces and 22 'Enemy' pieces. Musketeers can only move by capturing enemies on any adjacent space. Enemies can only move to empty adjacent spaces. Enemies win if all three musketeers are ever on the same line or column. Musketeers win as soon as they run out of legal moves.
(game "Three Musketeers" (players 2) (equipment {(board (square 5)) (piece "Musketeer" P1 (move Step Orthogonal (to if:(is Enemy (who at:(to))) (apply (remove (to)))))) (piece "Enemy" P2 (move Step Orthogonal (to if:(is Empty (to)))))}) (rules (start {(place "Musketeer1" {"A1" "C3" "E5"}) (place "Enemy2" (difference (sites Board) (sites {"A1" "C3" "E5"})))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Win)) (if (and (is Mover P1) (is Line 3 Orthogonal contiguous:False)) (result P2 Win))}))) 
A square, with lines bisecting the sides drawn to the center. A circle is drawn around the central point. arcs are drawn inside the square around the midpoints of the sides and the corners. Diagonals are drawn from the corner arcs to the central circle. One player plays as the hare, one player plays as the hunter and two hounds. The hare begins on the central spot, and the hunter and hounds are placed on three of the points on the central circle. Pieces move to an empty adjacent spot along the lines of the board. The hare moves first. When the hunter and hounds prevent the hare from being able to move, the game ends and the players switch roles.[Rule, "Rules/One Round", rule:<
        phases:{
        (phase "PlacementP1" 
            (play
                (move 
                    (from (sites Hand P1) if:(is Occupied (from)))
                    (to (sites {1..8}) if:(is Empty (to)))
                    (then (if ("HandOccupied" P1) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P1) "HuntingP2")
        )
        (phase "HuntingP2" 
            (play (forEach Piece))
            (end {
                (if (no Moves P2) (result P1 Win))
                (if 
                    (or
                        (>= (count Moves) (- (value MoveLimit) 10)) 
                        (>= (count Turns) (- (value TurnLimit) 5)) 
                    )
                    (result P2 Win)
                )
            }) 
        )
        }
        >, priority 0] 
(game "To Kinegi tou Lagou" (players 2) (equipment {(board (add (remove (remove (merge {(concentric {1 8}) (shift 0 -5 (concentric {1 4})) (shift 0 5 (concentric {1 4})) (shift -5 0 (concentric {1 4})) (shift 5 0 (concentric {1 4})) (shift 5 5 (concentric {1 8})) (shift 5 -5 (concentric {1 8})) (shift -5 -5 (concentric {1 8})) (shift -5 5 (concentric {1 8}))}) vertices:{20 18 27 11 48 49 50 51 52 41 42 43 44 45 34 35 36 37 30 59 58 57 64 63}) edges:{{0 1} {0 7} {0 5} {0 3} {33 35} {30 29} {27 25} {39 37}}) edges:{{15 8} {22 6} {4 12} {19 2} {18 36} {38 20} {40 14} {16 26} {28 24} {23 32} {31 11} {10 34} {5 30} {3 35} {39 1} {27 7}}) use:Vertex) (piece "Human" Each (move Step (to if:(is Empty (to))))) (piece "Dog" Each (move Step (to if:(is Empty (to))))) (piece "Hare" Each (move Step (to if:(is Empty (to))))) (hand Each size:2)}) (rules (start {(place "Hare2" (centrePoint)) (place "Human1" (handSite P1)) (place "Dog1" (handSite P1 1) count:2)}) phases:{(phase "PlacementP1" (play (move (from (sites Hand P1) if:(is Occupied (from))) (to (sites {1 2 3 4 5 6 7 8}) if:(is Empty (to))) (then (if (not (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P2)) (to if:(is Empty (to)))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied by:All container:"Board")) (add (piece "Hare1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2))) (add (piece "Dog2") (to (handSite P2 1)) count:2)}))))) (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (sites Hand P2) if:(is Occupied (from))) (to (intersection (sites Empty) (sites {1 2 3 4 5 6 7 8})) if:(is Empty (to))) (then (if (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P1)) (to if:(is Empty (to)))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore))))})) 
A square, with lines bisecting the sides drawn to the center. A circle is drawn around the central point. arcs are drawn inside the square around the midpoints of the sides and the corners. Diagonals are drawn from the corner arcs to the central circle. One player plays as the hare, one player plays as the hunter and two hounds. The hare begins on the central spot, and the hunter and hounds are placed on three of the points on the central circle. Pieces move to an empty adjacent spot along the lines of the board. The hare moves first. When the hunter and hounds prevent the hare from being able to move, the game ends and the players switch roles.[Rule, "Rules/Two Phases", rule:<
        phases:{
        (phase "PlacementP1" 
            (play
                (move 
                    (from (sites Hand P1) if:(is Occupied (from)))
                    (to (sites {1..8}) if:(is Empty (to)))
                    (then (if ("HandOccupied" P1) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P1) "HuntingP2")
        )
        (phase "HuntingP2" 
            (play 
                (forEach Piece
                    (then 
                        (if (not 
                                (can Move 
                                    (step 
                                        (from (where "Hare" P2))
                                        (to if:(is Empty (to)))
                                    )
                                )
                            )
                            (and {
                                (addScore P2 (- (count Moves) 3))
                                (remove (sites Occupied by:All container:"Board"))
                                (add (piece "Hare1") (to (sites Centre)))
                                (add (piece "Human2") (to (handSite P2)))
                                (add (piece "Dog2") (to (handSite P2 1)) count:2)
                            })
                        )
                    )
                )
            )
            (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")
        )
        (phase "PlacementP2" 
            (play
                (move 
                    (from (sites Hand P2) if:(is Occupied (from)))
                    (to (intersection (sites Empty) (sites {1..8})) if:(is Empty (to)))
                    (then (if ("HandOccupied" P2) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P2) "HuntingP1")
        )
        (phase "HuntingP1" 
            (play 
                (forEach Piece
                    (then 
                        (if (not 
                                (can Move 
                                    (step 
                                        (from (where "Hare" P1))
                                        (to if:(is Empty (to)))
                                    )
                                )
                            )
                            (addScore P1 (- (count Moves) (+ (score P2) 6)))
                        )
                    )
                )
            )
            (end (if (!= 0 (score P1)) (byScore)))
        )
        }
        >, priority 1] 
(game "To Kinegi tou Lagou" (players 2) (equipment {(board (add (remove (remove (merge {(concentric {1 8}) (shift 0 -5 (concentric {1 4})) (shift 0 5 (concentric {1 4})) (shift -5 0 (concentric {1 4})) (shift 5 0 (concentric {1 4})) (shift 5 5 (concentric {1 8})) (shift 5 -5 (concentric {1 8})) (shift -5 -5 (concentric {1 8})) (shift -5 5 (concentric {1 8}))}) vertices:{20 18 27 11 48 49 50 51 52 41 42 43 44 45 34 35 36 37 30 59 58 57 64 63}) edges:{{0 1} {0 7} {0 5} {0 3} {33 35} {30 29} {27 25} {39 37}}) edges:{{15 8} {22 6} {4 12} {19 2} {18 36} {38 20} {40 14} {16 26} {28 24} {23 32} {31 11} {10 34} {5 30} {3 35} {39 1} {27 7}}) use:Vertex) (piece "Human" Each (move Step (to if:(is Empty (to))))) (piece "Dog" Each (move Step (to if:(is Empty (to))))) (piece "Hare" Each (move Step (to if:(is Empty (to))))) (hand Each size:2)}) (rules (start {(place "Hare2" (centrePoint)) (place "Human1" (handSite P1)) (place "Dog1" (handSite P1 1) count:2)}) phases:{(phase "PlacementP1" (play (move (from (sites Hand P1) if:(is Occupied (from))) (to (sites {1 2 3 4 5 6 7 8}) if:(is Empty (to))) (then (if (not (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P2)) (to if:(is Empty (to)))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied by:All container:"Board")) (add (piece "Hare1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2))) (add (piece "Dog2") (to (handSite P2 1)) count:2)}))))) (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (sites Hand P2) if:(is Occupied (from))) (to (intersection (sites Empty) (sites {1 2 3 4 5 6 7 8})) if:(is Empty (to))) (then (if (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P1)) (to if:(is Empty (to)))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore))))})) 
A square, with lines bisecting the sides drawn to the center. A circle is drawn around the central point. arcs are drawn inside the square around the midpoints of the sides and the corners. Diagonals are drawn from the corner arcs to the central circle. One player plays as the hare, one player plays as the hunter and two hounds. The hare begins on the central spot, and the hunter and hounds are placed on three of the points on the central circle. Pieces move to an empty adjacent spot along the lines of the board. The hare moves first. When the hunter and hounds prevent the hare from being able to move, the game ends and the players switch roles.[Rule, "Rules/One Round", rule:<
        phases:{
        (phase "PlacementP1" 
            (play
                (move 
                    (from (sites Hand P1) if:(is Occupied (from)))
                    (to (sites {1..8}) if:(is Empty (to)))
                    (then (if ("HandOccupied" P1) (moveAgain)))
                )
            )
            (nextPhase ("HandEmpty" P1) "HuntingP2")
        )
        (phase "HuntingP2" 
            (play (forEach Piece))
            (end {
                (if (no Moves P2) (result P1 Win))
                (if 
                    (or
                        (>= (count Moves) (- (value MoveLimit) 10)) 
                        (>= (count Turns) (- (value TurnLimit) 5)) 
                    )
                    (result P2 Win)
                )
            }) 
        )
        }
        >, priority 0] 
(game "To Kinegi tou Lagou" (players 2) (equipment {(board (add (remove (remove (merge {(concentric {1 8}) (shift 0 -5 (concentric {1 4})) (shift 0 5 (concentric {1 4})) (shift -5 0 (concentric {1 4})) (shift 5 0 (concentric {1 4})) (shift 5 5 (concentric {1 8})) (shift 5 -5 (concentric {1 8})) (shift -5 -5 (concentric {1 8})) (shift -5 5 (concentric {1 8}))}) vertices:{20 18 27 11 48 49 50 51 52 41 42 43 44 45 34 35 36 37 30 59 58 57 64 63}) edges:{{0 1} {0 7} {0 5} {0 3} {33 35} {30 29} {27 25} {39 37}}) edges:{{15 8} {22 6} {4 12} {19 2} {18 36} {38 20} {40 14} {16 26} {28 24} {23 32} {31 11} {10 34} {5 30} {3 35} {39 1} {27 7}}) use:Vertex) (piece "Human" Each (move Step (to if:(is Empty (to))))) (piece "Dog" Each (move Step (to if:(is Empty (to))))) (piece "Hare" Each (move Step (to if:(is Empty (to))))) (hand Each size:2)}) (rules (start {(place "Hare2" (centrePoint)) (place "Human1" (handSite P1)) (place "Dog1" (handSite P1 1) count:2)}) phases:{(phase "PlacementP1" (play (move (from (sites Hand P1) if:(is Occupied (from))) (to (sites {1 2 3 4 5 6 7 8}) if:(is Empty (to))) (then (if (not (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P1) if:(= 0 (count Cell at:(site)))) "HuntingP2")) (phase "HuntingP2" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P2)) (to if:(is Empty (to)))))) (and {(addScore P2 (- (count Moves) 3)) (remove (sites Occupied by:All container:"Board")) (add (piece "Hare1") (to (sites Centre))) (add (piece "Human2") (to (handSite P2))) (add (piece "Dog2") (to (handSite P2 1)) count:2)}))))) (nextPhase (= 1 (count Sites in:(sites Occupied by:All container:"Board"))) "PlacementP2")) (phase "PlacementP2" (play (move (from (sites Hand P2) if:(is Occupied (from))) (to (intersection (sites Empty) (sites {1 2 3 4 5 6 7 8})) if:(is Empty (to))) (then (if (not (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))))) (moveAgain))))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site)))) "HuntingP1")) (phase "HuntingP1" (play (forEach Piece (then (if (not (can Move (step (from (where "Hare" P1)) (to if:(is Empty (to)))))) (addScore P1 (- (count Moves) (+ (score P2) 6))))))) (end (if (!= 0 (score P1)) (byScore))))})) 
Four pieces are the sheep; they are placed on the dark squares along one side of the board. one piece is the wolf; it is placed on any dark square on the side opposite the sheep. The goal of the wolf is to reach one of the sheep's original spaces, the sheep's goal is to block the wolf from doing so. Sheep move diagonally forward one square, the wolf moves diagonally forward or backward one square.
(game "Wolf and Sheep" (players 2) (equipment {(board (square 8)) (piece "Sheep" P1 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (piece "Wolf" P2 (move Step Diagonal (to if:(is Empty (to)))))}) (rules (start {(place "Wolf2" {"D8"}) (place "Sheep1" {"A1" "C1" "E1" "G1"})}) (play (forEach Piece)) (end {(if (and (no Moves P2) (is Mover P2)) (result P1 Win)) (if (is In (where "Wolf" P2) (sites Bottom)) (result P2 Win))}))) 
Four pieces are the sheep; they are placed on the dark squares along one side of the board. one piece is the wolf; it is placed on any dark square on the side opposite the sheep. The goal of the wolf is to reach one of the sheep's original spaces, the sheep's goal is to block the wolf from doing so. Sheep move diagonally forward one square, the wolf moves diagonally forward or backward one square.
(game "Wolf and Sheep" (players 2) (equipment {(board (square 8)) (piece "Sheep" P1 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (piece "Wolf" P2 (move Step Diagonal (to if:(is Empty (to)))))}) (rules (start {(place "Wolf2" {"D8"}) (place "Sheep1" {"A1" "C1" "E1" "G1"})}) (play (forEach Piece)) (end {(if (and (no Moves P2) (is Mover P2)) (result P1 Win)) (if (is In (where "Wolf" P2) (sites Bottom)) (result P2 Win))}))) 
Four pieces are the sheep; they are placed on the dark squares along one side of the board. one piece is the wolf; it is placed on any dark square on the side opposite the sheep. The goal of the wolf is to reach one of the sheep's original spaces, the sheep's goal is to block the wolf from doing so. Sheep move diagonally forward one square, the wolf moves diagonally forward or backward one square.
(game "Wolf and Sheep" (players 2) (equipment {(board (square 8)) (piece "Sheep" P1 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (piece "Wolf" P2 (move Step Diagonal (to if:(is Empty (to)))))}) (rules (start {(place "Wolf2" {"D8"}) (place "Sheep1" {"A1" "C1" "E1" "G1"})}) (play (forEach Piece)) (end {(if (and (no Moves P2) (is Mover P2)) (result P1 Win)) (if (is In (where "Wolf" P2) (sites Bottom)) (result P2 Win))}))) 
8x8 checkered board. One player plays as four sheep (white pieces), which begin on the four dark squares on one side of the board. The other player plays as one wolf (black piece), which can be placed on any dark space on the board. Players alternate turns moving a piece to an empty adjacent dark square on the board. The sheep move forward only but the wolf may also move backward. The goal of the sheep is to block the wolf from being able to move, the goal of the wolf is to move beyond the line of sheep.
(game "Wolf und Schaaf" (players 2) (equipment {(board (square 8)) (piece "Sheep" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (piece "Wolf" P1 (move Step Diagonal (to if:(is Empty (to))))) (hand P1)}) (rules (start {(place "Wolf1" (handSite P1)) (place "Sheep2" {"A1" "C1" "E1" "G1"})}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (intersection (sites Phase 0) (sites Empty))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites in:(forEach (sites Occupied by:P2) if:(<= (row of:(site)) (row of:(where "Wolf" P1)))))) (result P1 Win))}))) 
8x8 checkered board. One player plays as four sheep (white pieces), which begin on the four dark squares on one side of the board. The other player plays as one wolf (black piece), which can be placed on any dark space on the board. Players alternate turns moving a piece to an empty adjacent dark square on the board. The sheep move forward only but the wolf may also move backward. The goal of the sheep is to block the wolf from being able to move, the goal of the wolf is to move beyond the line of sheep.
(game "Wolf und Schaaf" (players 2) (equipment {(board (square 8)) (piece "Sheep" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (piece "Wolf" P1 (move Step Diagonal (to if:(is Empty (to))))) (hand P1)}) (rules (start {(place "Wolf1" (handSite P1)) (place "Sheep2" {"A1" "C1" "E1" "G1"})}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (intersection (sites Phase 0) (sites Empty))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites in:(forEach (sites Occupied by:P2) if:(<= (row of:(site)) (row of:(where "Wolf" P1)))))) (result P1 Win))}))) 
8x8 checkered board. One player plays as four sheep (white pieces), which begin on the four dark squares on one side of the board. The other player plays as one wolf (black piece), which can be placed on any dark space on the board. Players alternate turns moving a piece to an empty adjacent dark square on the board. The sheep move forward only but the wolf may also move backward. The goal of the sheep is to block the wolf from being able to move, the goal of the wolf is to move beyond the line of sheep.
(game "Wolf und Schaaf" (players 2) (equipment {(board (square 8)) (piece "Sheep" P2 N (move Step (directions {FR FL}) (to if:(is Empty (to))))) (piece "Wolf" P1 (move Step Diagonal (to if:(is Empty (to))))) (hand P1)}) (rules (start {(place "Wolf1" (handSite P1)) (place "Sheep2" {"A1" "C1" "E1" "G1"})}) phases:{(phase "Placement" P1 (play (move (from (handSite P1)) (to (intersection (sites Phase 0) (sites Empty))))) (nextPhase "Movement")) (phase "Movement" (play (forEach Piece)))} (end {(if (and (no Moves P1) (is Mover P1)) (result P2 Win)) (if (= 0 (count Sites in:(forEach (sites Occupied by:P2) if:(<= (row of:(site)) (row of:(where "Wolf" P1)))))) (result P1 Win))}))) 
5x5 intersecting lines with diagonals in each quadrant. A triangle, the apex intersecting with the apex of one of the sides. A line is drawn from the apex to the midpoint of the base of the triangle. A line bisects this line, connecting the midpoints of the sides of the triangle, One player plays as one jaguar, which begins on the center of the base of the large triangle's base. The other player plays as fifteen dogs, which begin on the points of the three ranks of the bottom half of the square portion of the board. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.
(game "Yaguarete Kora" (players 2) (equipment {(board (rotate 180 (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))) use:Vertex) (piece "Jaguar" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Jaguar1" coord:"C6") (place "Dog2" (expand (sites Bottom) steps:2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Loss)) (if (<= (count Pieces P2) 6) (result P1 Win))}))) 
5x5 intersecting lines with diagonals in each quadrant. A triangle, the apex intersecting with the apex of one of the sides. A line is drawn from the apex to the midpoint of the base of the triangle. A line bisects this line, connecting the midpoints of the sides of the triangle, One player plays as one jaguar, which begins on the center of the base of the large triangle's base. The other player plays as fifteen dogs, which begin on the points of the three ranks of the bottom half of the square portion of the board. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.
(game "Yaguarete Kora" (players 2) (equipment {(board (rotate 180 (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))) use:Vertex) (piece "Jaguar" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Jaguar1" coord:"C6") (place "Dog2" (expand (sites Bottom) steps:2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Loss)) (if (<= (count Pieces P2) 6) (result P1 Win))}))) 
5x5 intersecting lines with diagonals in each quadrant. A triangle, the apex intersecting with the apex of one of the sides. A line is drawn from the apex to the midpoint of the base of the triangle. A line bisects this line, connecting the midpoints of the sides of the triangle, One player plays as one jaguar, which begins on the center of the base of the large triangle's base. The other player plays as fifteen dogs, which begin on the points of the three ranks of the bottom half of the square portion of the board. The jaguar moves first. Pieces move to an empty adjacent space along the lines of the board. The jaguar may hop over an adjacent dog to an empty space immediately on the opposite side of it, capturing the dog. Dogs cannot capture. The dogs win by blocking the jaguar so it cannot move; the jaguar wins when only six dogs remain.
(game "Yaguarete Kora" (players 2) (equipment {(board (rotate 180 (merge (shift 0 2 (square 5 diagonals:Alternating)) (wedge 3))) use:Vertex) (piece "Jaguar" P1 (or (move Step (to if:(is Empty (to)))) (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))))) (piece "Dog" P2 (move Step (to if:(is Empty (to)))))}) (rules (start {(place "Jaguar1" coord:"C6") (place "Dog2" (expand (sites Bottom) steps:2))}) (play (forEach Piece)) (end {(if (no Moves P1) (result P1 Loss)) (if (<= (count Pieces P2) 6) (result P1 Win))}))) 
5x9 intersecting lines; with a triangle formed by lines drawn from the second and fourth line of one of the short sides of the rectangle, with the base and a line bisecting the base of the triangle. One player plays as the General, placed on the central space of the rectangle, and the other player plays as 26 Rebels, places on the intersections of the second, third, and fourth of the long lines. Pieces move one space orthogonally. The General may capture one of the Rebels by hopping over it to an empty space. The General wins by capturing all the Rebels. The Rebels win by blocking the General from moving.[Variant, "Variant/Described", pieceMoves:<
        (piece "Marker" P1 "StepToEmpty")
        (piece "Marker" P2 
            (or 
                ("HopCapture") 
                ("StepToEmpty")
            ) 
        ) 
        > endRules:<
        (end {
            (if (no Pieces P1) (result P2 Win))
            (if (no Moves P2) (result P1 Win))
        })
        >, priority 0] 
(game "Yeung Luk Sz' Kon Tseung Kwan" (players 2) (equipment {(board (merge (rectangle 9 5) (shift 1 8 (scale 0.5 (wedge 3)))) use:Vertex) (piece "Marker" P1 (move Step (to if:(is Empty (to))))) (piece "Marker" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Marker1" (union {(sites Column 1) (difference (sites Column 3) (union (sites Centre) (expand (sites Top)))) (sites Column 5)})) (place "Marker2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (no Moves P2) (result P1 Win))}))) 
5x9 intersecting lines; with a triangle formed by lines drawn from the second and fourth line of one of the short sides of the rectangle, with the base and a line bisecting the base of the triangle. One player plays as the General, placed on the central space of the rectangle, and the other player plays as 26 Rebels, places on the intersections of the second, third, and fourth of the long lines. Pieces move one space orthogonally. The General may capture one of the Rebels by hopping over it to an empty space. The General wins by capturing all the Rebels. The Rebels win by blocking the General from moving.[Variant, "Variant/Murray", pieceMoves:<
        (piece "Marker" P1 
            ("StepToEmpty"
                ~
                (then 
                    ("CustodialCapture")
                )
            )
        )
        (piece "Marker" P2 
            ("StepToEmpty"
                ~
                (then 
                    ("InterveneCapture")
                )
            )
        ) 
        > endRules:<
        (end {
            (if (no Pieces P1) (result P2 Win))
            (if (no Pieces P2) (result P1 Win))
        })
        >, priority 0] 
(game "Yeung Luk Sz' Kon Tseung Kwan" (players 2) (equipment {(board (merge (rectangle 9 5) (shift 1 8 (scale 0.5 (wedge 3)))) use:Vertex) (piece "Marker" P1 (move Step (to if:(is Empty (to))))) (piece "Marker" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Marker1" (union {(sites Column 1) (difference (sites Column 3) (union (sites Centre) (expand (sites Top)))) (sites Column 5)})) (place "Marker2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (no Moves P2) (result P1 Win))}))) 
5x9 intersecting lines; with a triangle formed by lines drawn from the second and fourth line of one of the short sides of the rectangle, with the base and a line bisecting the base of the triangle. One player plays as the General, placed on the central space of the rectangle, and the other player plays as 26 Rebels, places on the intersections of the second, third, and fourth of the long lines. Pieces move one space orthogonally. The General may capture one of the Rebels by hopping over it to an empty space. The General wins by capturing all the Rebels. The Rebels win by blocking the General from moving.[Variant, "Variant/Described", pieceMoves:<
        (piece "Marker" P1 "StepToEmpty")
        (piece "Marker" P2 
            (or 
                ("HopCapture") 
                ("StepToEmpty")
            ) 
        ) 
        > endRules:<
        (end {
            (if (no Pieces P1) (result P2 Win))
            (if (no Moves P2) (result P1 Win))
        })
        >, priority 0] 
(game "Yeung Luk Sz' Kon Tseung Kwan" (players 2) (equipment {(board (merge (rectangle 9 5) (shift 1 8 (scale 0.5 (wedge 3)))) use:Vertex) (piece "Marker" P1 (move Step (to if:(is Empty (to))))) (piece "Marker" P2 (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between)))) (to if:(is Empty (to)))) (move Step (to if:(is Empty (to))))))}) (rules (start {(place "Marker1" (union {(sites Column 1) (difference (sites Column 3) (union (sites Centre) (expand (sites Top)))) (sites Column 5)})) (place "Marker2" (centrePoint))}) (play (forEach Piece)) (end {(if (no Pieces P1) (result P2 Win)) (if (no Moves P2) (result P1 Win))}))) 
Boards consist of a grid of 3x4 squares and a continuation of the central row in the grid that extends for 8 further squares. The game is played with two astragals as dice: one from a sheep and one from an ox. The sheep astragal provides the base value for the roll, and the ox astragal serves as a bonus. Rolls of the sheep astragal produce values of 1, 2 ,3 or 4. The ox astragal produces a "yes" or "no" value. If "no" is rolled, the values remain the same. If "yes" is rolled, the value of the first roll is boosted to 5, 6, 7, or 10, respectively. These rules are proposed by Finkel based on the values of moves provided in the cuneiform tablets (Finkel 2007: 21–22). Each player starts play on one of the right corners of the 3x4 grid, proceeding left down that row to the opposite corner, and then right down the central track, which both players use, with the goal of moving off the end of the track. If a player lands on a square occupied by the opponent, the opponent's piece is removed from the board and may reenter on a subsequent turn. Rosettes on certain squares in the central track mark spaces where a player is safe from being sent to the beginning. Rosettes in the corners allow a player to roll again when a player lands on them. A player wins when they remove all seven of their pieces from the board by rolling the exact number of spaces left in the track, plus one.[Variant, "Variant/Seleucid", seleucid:<>, priority 1] 
(game "20 Squares" (players 2) (equipment {(board (merge (rectangle 3 4) (shift 0 1 (rectangle 1 12))) {(track "Track1" "20,3,W,N1,E,End" P1 directed:True) (track "Track2" "21,12,W,S1,E,End" P2 directed:True)}) (dice facesByDie:{{1 2 3 4} {0 1}} num:2) (hand Each) (regions "Replay" (sites {"A1" "A3" "D2" "H2" "L2"})) (piece "UrPiece" Each (if (= (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -2) (move Remove (from)) (if (!= (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -1) (if (or (is Empty (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))) (and (not (is Friend (who at:(trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))))) (not (is In (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (sites "Replay"))))) (move (from) (to (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))) (then (if (is In (last To) (sites "Replay")) (moveAgain))))))))}) (rules (start {(place "UrPiece1" (handSite P1) count:7) (place "UrPiece2" (handSite P2) count:7)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Boards consist of a grid of 3x4 squares and a continuation of the central row in the grid that extends for 8 further squares. The game is played with two astragals as dice: one from a sheep and one from an ox. The sheep astragal provides the base value for the roll, and the ox astragal serves as a bonus. Rolls of the sheep astragal produce values of 1, 2 ,3 or 4. The ox astragal produces a "yes" or "no" value. If "no" is rolled, the values remain the same. If "yes" is rolled, the value of the first roll is boosted to 5, 6, 7, or 10, respectively. These rules are proposed by Finkel based on the values of moves provided in the cuneiform tablets (Finkel 2007: 21–22). Each player starts play on one of the right corners of the 3x4 grid, proceeding left down that row to the opposite corner, and then right down the central track, which both players use, with the goal of moving off the end of the track. If a player lands on a square occupied by the opponent, the opponent's piece is removed from the board and may reenter on a subsequent turn. Rosettes on certain squares in the central track mark spaces where a player is safe from being sent to the beginning. Rosettes in the corners allow a player to roll again when a player lands on them. A player wins when they remove all seven of their pieces from the board by rolling the exact number of spaces left in the track, plus one.[Variant, "Variant/Seleucid", seleucid:<>, priority 1] 
(game "20 Squares" (players 2) (equipment {(board (merge (rectangle 3 4) (shift 0 1 (rectangle 1 12))) {(track "Track1" "20,3,W,N1,E,End" P1 directed:True) (track "Track2" "21,12,W,S1,E,End" P2 directed:True)}) (dice facesByDie:{{1 2 3 4} {0 1}} num:2) (hand Each) (regions "Replay" (sites {"A1" "A3" "D2" "H2" "L2"})) (piece "UrPiece" Each (if (= (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -2) (move Remove (from)) (if (!= (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -1) (if (or (is Empty (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))) (and (not (is Friend (who at:(trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))))) (not (is In (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (sites "Replay"))))) (move (from) (to (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))) (then (if (is In (last To) (sites "Replay")) (moveAgain))))))))}) (rules (start {(place "UrPiece1" (handSite P1) count:7) (place "UrPiece2" (handSite P2) count:7)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Boards consist of a grid of 3x4 squares and a continuation of the central row in the grid that extends for 8 further squares. The game is played with two astragals as dice: one from a sheep and one from an ox. The sheep astragal provides the base value for the roll, and the ox astragal serves as a bonus. Rolls of the sheep astragal produce values of 1, 2 ,3 or 4. The ox astragal produces a "yes" or "no" value. If "no" is rolled, the values remain the same. If "yes" is rolled, the value of the first roll is boosted to 5, 6, 7, or 10, respectively. These rules are proposed by Finkel based on the values of moves provided in the cuneiform tablets (Finkel 2007: 21–22). Each player starts play on one of the right corners of the 3x4 grid, proceeding left down that row to the opposite corner, and then right down the central track, which both players use, with the goal of moving off the end of the track. If a player lands on a square occupied by the opponent, the opponent's piece is removed from the board and may reenter on a subsequent turn. Rosettes on certain squares in the central track mark spaces where a player is safe from being sent to the beginning. Rosettes in the corners allow a player to roll again when a player lands on them. A player wins when they remove all seven of their pieces from the board by rolling the exact number of spaces left in the track, plus one.[Variant, "Variant/Seleucid", seleucid:<>, priority 1] 
(game "20 Squares" (players 2) (equipment {(board (merge (rectangle 3 4) (shift 0 1 (rectangle 1 12))) {(track "Track1" "20,3,W,N1,E,End" P1 directed:True) (track "Track2" "21,12,W,S1,E,End" P2 directed:True)}) (dice facesByDie:{{1 2 3 4} {0 1}} num:2) (hand Each) (regions "Replay" (sites {"A1" "A3" "D2" "H2" "L2"})) (piece "UrPiece" Each (if (= (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -2) (move Remove (from)) (if (!= (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) -1) (if (or (is Empty (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))) (and (not (is Friend (who at:(trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10))))))))) (not (is In (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (sites "Replay"))))) (move (from) (to (trackSite Move steps:(if (= 0 (face 23)) (face 22) (if (= 1 (face 22)) (+ (face 22) 5) (if (= 2 (face 22)) (+ (face 22) 6) (if (= 3 (face 22)) (+ (face 22) 7) (+ (face 22) 10)))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))) (then (if (is In (last To) (sites "Replay")) (moveAgain))))))))}) (rules (start {(place "UrPiece1" (handSite P1) count:7) (place "UrPiece2" (handSite P2) count:7)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Five pieces per player. The goal is to reach hole thirty with all five of the player's pieces. Each player has either the left or the right track. Movement is decided by dice. If a piece lands on a space with a connecting line, the piece must move backward along that line, never forward. Holes 15 and 25 are special holes, which grant a second roll.[Dice, "Dice/D2", die:<("StickDice" 4)>, priority 0] [Board, "Board/Parallel Connections Capture tracks", board:<
        (board 
            ("HoundsAndJackalsParallelConnection")
            {
            (track "Track1" {0..28 58..29} loop:True P1)
            (track "Track2" {29..58 28..0 } loop:True P2)
            }
            use:Vertex
        )
        >, priority 0] [Variant, "Variant/Carter Marked", hand:<(hand Each)> region:<(regions "Replay" {0 5 7 9 14 19 24 58 53  48 43 38 36 34 29})> pieceMove:<
        (if (= "MoveTo" 58)
            "RemovePiece"
            (if ("IsNotOffBoard" "MoveTo") 	 			
                (if (is Empty "MoveTo")
                    (move 
                        (from) 
                        (to "MoveTo")
                        (then
                            ("ReplayInMovingOn" (sites "Replay"))
                        )
                    )
                )
            )
        )
        > map:<(map {(pair 19 5) (pair 9 7) (pair 48 34) (pair 38 36) })> rules:<
        (rules 
            (start {
                (place "Marker1" (handSite P1) count:5)
                (place "Marker2" (handSite P2) count:5)
            })
            
            (play ("RollMove" (or (forEach Piece) (forEach Piece container:(mover)))))
            (end ("EscapeWin"))
        )
        >, priority 0] 
(game "58 Holes" (players 2) (equipment {(board (graph vertices:{{9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33}} edges:{{0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58}}) {(track "Track1" {59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58} P1 directed:True) (track "Track2" {60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58} P2 directed:True)} use:Vertex) (hand Each) (dice d:2 from:0 num:4) (regions "Replay" {14 24 43 53}) (piece "Marker" Each (if (= (trackSite Move steps:(count Pips)) 58) (move Remove (from)) (if (!= (trackSite Move steps:(count Pips)) -1) (if (is Empty (trackSite Move steps:(count Pips))) (move (from) (to (trackSite Move steps:(count Pips))) (then (and (if (is In (last To) (sites "Replay")) (moveAgain)) (if (!= (last To) (mapEntry (last To))) (if (is Empty (mapEntry (last To))) (move (from (last To)) (to (mapEntry (last To))))))))))))) (map {(pair 19 5) (pair 9 7) (pair 48 34) (pair 38 36)})}) (rules (start {(place "Marker1" (handSite P1) count:5) (place "Marker2" (handSite P2) count:5)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Five pieces per player. The goal is to reach hole thirty with all five of the player's pieces. Each player has either the left or the right track. Movement is decided by dice. If a piece lands on a space with a connecting line, the piece must move backward along that line, never forward. Holes 15 and 25 are special holes, which grant a second roll.[Dice, "Dice/D4", die:<(dice d:4 num:1)>, priority 0] [Board, "Board/Holes Race tracks", board:<
        (board 
            ("HoundsAndJackalsMarked")
            {
            (track "Track1" {59 0..28 58} P1 directed:True)
            (track "Track2" {60 29..58  } P2 directed:True)
            }
            use:Vertex
        )
        >, priority 0] [Variant, "Variant/Carter Unmarked", hand:<(hand Each)> region:<> pieceMove:<
        (if (= "MoveTo" 58)
            "RemovePiece"
            (if ("IsNotOffBoard" "MoveTo") 	 			
                (if (is Empty "MoveTo")
                    (move 
                        (from) 
                        (to "MoveTo")
                    )
                )
            )
        )
        > map:<(map {(pair 19 5) (pair 9 7) (pair 48 34) (pair 38 36) })> rules:<
        (rules 
            (start {
                (place "Marker1" (handSite P1) count:5)
                (place "Marker2" (handSite P2) count:5)
            })
            
            (play ("RollMove" (or (forEach Piece) (forEach Piece container:(mover)))))
            (end ("EscapeWin"))
        )
        >, priority 0] 
(game "58 Holes" (players 2) (equipment {(board (graph vertices:{{9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33}} edges:{{0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58}}) {(track "Track1" {59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58} P1 directed:True) (track "Track2" {60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58} P2 directed:True)} use:Vertex) (hand Each) (dice d:2 from:0 num:4) (regions "Replay" {14 24 43 53}) (piece "Marker" Each (if (= (trackSite Move steps:(count Pips)) 58) (move Remove (from)) (if (!= (trackSite Move steps:(count Pips)) -1) (if (is Empty (trackSite Move steps:(count Pips))) (move (from) (to (trackSite Move steps:(count Pips))) (then (and (if (is In (last To) (sites "Replay")) (moveAgain)) (if (!= (last To) (mapEntry (last To))) (if (is Empty (mapEntry (last To))) (move (from (last To)) (to (mapEntry (last To))))))))))))) (map {(pair 19 5) (pair 9 7) (pair 48 34) (pair 38 36)})}) (rules (start {(place "Marker1" (handSite P1) count:5) (place "Marker2" (handSite P2) count:5)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Five pieces per player. The goal is to reach hole thirty with all five of the player's pieces. Each player has either the left or the right track. Movement is decided by dice. If a piece lands on a space with a connecting line, the piece must move backward along that line, never forward. Holes 15 and 25 are special holes, which grant a second roll.[Dice, "Dice/D6", die:<(dice d:6 num:1)>, priority 0] [Board, "Board/Holes Capture tracks", board:<
        (board 
            ("HoundsAndJackalsMarked")
            {
            (track "Track1" {0..28 58..29} loop:True P1)
            (track "Track2" {29..58 28..0 } loop:True P2)
            }
            use:Vertex
        )
        >, priority 0] [Variant, "Variant/Carter Crossover 1", hand:<(hand Each)> region:<> pieceMove:<
        (if (= "ProgressOnTrack" 58)
            "RemovePiece"
            (if ("IsNotOffBoard" "ProgressOnTrack") 	 			
                (if (not ("IsFriendAt" "ProgressOnTrack"))
                    (move 
                        (from) 
                        (to "ProgressOnTrack"
                            (apply
                                (if ("IsEnemyAt" (to)) (move (from (to)) (to (handSite (who at:(to))))))
                            )
                        )
                        (then
                            (if (!= (last To) (mapEntry (last To))) (moveAgain))
                        )
                    )
                )
            )
        )
        > map:<(map {(pair 5 36) (pair 34 7) (pair 14 19) (pair 19 24) (pair 43 48) (pair 48 53) })> rules:<
        
        (define "ProgressOnTrack" 
            (if (or (= (from) 59) (<= (from) 28))
                ("NextSiteOnTrack" (count Pips) "Track1")
                ("NextSiteOnTrack" (count Pips) "Track2")
            )
        )
        
        (rules 
            (start {
                (place "Marker1" (handSite P1) count:5)
                (place "Marker2" (handSite P2) count:5)
            })
            
            (play 
                (if ("SameTurn")
                    (or
                        (move Pass)
                        (move 
                            (from (last To))
                            (to (mapEntry (last To))
                                (apply
                                    (if ("IsEnemyAt" (to)) (move (from (to)) (to (handSite (who at:(to))))))
                                )		
                            )
                            (then
                                (if (!= (last To) (mapEntry (last To))) (moveAgain))
                            )
                        )
                    )
                    ("RollMove" (or (forEach Piece) (forEach Piece container:(mover))))
                )
            )
            (end ("EscapeWin"))
        )
        >, priority 0] 
(game "58 Holes" (players 2) (equipment {(board (graph vertices:{{9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33}} edges:{{0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58}}) {(track "Track1" {59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58} P1 directed:True) (track "Track2" {60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58} P2 directed:True)} use:Vertex) (hand Each) (dice d:2 from:0 num:4) (regions "Replay" {14 24 43 53}) (piece "Marker" Each (if (= (trackSite Move steps:(count Pips)) 58) (move Remove (from)) (if (!= (trackSite Move steps:(count Pips)) -1) (if (is Empty (trackSite Move steps:(count Pips))) (move (from) (to (trackSite Move steps:(count Pips))) (then (and (if (is In (last To) (sites "Replay")) (moveAgain)) (if (!= (last To) (mapEntry (last To))) (if (is Empty (mapEntry (last To))) (move (from (last To)) (to (mapEntry (last To))))))))))))) (map {(pair 19 5) (pair 9 7) (pair 48 34) (pair 38 36)})}) (rules (start {(place "Marker1" (handSite P1) count:5) (place "Marker2" (handSite P2) count:5)}) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
To be reconstructed. The rules implemented here are suggested by Jenny Kile as follows: Besides being an 8x8 squared board, the board consists of certain marked spaces which denote safety, entry, or exit for players. The four corners, the four central squares, and two center squares on each side are crosscut, like shown. Two, three, or four people can play the game. If two players are playing, each would sit on one side of the board and enter their two pieces onto the center crosscut squares along the outer side The object of the game is to be the first player to enter and exit both his pieces. A player exits his piece once reaching the center squares.[Version, "Players/4", numPlayers:<4> start:<
        (start { 	
            (place "Disc1" (handSite P1) count:2)
            (place "Disc2" (handSite P2) count:2)
            (place "Disc3" (handSite P3) count:2)
            (place "Disc4" (handSite P4) count:2)
        })
        > map:<
        (map "Entry" {(pair P1 "D1") (pair P2 "E8") (pair P3 "H4") (pair P4 "A5")})
        (map "Exit" {(pair P1 "E3") (pair P2 "D6") (pair P3 "F5") (pair P4 "C4")})
        >, priority 0] 
(game "Ashtapada" (players 2) (equipment {(board (square 8) {(track "Track1" "3,E,N,W,S,E1,N6,E5,S5,W4,N4,E3,S3,W1" 1 directed:True) (track "Track2" "60,W,S,E,N,W1,S6,W5,N5,E4,S4,W3,N3,E1" 2 directed:True) (track "Track3" "31,N,W,S,E,N1,W6,N5,E5,S4,W4,N3,E3,S1" 3 directed:True) (track "Track4" "32,S,E,N,W,S1,E6,S5,W5,N4,E4,S3,W3,N1" 4 directed:True)}) (dice d:2 from:0 num:4) (hand Each) (map "DieValue" {(pair 4 8)}) (map "Entry" {(pair P1 "D1") (pair P2 "E8")}) (map "Exit" {(pair P1 "E3") (pair P2 "D6")}) (regions "Protect" (sites {"A1" "A4" "A5" "A8" "D1" "D4" "D5" "D8" "E1" "E4" "E5" "E8" "H1" "H4" "H5" "H8"})) (piece "Disc" Each (if (!= (trackSite Move steps:(mapEntry "DieValue" (count Pips))) -1) (if (if (is In (trackSite Move steps:(mapEntry "DieValue" (count Pips))) (sites "Protect")) (not (is Enemy (who at:(trackSite Move steps:(mapEntry "DieValue" (count Pips)))))) True) (move (from) (to (trackSite Move steps:(mapEntry "DieValue" (count Pips))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))}) (rules (start {(place "Disc1" (handSite P1) count:2) (place "Disc2" (handSite P2) count:2)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (is Prev Mover) (or (forEach Piece (if (= (from) (mapEntry "Exit" Mover)) (move Remove (from)) (if (!= (trackSite Move steps:1) -1) (if (if (is In (trackSite Move steps:1) (sites "Protect")) (not (is Enemy (who at:(trackSite Move steps:1)))) True) (move (from) (to (trackSite Move steps:1) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover) if:(not (is Enemy (who at:(to)))))))) (if (can Move (forEach Piece)) (forEach Piece (then (if (= (count Pips) 3) (moveAgain)))) (move Pass (then (if (= (count Pips) 3) (moveAgain)))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
To be reconstructed. The rules implemented here are suggested by Jenny Kile as follows: Besides being an 8x8 squared board, the board consists of certain marked spaces which denote safety, entry, or exit for players. The four corners, the four central squares, and two center squares on each side are crosscut, like shown. Two, three, or four people can play the game. If two players are playing, each would sit on one side of the board and enter their two pieces onto the center crosscut squares along the outer side The object of the game is to be the first player to enter and exit both his pieces. A player exits his piece once reaching the center squares.[Version, "Players/2", numPlayers:<2> start:< 
        (start { 	
            (place "Disc1" (handSite P1) count:2)
            (place "Disc2" (handSite P2) count:2)
        })
        > map:<
        (map "Entry" {(pair P1 "D1") (pair P2 "E8")})
        (map "Exit" {(pair P1 "E3") (pair P2 "D6")})
        >, priority 1] 
(game "Ashtapada" (players 2) (equipment {(board (square 8) {(track "Track1" "3,E,N,W,S,E1,N6,E5,S5,W4,N4,E3,S3,W1" 1 directed:True) (track "Track2" "60,W,S,E,N,W1,S6,W5,N5,E4,S4,W3,N3,E1" 2 directed:True) (track "Track3" "31,N,W,S,E,N1,W6,N5,E5,S4,W4,N3,E3,S1" 3 directed:True) (track "Track4" "32,S,E,N,W,S1,E6,S5,W5,N4,E4,S3,W3,N1" 4 directed:True)}) (dice d:2 from:0 num:4) (hand Each) (map "DieValue" {(pair 4 8)}) (map "Entry" {(pair P1 "D1") (pair P2 "E8")}) (map "Exit" {(pair P1 "E3") (pair P2 "D6")}) (regions "Protect" (sites {"A1" "A4" "A5" "A8" "D1" "D4" "D5" "D8" "E1" "E4" "E5" "E8" "H1" "H4" "H5" "H8"})) (piece "Disc" Each (if (!= (trackSite Move steps:(mapEntry "DieValue" (count Pips))) -1) (if (if (is In (trackSite Move steps:(mapEntry "DieValue" (count Pips))) (sites "Protect")) (not (is Enemy (who at:(trackSite Move steps:(mapEntry "DieValue" (count Pips)))))) True) (move (from) (to (trackSite Move steps:(mapEntry "DieValue" (count Pips))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))}) (rules (start {(place "Disc1" (handSite P1) count:2) (place "Disc2" (handSite P2) count:2)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (is Prev Mover) (or (forEach Piece (if (= (from) (mapEntry "Exit" Mover)) (move Remove (from)) (if (!= (trackSite Move steps:1) -1) (if (if (is In (trackSite Move steps:1) (sites "Protect")) (not (is Enemy (who at:(trackSite Move steps:1)))) True) (move (from) (to (trackSite Move steps:1) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover) if:(not (is Enemy (who at:(to)))))))) (if (can Move (forEach Piece)) (forEach Piece (then (if (= (count Pips) 3) (moveAgain)))) (move Pass (then (if (= (count Pips) 3) (moveAgain)))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
To be reconstructed. The rules implemented here are suggested by Jenny Kile as follows: Besides being an 8x8 squared board, the board consists of certain marked spaces which denote safety, entry, or exit for players. The four corners, the four central squares, and two center squares on each side are crosscut, like shown. Two, three, or four people can play the game. If two players are playing, each would sit on one side of the board and enter their two pieces onto the center crosscut squares along the outer side The object of the game is to be the first player to enter and exit both his pieces. A player exits his piece once reaching the center squares.[Version, "Players/4", numPlayers:<4> start:<
        (start { 	
            (place "Disc1" (handSite P1) count:2)
            (place "Disc2" (handSite P2) count:2)
            (place "Disc3" (handSite P3) count:2)
            (place "Disc4" (handSite P4) count:2)
        })
        > map:<
        (map "Entry" {(pair P1 "D1") (pair P2 "E8") (pair P3 "H4") (pair P4 "A5")})
        (map "Exit" {(pair P1 "E3") (pair P2 "D6") (pair P3 "F5") (pair P4 "C4")})
        >, priority 0] 
(game "Ashtapada" (players 2) (equipment {(board (square 8) {(track "Track1" "3,E,N,W,S,E1,N6,E5,S5,W4,N4,E3,S3,W1" 1 directed:True) (track "Track2" "60,W,S,E,N,W1,S6,W5,N5,E4,S4,W3,N3,E1" 2 directed:True) (track "Track3" "31,N,W,S,E,N1,W6,N5,E5,S4,W4,N3,E3,S1" 3 directed:True) (track "Track4" "32,S,E,N,W,S1,E6,S5,W5,N4,E4,S3,W3,N1" 4 directed:True)}) (dice d:2 from:0 num:4) (hand Each) (map "DieValue" {(pair 4 8)}) (map "Entry" {(pair P1 "D1") (pair P2 "E8")}) (map "Exit" {(pair P1 "E3") (pair P2 "D6")}) (regions "Protect" (sites {"A1" "A4" "A5" "A8" "D1" "D4" "D5" "D8" "E1" "E4" "E5" "E8" "H1" "H4" "H5" "H8"})) (piece "Disc" Each (if (!= (trackSite Move steps:(mapEntry "DieValue" (count Pips))) -1) (if (if (is In (trackSite Move steps:(mapEntry "DieValue" (count Pips))) (sites "Protect")) (not (is Enemy (who at:(trackSite Move steps:(mapEntry "DieValue" (count Pips)))))) True) (move (from) (to (trackSite Move steps:(mapEntry "DieValue" (count Pips))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))}) (rules (start {(place "Disc1" (handSite P1) count:2) (place "Disc2" (handSite P2) count:2)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (is Prev Mover) (or (forEach Piece (if (= (from) (mapEntry "Exit" Mover)) (move Remove (from)) (if (!= (trackSite Move steps:1) -1) (if (if (is In (trackSite Move steps:1) (sites "Protect")) (not (is Enemy (who at:(trackSite Move steps:1)))) True) (move (from) (to (trackSite Move steps:1) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (if (not (all Sites (sites Hand Mover) if:(= 0 (count Cell at:(site))))) (move (from (handSite Mover)) (to (mapEntry "Entry" Mover) if:(not (is Enemy (who at:(to)))))))) (if (can Move (forEach Piece)) (forEach Piece (then (if (= (count Pips) 3) (moveAgain)))) (move Pass (then (if (= (count Pips) 3) (moveAgain)))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four 3x4 rectangles, arranged in a cross shape, with a large central square which has diagonals, and spaces in the four corners between each arm of the cross. Four players, played on two teams, with team members sitting on opposite sides of the board. Four pieces per player, with the colors red, black, yellow, and green. Six cowrie shells used as dice: five are white and one is yellow. The number of the mouths which are face-up determine the value of the throw, except for a throw of 3 when one of the cowries with the mouth down is the yellow one, in which case the throw is known as So-hatara, and counts as 4, but allows special moves because it is actually considered four individual throws of 1. When the player throws 1, 5, or So-hatara, the player receives an extra throw. A 1, 5, or So-hatara must be thrown to enter a piece on the board. The entirety of a throw must be used to move one piece, but separate throws in a turn can each be used individually to move a different piece. This does not apply when So-hatara is one of the throws; in this case, the total of the throw can be subdivided however the player sees fit. Pieces enter the board from the center, moving down the central track of their arm, then in an anti-clockwise direction around the board, and then back up the central row of their arm of the board to the central square. If a player lands on a space occupied by a piece of the opposing team, the opponent's piece is sent back to start. Pieces resting on the corner spaces between the arms of the cross cannot be sent to start in any circumstance. The first team who places all of their pieces in the central square wins.
(game "Asi Keliya" (players 4) (equipment {(board (merge {(add (add (merge {(rectangle 3 4) (shift 7 0 (rectangle 3 4)) (shift 3.5 3.5 (rotate 90 (rectangle 3 4))) (shift 3.5 -3.5 (rotate 90 (rectangle 3 4)))}) vertices:{{5.5 1.5}}) edges:{{4 76} {35 76} {19 76} {20 76}}) (shift 3 3 (square 1)) (shift 7 3 (square 1)) (shift 3 -1 (square 1)) (shift 7 -1 (square 1))}) {(track "Track1" "6,52,S,E,N3,E,N1,E,N,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E1,N3,End" P1 directed:True) (track "Track2" "7,11,W,S1,E3,S1,E1,S,E,N3,E1,N1,E,N,W3,N,W1,N,W2,S3,W1,S1,W,S1,E3,End" P2 directed:True) (track "Track3" "17,39,N,W1,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E,N1,E,N,W3,N,W1,N,W1,S3,End" P3 directed:True) (track "Track4" "21,26,E,N1,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E1,N1,E,N1,W3,End" P4 directed:True)}) (piece "Marker" Each (if (= (trackSite Move steps:(count Pips)) -2) (move Remove (from)) (if (!= (trackSite Move steps:(count Pips)) -1) (if (or (is Empty (trackSite Move steps:(count Pips))) (and (is Enemy (who at:(trackSite Move steps:(count Pips)))) (not (is In (trackSite Move steps:(count Pips)) (sites "SafeSites"))))) (move (from) (to (trackSite Move steps:(count Pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (hand Each) (dice d:2 from:0 num:6) (map {(pair P1 6) (pair P2 7) (pair P3 17) (pair P4 21)}) (regions "SafeSites" (sites {3 19 16 34}))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place "Marker" "Hand" count:4)}) (play (do (if (not (is Pending)) (roll)) next:(or (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (move (from (handSite Mover)) (to (mapEntry (mover)) if:(is Empty (mapEntry (mover)))))) (if (or (is Pending) (and (= (count Pips) 3) (= 0 (face 65)))) (forEach Die if:(!= (pips) 0) (forEach Piece (if (= (trackSite Move steps:(pips)) -2) (move Remove (from)) (if (!= (trackSite Move steps:(pips)) -1) (if (or (is Empty (trackSite Move steps:(pips))) (and (is Enemy (who at:(trackSite Move steps:(pips)))) (not (is In (trackSite Move steps:(pips)) (sites "SafeSites"))))) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (then (if (not (all DiceUsed)) (and (set Pending) (moveAgain))))) (forEach Piece))) (then (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (moveAgain))))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 
Four 3x4 rectangles, arranged in a cross shape, with a large central square which has diagonals, and spaces in the four corners between each arm of the cross. Four players, played on two teams, with team members sitting on opposite sides of the board. Four pieces per player, with the colors red, black, yellow, and green. Six cowrie shells used as dice: five are white and one is yellow. The number of the mouths which are face-up determine the value of the throw, except for a throw of 3 when one of the cowries with the mouth down is the yellow one, in which case the throw is known as So-hatara, and counts as 4, but allows special moves because it is actually considered four individual throws of 1. When the player throws 1, 5, or So-hatara, the player receives an extra throw. A 1, 5, or So-hatara must be thrown to enter a piece on the board. The entirety of a throw must be used to move one piece, but separate throws in a turn can each be used individually to move a different piece. This does not apply when So-hatara is one of the throws; in this case, the total of the throw can be subdivided however the player sees fit. Pieces enter the board from the center, moving down the central track of their arm, then in an anti-clockwise direction around the board, and then back up the central row of their arm of the board to the central square. If a player lands on a space occupied by a piece of the opposing team, the opponent's piece is sent back to start. Pieces resting on the corner spaces between the arms of the cross cannot be sent to start in any circumstance. The first team who places all of their pieces in the central square wins.
(game "Asi Keliya" (players 4) (equipment {(board (merge {(add (add (merge {(rectangle 3 4) (shift 7 0 (rectangle 3 4)) (shift 3.5 3.5 (rotate 90 (rectangle 3 4))) (shift 3.5 -3.5 (rotate 90 (rectangle 3 4)))}) vertices:{{5.5 1.5}}) edges:{{4 76} {35 76} {19 76} {20 76}}) (shift 3 3 (square 1)) (shift 7 3 (square 1)) (shift 3 -1 (square 1)) (shift 7 -1 (square 1))}) {(track "Track1" "6,52,S,E,N3,E,N1,E,N,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E1,N3,End" P1 directed:True) (track "Track2" "7,11,W,S1,E3,S1,E1,S,E,N3,E1,N1,E,N,W3,N,W1,N,W2,S3,W1,S1,W,S1,E3,End" P2 directed:True) (track "Track3" "17,39,N,W1,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E,N1,E,N,W3,N,W1,N,W1,S3,End" P3 directed:True) (track "Track4" "21,26,E,N1,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E1,N1,E,N1,W3,End" P4 directed:True)}) (piece "Marker" Each (if (= (trackSite Move steps:(count Pips)) -2) (move Remove (from)) (if (!= (trackSite Move steps:(count Pips)) -1) (if (or (is Empty (trackSite Move steps:(count Pips))) (and (is Enemy (who at:(trackSite Move steps:(count Pips)))) (not (is In (trackSite Move steps:(count Pips)) (sites "SafeSites"))))) (move (from) (to (trackSite Move steps:(count Pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (hand Each) (dice d:2 from:0 num:6) (map {(pair P1 6) (pair P2 7) (pair P3 17) (pair P4 21)}) (regions "SafeSites" (sites {3 19 16 34}))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place "Marker" "Hand" count:4)}) (play (do (if (not (is Pending)) (roll)) next:(or (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (move (from (handSite Mover)) (to (mapEntry (mover)) if:(is Empty (mapEntry (mover)))))) (if (or (is Pending) (and (= (count Pips) 3) (= 0 (face 65)))) (forEach Die if:(!= (pips) 0) (forEach Piece (if (= (trackSite Move steps:(pips)) -2) (move Remove (from)) (if (!= (trackSite Move steps:(pips)) -1) (if (or (is Empty (trackSite Move steps:(pips))) (and (is Enemy (who at:(trackSite Move steps:(pips)))) (not (is In (trackSite Move steps:(pips)) (sites "SafeSites"))))) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (then (if (not (all DiceUsed)) (and (set Pending) (moveAgain))))) (forEach Piece))) (then (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (moveAgain))))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 
Four 3x4 rectangles, arranged in a cross shape, with a large central square which has diagonals, and spaces in the four corners between each arm of the cross. Four players, played on two teams, with team members sitting on opposite sides of the board. Four pieces per player, with the colors red, black, yellow, and green. Six cowrie shells used as dice: five are white and one is yellow. The number of the mouths which are face-up determine the value of the throw, except for a throw of 3 when one of the cowries with the mouth down is the yellow one, in which case the throw is known as So-hatara, and counts as 4, but allows special moves because it is actually considered four individual throws of 1. When the player throws 1, 5, or So-hatara, the player receives an extra throw. A 1, 5, or So-hatara must be thrown to enter a piece on the board. The entirety of a throw must be used to move one piece, but separate throws in a turn can each be used individually to move a different piece. This does not apply when So-hatara is one of the throws; in this case, the total of the throw can be subdivided however the player sees fit. Pieces enter the board from the center, moving down the central track of their arm, then in an anti-clockwise direction around the board, and then back up the central row of their arm of the board to the central square. If a player lands on a space occupied by a piece of the opposing team, the opponent's piece is sent back to start. Pieces resting on the corner spaces between the arms of the cross cannot be sent to start in any circumstance. The first team who places all of their pieces in the central square wins.
(game "Asi Keliya" (players 4) (equipment {(board (merge {(add (add (merge {(rectangle 3 4) (shift 7 0 (rectangle 3 4)) (shift 3.5 3.5 (rotate 90 (rectangle 3 4))) (shift 3.5 -3.5 (rotate 90 (rectangle 3 4)))}) vertices:{{5.5 1.5}}) edges:{{4 76} {35 76} {19 76} {20 76}}) (shift 3 3 (square 1)) (shift 7 3 (square 1)) (shift 3 -1 (square 1)) (shift 7 -1 (square 1))}) {(track "Track1" "6,52,S,E,N3,E,N1,E,N,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E1,N3,End" P1 directed:True) (track "Track2" "7,11,W,S1,E3,S1,E1,S,E,N3,E1,N1,E,N,W3,N,W1,N,W2,S3,W1,S1,W,S1,E3,End" P2 directed:True) (track "Track3" "17,39,N,W1,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E,N1,E,N,W3,N,W1,N,W1,S3,End" P3 directed:True) (track "Track4" "21,26,E,N1,W3,N1,W1,N,W,S3,W1,S1,W,S,E3,S1,E1,S,E,N3,E1,N1,E,N1,W3,End" P4 directed:True)}) (piece "Marker" Each (if (= (trackSite Move steps:(count Pips)) -2) (move Remove (from)) (if (!= (trackSite Move steps:(count Pips)) -1) (if (or (is Empty (trackSite Move steps:(count Pips))) (and (is Enemy (who at:(trackSite Move steps:(count Pips)))) (not (is In (trackSite Move steps:(count Pips)) (sites "SafeSites"))))) (move (from) (to (trackSite Move steps:(count Pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (hand Each) (dice d:2 from:0 num:6) (map {(pair P1 6) (pair P2 7) (pair P3 17) (pair P4 21)}) (regions "SafeSites" (sites {3 19 16 34}))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place "Marker" "Hand" count:4)}) (play (do (if (not (is Pending)) (roll)) next:(or (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (move (from (handSite Mover)) (to (mapEntry (mover)) if:(is Empty (mapEntry (mover)))))) (if (or (is Pending) (and (= (count Pips) 3) (= 0 (face 65)))) (forEach Die if:(!= (pips) 0) (forEach Piece (if (= (trackSite Move steps:(pips)) -2) (move Remove (from)) (if (!= (trackSite Move steps:(pips)) -1) (if (or (is Empty (trackSite Move steps:(pips))) (and (is Enemy (who at:(trackSite Move steps:(pips)))) (not (is In (trackSite Move steps:(pips)) (sites "SafeSites"))))) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (then (if (not (all DiceUsed)) (and (set Pending) (moveAgain))))) (forEach Piece))) (then (if (or (and (= (count Pips) 3) (= 0 (face 65))) (is In (count Pips) (sites {1 5}))) (moveAgain))))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 
Four 3x8 rectangles, arranged in a cross. In the outer rows of each arm, the third square from the outer corners is marked with an X. In two opposite arms, the bottom left corner is marked with "", called bange. Two players. Four pieces per player. Six cowrie shells, used as dice. The throws are as follows: six mouths up (bara) = 12, and the player is granted another throw; five mouths up (bange) = 25 plus another throw, or 24 in addition to entering a piece on the first space of the track, or a piece can enter on the bange plus another throw; four mouths up (arba) = 4; three mouths up (t'laite) = 3; two mouths up (doi) = 2; one mouth up (dust) = 11 plus another throw, or 10 in addition to entering a piece on the first square of the track, or a piece can enter on the X in the right hand row of the player's arm and the player gets another throw; all mouths down (shaka) = 6 plus another throw. Players begin in opposite arms of the cross that do not contain the bange. Pieces enter the board on the top square of the central row of their arm, proceed down that row, then continue in an anti-clockwise direction around the board, until returning to the central track in the player's arm and proceeding toward the central square of the board. The player moves the pieces according to the throws. A piece must move the full value of a single throw, unless one of the throws allows the entering of a piece. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must re-enter from the beginning. Pieces resting on squares marked with X cannot be sent back to start in this way. Two opposing pieces cannot occupy the same safe space, but two pieces belonging to the same player may. Pieces entering the central row of the player's arm are placed on their side to indicate they are moving toward the goal, rather than just starting. Pieces enter the central space (the kitchen) by throwing a dust or bange from the final space in the central row. When this is thrown, and the player has other pieces on the board, the piece waiting to enter the kitchen uses the point normally used to enter pieces to exit, and the remaining value of the throw can be used by other pieces. The first player to remove all four pieces from the board wins.
(game "Bargese" (players 2) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P1 directed:True) (track "Track2" "27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P2 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (and {(>= 0 (var "EnteredPiece")) (= (trackSite Move from:(from) steps:1) -2) (or (= (mapEntry "Throw" (count Pips)) 25) (= (mapEntry "Throw" (count Pips)) 11))}) (move Remove (from) level:(level) (then (set Var "EnteredPiece" 1))) (if (and (>= 0 (var "EnteredPiece")) (= (trackSite Move from:(from) steps:2) -2)) (move (from (from)) (to (trackSite Move from:(from) steps:1))) (move (from (from) level:(level)) (to (trackSite Move from:(from) steps:(if (< 0 (var "EnteredPiece")) (- (mapEntry "Throw" (count Pips)) 1) (mapEntry "Throw" (count Pips)))) if:(not (and (is In (to) (sites "SafeSites")) (is Enemy (who at:(to))))) (apply (if (is Enemy (who at:(to))) (forEach Level (to) FromTop (fromTo (from (to) level:(level)) (to (handSite (who at:(to) level:(level))))))))) (then (set Var "EnteredPiece" 0)))))) (map "Throw" {(pair 0 6) (pair 1 11) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (map "DefaultEntry" {(pair P1 26) (pair P2 27)}) (map "XEntry" {(pair P1 2) (pair P2 48)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start {(place Stack "Pawn1" (handSite P1) count:4) (place Stack "Pawn2" (handSite P2) count:4)}) (play (do (if (>= 0 (var "EnteredPiece")) (roll)) next:(if (can Move (or {(if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 25)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "XEntry" Mover)))) (forEach Piece)})) (or {(if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 25)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "XEntry" Mover)))) (forEach Piece)}) (move Pass (then (set Var "EnteredPiece" 0)))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {12 25 11 6})) (moveAgain))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four 3x8 rectangles, arranged in a cross. In the outer rows of each arm, the third square from the outer corners is marked with an X. In two opposite arms, the bottom left corner is marked with "", called bange. Two players. Four pieces per player. Six cowrie shells, used as dice. The throws are as follows: six mouths up (bara) = 12, and the player is granted another throw; five mouths up (bange) = 25 plus another throw, or 24 in addition to entering a piece on the first space of the track, or a piece can enter on the bange plus another throw; four mouths up (arba) = 4; three mouths up (t'laite) = 3; two mouths up (doi) = 2; one mouth up (dust) = 11 plus another throw, or 10 in addition to entering a piece on the first square of the track, or a piece can enter on the X in the right hand row of the player's arm and the player gets another throw; all mouths down (shaka) = 6 plus another throw. Players begin in opposite arms of the cross that do not contain the bange. Pieces enter the board on the top square of the central row of their arm, proceed down that row, then continue in an anti-clockwise direction around the board, until returning to the central track in the player's arm and proceeding toward the central square of the board. The player moves the pieces according to the throws. A piece must move the full value of a single throw, unless one of the throws allows the entering of a piece. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must re-enter from the beginning. Pieces resting on squares marked with X cannot be sent back to start in this way. Two opposing pieces cannot occupy the same safe space, but two pieces belonging to the same player may. Pieces entering the central row of the player's arm are placed on their side to indicate they are moving toward the goal, rather than just starting. Pieces enter the central space (the kitchen) by throwing a dust or bange from the final space in the central row. When this is thrown, and the player has other pieces on the board, the piece waiting to enter the kitchen uses the point normally used to enter pieces to exit, and the remaining value of the throw can be used by other pieces. The first player to remove all four pieces from the board wins.
(game "Bargese" (players 2) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P1 directed:True) (track "Track2" "27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P2 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (and {(>= 0 (var "EnteredPiece")) (= (trackSite Move from:(from) steps:1) -2) (or (= (mapEntry "Throw" (count Pips)) 25) (= (mapEntry "Throw" (count Pips)) 11))}) (move Remove (from) level:(level) (then (set Var "EnteredPiece" 1))) (if (and (>= 0 (var "EnteredPiece")) (= (trackSite Move from:(from) steps:2) -2)) (move (from (from)) (to (trackSite Move from:(from) steps:1))) (move (from (from) level:(level)) (to (trackSite Move from:(from) steps:(if (< 0 (var "EnteredPiece")) (- (mapEntry "Throw" (count Pips)) 1) (mapEntry "Throw" (count Pips)))) if:(not (and (is In (to) (sites "SafeSites")) (is Enemy (who at:(to))))) (apply (if (is Enemy (who at:(to))) (forEach Level (to) FromTop (fromTo (from (to) level:(level)) (to (handSite (who at:(to) level:(level))))))))) (then (set Var "EnteredPiece" 0)))))) (map "Throw" {(pair 0 6) (pair 1 11) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (map "DefaultEntry" {(pair P1 26) (pair P2 27)}) (map "XEntry" {(pair P1 2) (pair P2 48)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start {(place Stack "Pawn1" (handSite P1) count:4) (place Stack "Pawn2" (handSite P2) count:4)}) (play (do (if (>= 0 (var "EnteredPiece")) (roll)) next:(if (can Move (or {(if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 25)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "XEntry" Mover)))) (forEach Piece)})) (or {(if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 25)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "XEntry" Mover)))) (forEach Piece)}) (move Pass (then (set Var "EnteredPiece" 0)))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {12 25 11 6})) (moveAgain))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four 3x8 rectangles, arranged in a cross. In the outer rows of each arm, the third square from the outer corners is marked with an X. In two opposite arms, the bottom left corner is marked with "", called bange. Two players. Four pieces per player. Six cowrie shells, used as dice. The throws are as follows: six mouths up (bara) = 12, and the player is granted another throw; five mouths up (bange) = 25 plus another throw, or 24 in addition to entering a piece on the first space of the track, or a piece can enter on the bange plus another throw; four mouths up (arba) = 4; three mouths up (t'laite) = 3; two mouths up (doi) = 2; one mouth up (dust) = 11 plus another throw, or 10 in addition to entering a piece on the first square of the track, or a piece can enter on the X in the right hand row of the player's arm and the player gets another throw; all mouths down (shaka) = 6 plus another throw. Players begin in opposite arms of the cross that do not contain the bange. Pieces enter the board on the top square of the central row of their arm, proceed down that row, then continue in an anti-clockwise direction around the board, until returning to the central track in the player's arm and proceeding toward the central square of the board. The player moves the pieces according to the throws. A piece must move the full value of a single throw, unless one of the throws allows the entering of a piece. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is removed from the board and must re-enter from the beginning. Pieces resting on squares marked with X cannot be sent back to start in this way. Two opposing pieces cannot occupy the same safe space, but two pieces belonging to the same player may. Pieces entering the central row of the player's arm are placed on their side to indicate they are moving toward the goal, rather than just starting. Pieces enter the central space (the kitchen) by throwing a dust or bange from the final space in the central row. When this is thrown, and the player has other pieces on the board, the piece waiting to enter the kitchen uses the point normally used to enter pieces to exit, and the remaining value of the throw can be used by other pieces. The first player to remove all four pieces from the board wins.
(game "Bargese" (players 2) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P1 directed:True) (track "Track2" "27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P2 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (and {(>= 0 (var "EnteredPiece")) (= (trackSite Move from:(from) steps:1) -2) (or (= (mapEntry "Throw" (count Pips)) 25) (= (mapEntry "Throw" (count Pips)) 11))}) (move Remove (from) level:(level) (then (set Var "EnteredPiece" 1))) (if (and (>= 0 (var "EnteredPiece")) (= (trackSite Move from:(from) steps:2) -2)) (move (from (from)) (to (trackSite Move from:(from) steps:1))) (move (from (from) level:(level)) (to (trackSite Move from:(from) steps:(if (< 0 (var "EnteredPiece")) (- (mapEntry "Throw" (count Pips)) 1) (mapEntry "Throw" (count Pips)))) if:(not (and (is In (to) (sites "SafeSites")) (is Enemy (who at:(to))))) (apply (if (is Enemy (who at:(to))) (forEach Level (to) FromTop (fromTo (from (to) level:(level)) (to (handSite (who at:(to) level:(level))))))))) (then (set Var "EnteredPiece" 0)))))) (map "Throw" {(pair 0 6) (pair 1 11) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (map "DefaultEntry" {(pair P1 26) (pair P2 27)}) (map "XEntry" {(pair P1 2) (pair P2 48)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start {(place Stack "Pawn1" (handSite P1) count:4) (place Stack "Pawn2" (handSite P2) count:4)}) (play (do (if (>= 0 (var "EnteredPiece")) (roll)) next:(if (can Move (or {(if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 25)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "XEntry" Mover)))) (forEach Piece)})) (or {(if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 25)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "DefaultEntry" Mover)) (then (set Var "EnteredPiece" 1)))) (if (and {(>= 0 (var "EnteredPiece")) (is Occupied (handSite Mover)) (= (mapEntry "Throw" (count Pips)) 11)}) (move (from (handSite Mover)) (to (mapEntry "XEntry" Mover)))) (forEach Piece)}) (move Pass (then (set Var "EnteredPiece" 0)))) (then (if (is In (mapEntry "Throw" (count Pips)) (sites {12 25 11 6})) (moveAgain))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four 3x8 rectangles, arranged in a cross. The third square in the outer rows of each arm, counting from the outer corners, are marked. Four players, each with four pieces. Pieces enter the board from the center of the board, down the central row of the player's arm, around the board in an anti-clockwise direction, and then back up the central row to the central space. Six cowries used as dice, the throws are as follows: one mouth up = 10; two mouths up = 2; three mouths up = 3; four mouths up = 4; five mouths up = 25; six mouths up = 12; zero mouths up = 6. Throws of 10 and 25 allow a player to enter a piece onto the board. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is sent back to start. Pieces on the same spot as another piece belonging to the player and pieces on marked squares are safe from being sent to start. The player who moves all of their pieces off the board first wins.
(game "Barjis" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E1,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N8" P1 directed:True) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 directed:True) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 directed:True) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (= (trackSite Move steps:(mapEntry "Throw" (count Pips))) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move steps:(mapEntry "Throw" (count Pips))) if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (is In (to) (sites "SafeSites"))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start (place "Pawn" "Hand" count:4)) (play (do (roll) next:(or (forEach Piece) (if (and (is In (mapEntry "Throw" (count Pips)) (array {10 25})) (is Occupied (handSite Mover))) (move (from (handSite Mover)) (to (centrePoint) if:(not (is Friend (who at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four 3x8 rectangles, arranged in a cross. The third square in the outer rows of each arm, counting from the outer corners, are marked. Four players, each with four pieces. Pieces enter the board from the center of the board, down the central row of the player's arm, around the board in an anti-clockwise direction, and then back up the central row to the central space. Six cowries used as dice, the throws are as follows: one mouth up = 10; two mouths up = 2; three mouths up = 3; four mouths up = 4; five mouths up = 25; six mouths up = 12; zero mouths up = 6. Throws of 10 and 25 allow a player to enter a piece onto the board. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is sent back to start. Pieces on the same spot as another piece belonging to the player and pieces on marked squares are safe from being sent to start. The player who moves all of their pieces off the board first wins.
(game "Barjis" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E1,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N8" P1 directed:True) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 directed:True) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 directed:True) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (= (trackSite Move steps:(mapEntry "Throw" (count Pips))) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move steps:(mapEntry "Throw" (count Pips))) if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (is In (to) (sites "SafeSites"))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start (place "Pawn" "Hand" count:4)) (play (do (roll) next:(or (forEach Piece) (if (and (is In (mapEntry "Throw" (count Pips)) (array {10 25})) (is Occupied (handSite Mover))) (move (from (handSite Mover)) (to (centrePoint) if:(not (is Friend (who at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four 3x8 rectangles, arranged in a cross. The third square in the outer rows of each arm, counting from the outer corners, are marked. Four players, each with four pieces. Pieces enter the board from the center of the board, down the central row of the player's arm, around the board in an anti-clockwise direction, and then back up the central row to the central space. Six cowries used as dice, the throws are as follows: one mouth up = 10; two mouths up = 2; three mouths up = 3; four mouths up = 4; five mouths up = 25; six mouths up = 12; zero mouths up = 6. Throws of 10 and 25 allow a player to enter a piece onto the board. When a piece lands on a space occupied by an opponent's piece, the opponent's piece is sent back to start. Pieces on the same spot as another piece belonging to the player and pieces on marked squares are safe from being sent to start. The player who moves all of their pieces off the board first wins.
(game "Barjis" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "96,9,S,E1,N,11,E,N,W,53,N,W,S,42,W,S,E,8,S,E1,N8" P1 directed:True) (track "Track2" "96,26,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E8" P2 directed:True) (track "Track3" "96,52,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S8" P3 directed:True) (track "Track4" "96,27,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W8" P4 directed:True)}) (hand Each) (dice d:2 from:0 num:6) (piece "Pawn" Each (if (= (trackSite Move steps:(mapEntry "Throw" (count Pips))) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move steps:(mapEntry "Throw" (count Pips))) if:(or (is Empty (to)) (and (is Enemy (who at:(to))) (not (is In (to) (sites "SafeSites"))))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))) (map "Throw" {(pair 0 6) (pair 1 10) (pair 2 2) (pair 3 3) (pair 4 4) (pair 5 25) (pair 6 12)}) (regions "SafeSites" (sites {60 62 16 48 87 89 37 2}))}) (rules (start (place "Pawn" "Hand" count:4)) (play (do (roll) next:(or (forEach Piece) (if (and (is In (mapEntry "Throw" (count Pips)) (array {10 25})) (is Occupied (handSite Mover))) (move (from (handSite Mover)) (to (centrePoint) if:(not (is Friend (who at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to)))))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. One player places all of their pieces on the sixth point of one of the quadrants of the board, and the other player places all of their pieces on the fifth point of the same quadrant. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Players move the pieces along the same track around the board, which ends on the quadrant on the other side of the board from the starting quadrant. When a piece is moved to a space occupied by a piece belonging to the opponent, the opponent's piece is sent back to the starting point. The first player to bear off all of their pieces from the board wins.[Start, "Starting Rules/First Quadrant and Last Quadrant", rules:<
        (start {
            (place Stack "Disc1" 5 count:14)
            (place Stack "Disc2" 4 count:14)
            (place Stack "Disc1" 17 count:1)
            (place Stack "Disc2" 16 count:1)
        })
        >, priority 0] [Dice, "Dice/2 Dice with determinist third die", num:<2> move:<
        (or 
            ("UseDie" ("PieceMove" ("NextSiteOnTrack" (pips))))
            (if (= (value Player Mover) Undefined)
                (or {
                    ("PieceMove" "SiteToMoveOnTrackAtOne")
                    ("PieceMove" "SiteToMoveOnTrackAtTwo")
                    ("PieceMove" "SiteToMoveOnTrackAtThree")
                    ("PieceMove" "SiteToMoveOnTrackAtFour")
                    ("PieceMove" "SiteToMoveOnTrackAtFive")
                    ("PieceMove" "SiteToMoveOnTrackAtSix")
                    }
                    (then (if (not (all DiceUsed)) (and (moveAgain) (set Value Mover 1))))
                )
            )
        )
        >, priority 0] 
(game "Cab e Quinal" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {25 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P2 directed:True)} use:Vertex) (dice d:6 num:3) (hand Each) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move Remove (from)) (if (or (not (is Enemy (who at:(trackSite Move steps:(pips))))) (= 1 (size Stack at:(trackSite Move steps:(pips))))) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))))))}) (rules (start {(place Stack "Disc1" 5 count:15) (place Stack "Disc2" 4 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True) (then (if (or (= (value Player Mover) -1) (not (all DiceUsed))) (moveAgain) (if (and (all DiceUsed) (= (value Player Mover) 1)) (set Value Mover -1))))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. One player places all of their pieces on the sixth point of one of the quadrants of the board, and the other player places all of their pieces on the fifth point of the same quadrant. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Players move the pieces along the same track around the board, which ends on the quadrant on the other side of the board from the starting quadrant. When a piece is moved to a space occupied by a piece belonging to the opponent, the opponent's piece is sent back to the starting point. The first player to bear off all of their pieces from the board wins.[Start, "Starting Rules/First Quadrant", rules:<
        (start {
            (place Stack "Disc1" 5 count:15)
            (place Stack "Disc2" 4 count:15)
        })
        >, priority 1] [Dice, "Dice/3 Dice", num:<3> move:<("UseDie" ("PieceMove" ("NextSiteOnTrack" (pips))))>, priority 1] 
(game "Cab e Quinal" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {25 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P2 directed:True)} use:Vertex) (dice d:6 num:3) (hand Each) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move Remove (from)) (if (or (not (is Enemy (who at:(trackSite Move steps:(pips))))) (= 1 (size Stack at:(trackSite Move steps:(pips))))) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))))))}) (rules (start {(place Stack "Disc1" 5 count:15) (place Stack "Disc2" 4 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True) (then (if (or (= (value Player Mover) -1) (not (all DiceUsed))) (moveAgain) (if (and (all DiceUsed) (= (value Player Mover) 1)) (set Value Mover -1))))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. One player places all of their pieces on the sixth point of one of the quadrants of the board, and the other player places all of their pieces on the fifth point of the same quadrant. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. Players move the pieces along the same track around the board, which ends on the quadrant on the other side of the board from the starting quadrant. When a piece is moved to a space occupied by a piece belonging to the opponent, the opponent's piece is sent back to the starting point. The first player to bear off all of their pieces from the board wins.[Start, "Starting Rules/First Quadrant and Last Quadrant", rules:<
        (start {
            (place Stack "Disc1" 5 count:14)
            (place Stack "Disc2" 4 count:14)
            (place Stack "Disc1" 17 count:1)
            (place Stack "Disc2" 16 count:1)
        })
        >, priority 0] [Dice, "Dice/2 Dice with determinist third die", num:<2> move:<
        (or 
            ("UseDie" ("PieceMove" ("NextSiteOnTrack" (pips))))
            (if (= (value Player Mover) Undefined)
                (or {
                    ("PieceMove" "SiteToMoveOnTrackAtOne")
                    ("PieceMove" "SiteToMoveOnTrackAtTwo")
                    ("PieceMove" "SiteToMoveOnTrackAtThree")
                    ("PieceMove" "SiteToMoveOnTrackAtFour")
                    ("PieceMove" "SiteToMoveOnTrackAtFive")
                    ("PieceMove" "SiteToMoveOnTrackAtSix")
                    }
                    (then (if (not (all DiceUsed)) (and (moveAgain) (set Value Mover 1))))
                )
            )
        )
        >, priority 0] 
(game "Cab e Quinal" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {25 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P2 directed:True)} use:Vertex) (dice d:6 num:3) (hand Each) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move Remove (from)) (if (or (not (is Enemy (who at:(trackSite Move steps:(pips))))) (= 1 (size Stack at:(trackSite Move steps:(pips))))) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))))))}) (rules (start {(place Stack "Disc1" 5 count:15) (place Stack "Disc2" 4 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True) (then (if (or (= (value Player Mover) -1) (not (all DiceUsed))) (moveAgain) (if (and (all DiceUsed) (= (value Player Mover) 1)) (set Value Mover -1))))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))}))) 
Four 3x8 rectangles arranged in a cross with a large empty square in the center. Two teams of two players, or by two players playing with two sets of pieces. The pieces move along the outer track of the board according to the throw of three four-sided dice with values of 1, 2, 5 and 6. The values of each die must be played individually, except in certain cases. Each player has four pieces, which begin on the sixth and seventh space of the central row and the seventh and eight space in the right hand row of the arm of the board belonging to the player. If a piece lands on a space occupied by an opponent, the opponent's piece is sent back to the starting position. If two of a player's pieces are on the same space, they cannot be sent to the beginning. In addition, when three pieces are on the same spaces, if triple sixes are thrown the pieces may move twelve spaces together. The same rule applies for threes and twos, moving six and four, respectively. After completing a circuit of the board, the pieces then move into the central row of squares in the arm where the player began. The player must then move off all of their pieces by an exact roll. If a player has removed all of their pieces from the board and their partner is still playing, the player rolls on what would be their turn and the partner moves according to these rolls in addition to their own turn. The player or team to remove all of their pieces from the board first wins.
(game "Chaupar" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "61,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,54,E1,N7,End" P1 directed:True) (track "Track2" "21,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 directed:True) (track "Track3" "88,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 directed:True) (track "Track4" "32,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 directed:True)}) (dice d:4 faces:{1 2 5 6} num:3) (map "Start" {(pair P1 61) (pair P2 21) (pair P3 88) (pair P4 32)}) (piece "Pawn" Each (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Pawn1" (sites {61 58 59 56})) (place Stack "Pawn2" (sites {21 20 0 1})) (place Stack "Pawn3" (sites {91 88 93 90})) (place Stack "Pawn4" (sites {33 32 49 50}))}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (no Pieces Mover) (if (is Mover P1) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track3" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P3) (if (is Mover P3) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track1" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P1) (if (is Mover P4) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track2" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P2) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track4" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P4)))) (forEach Piece)))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 
Four 3x8 rectangles arranged in a cross with a large empty square in the center. Two teams of two players, or by two players playing with two sets of pieces. The pieces move along the outer track of the board according to the throw of three four-sided dice with values of 1, 2, 5 and 6. The values of each die must be played individually, except in certain cases. Each player has four pieces, which begin on the sixth and seventh space of the central row and the seventh and eight space in the right hand row of the arm of the board belonging to the player. If a piece lands on a space occupied by an opponent, the opponent's piece is sent back to the starting position. If two of a player's pieces are on the same space, they cannot be sent to the beginning. In addition, when three pieces are on the same spaces, if triple sixes are thrown the pieces may move twelve spaces together. The same rule applies for threes and twos, moving six and four, respectively. After completing a circuit of the board, the pieces then move into the central row of squares in the arm where the player began. The player must then move off all of their pieces by an exact roll. If a player has removed all of their pieces from the board and their partner is still playing, the player rolls on what would be their turn and the partner moves according to these rolls in addition to their own turn. The player or team to remove all of their pieces from the board first wins.
(game "Chaupar" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "61,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,54,E1,N7,End" P1 directed:True) (track "Track2" "21,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 directed:True) (track "Track3" "88,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 directed:True) (track "Track4" "32,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 directed:True)}) (dice d:4 faces:{1 2 5 6} num:3) (map "Start" {(pair P1 61) (pair P2 21) (pair P3 88) (pair P4 32)}) (piece "Pawn" Each (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Pawn1" (sites {61 58 59 56})) (place Stack "Pawn2" (sites {21 20 0 1})) (place Stack "Pawn3" (sites {91 88 93 90})) (place Stack "Pawn4" (sites {33 32 49 50}))}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (no Pieces Mover) (if (is Mover P1) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track3" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P3) (if (is Mover P3) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track1" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P1) (if (is Mover P4) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track2" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P2) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track4" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P4)))) (forEach Piece)))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 
Four 3x8 rectangles arranged in a cross with a large empty square in the center. Two teams of two players, or by two players playing with two sets of pieces. The pieces move along the outer track of the board according to the throw of three four-sided dice with values of 1, 2, 5 and 6. The values of each die must be played individually, except in certain cases. Each player has four pieces, which begin on the sixth and seventh space of the central row and the seventh and eight space in the right hand row of the arm of the board belonging to the player. If a piece lands on a space occupied by an opponent, the opponent's piece is sent back to the starting position. If two of a player's pieces are on the same space, they cannot be sent to the beginning. In addition, when three pieces are on the same spaces, if triple sixes are thrown the pieces may move twelve spaces together. The same rule applies for threes and twos, moving six and four, respectively. After completing a circuit of the board, the pieces then move into the central row of squares in the arm where the player began. The player must then move off all of their pieces by an exact roll. If a player has removed all of their pieces from the board and their partner is still playing, the player rolls on what would be their turn and the partner moves according to these rolls in addition to their own turn. The player or team to remove all of their pieces from the board first wins.
(game "Chaupar" (players 4) (equipment {(board (add (hole (merge (shift 0 (/ (- 19 3) 2) (rectangle 3 19)) (shift (/ (- 19 3) 2) 0 (rectangle 19 3))) (poly {{8 8} {8 11} {11 11} {11 8}})) cells:{{8 28 48 68 69 70 71 51 31 11 10 9}}) {(track "Track1" "61,S,E,N,11,E,N,W,53,N,W,S,42,W,S,E,8,54,E1,N7,End" P1 directed:True) (track "Track2" "21,W,S,E,8,S,E,N,11,E,N,W,53,N,W,S,42,W,S1,E7,End" P2 directed:True) (track "Track3" "88,N,W,S,42,W,S,E,8,S,E,N,11,E,N,W,53,N,W1,S7,End" P3 directed:True) (track "Track4" "32,E,N,W,53,N,W,S,42,W,S,E,8,S,E,N,11,E,N1,W7,End" P4 directed:True)}) (dice d:4 faces:{1 2 5 6} num:3) (map "Start" {(pair P1 61) (pair P2 21) (pair P3 88) (pair P4 32)}) (piece "Pawn" Each (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))))}) (rules (start {(set Team 1 {P1 P3}) (set Team 2 {P2 P4}) (place Stack "Pawn1" (sites {61 58 59 56})) (place Stack "Pawn2" (sites {21 20 0 1})) (place Stack "Pawn3" (sites {91 88 93 90})) (place Stack "Pawn4" (sites {33 32 49 50}))}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (no Pieces Mover) (if (is Mover P1) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track3" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track3" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P3) (if (is Mover P3) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track1" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track1" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P1) (if (is Mover P4) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track2" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track2" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P2) (forEach Piece (or (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (or {(is AnyDie 6) (is AnyDie 3) (is AnyDie 2)}) (= 3 (count Pieces of:(mover) in:(sites {(from)})))}) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(* 2 (face 97)))) (then (forEach Level (last From) FromTop (if (is Mover (who at:(last From) level:(level))) (fromTo (from (last From) level:(level)) (to (last To)))))))) (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) "Track4" steps:(pips)) -2) (move Remove (from) level:(level)) (move (from (from) level:(level)) (to (trackSite Move from:(from) "Track4" steps:(pips))))) (then (if (not (all DiceUsed)) (moveAgain)))) (then (forEach Level (last To) FromTop (if (and (is Enemy (who at:(last To) level:(level))) (= 1 (count Pieces of:(who at:(last To) level:(level)) in:(sites {(last To)})))) (fromTo (from (last To) level:(level)) (to (mapEntry "Start" (who at:(last To) level:(level))))))))) P4)))) (forEach Piece)))) (end (if (no Pieces TeamMover) (result TeamMover Win))))) 
2x12 board, with spaces as points, divided in two. Fifteen pieces per player. Two six-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The lowest value of the dice must be played; if it cannot, the player does not move. When a player throws doubles, they play the values on each die, as well as the values on the opposite side of the dice (I.e., double 6 if double 1 is thrown, 5 if 2, 3 if 4). However, the values on the bottom can only be played if all of the top values are played. The first double throw is only played once, but every subsequent double throw is played twice, and the top values must be played twice before using the bottom values. Bottom values do not have to be played, or only some of the bottom values may be played if the player wishes. In addition, an extra throw is granted for the second and subsequent throws of doubles. Players enter their pieces onto opposite sections of the board, and proceed around the board toward the section where the opponent enters the board, and then bearing pieces off the board. A player may not land on a point with two or more of the opponent's pieces. A player's piece may land on a point with a single opponent's piece. The opponent's piece is removed from the board and must enter again. The first player to remove all of their pieces from the board wins.
(game "Contrare Puff" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {27 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die replayDouble:(= 1 (value Player Mover)) if:(!= (pips) 0) (if (= (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain) (if (= 1 (value Player Mover)) (if (and (all DiceEqual) (= 0 (size Array (values Remembered)))) (and (moveAgain) (set Var "PlayOpposite" 1))) (set Value Mover 1)))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) count:15) (place Stack "Disc2" (handSite P2) count:15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll)) next:(if (= 1 (var "PlayOpposite")) (or {(forEach Piece (forEach Value (values Remembered "Opposite") (if (= (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (forEach Piece container:(mover) (forEach Value (values Remembered "Opposite") (if (= (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (move Pass (then (and {(forget Value "Opposite" All) (set Var "PlayOpposite" 0) (set Pending) (moveAgain)})))}) (do (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (= 1 (value Player Mover))}) (and (remember Value "Opposite" (- 7 (face 28))) (remember Value "Opposite" (- 7 (face 28))))) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))))) (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, with spaces as points, divided in two. Fifteen pieces per player. Two six-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The lowest value of the dice must be played; if it cannot, the player does not move. When a player throws doubles, they play the values on each die, as well as the values on the opposite side of the dice (I.e., double 6 if double 1 is thrown, 5 if 2, 3 if 4). However, the values on the bottom can only be played if all of the top values are played. The first double throw is only played once, but every subsequent double throw is played twice, and the top values must be played twice before using the bottom values. Bottom values do not have to be played, or only some of the bottom values may be played if the player wishes. In addition, an extra throw is granted for the second and subsequent throws of doubles. Players enter their pieces onto opposite sections of the board, and proceed around the board toward the section where the opponent enters the board, and then bearing pieces off the board. A player may not land on a point with two or more of the opponent's pieces. A player's piece may land on a point with a single opponent's piece. The opponent's piece is removed from the board and must enter again. The first player to remove all of their pieces from the board wins.
(game "Contrare Puff" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {27 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die replayDouble:(= 1 (value Player Mover)) if:(!= (pips) 0) (if (= (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain) (if (= 1 (value Player Mover)) (if (and (all DiceEqual) (= 0 (size Array (values Remembered)))) (and (moveAgain) (set Var "PlayOpposite" 1))) (set Value Mover 1)))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) count:15) (place Stack "Disc2" (handSite P2) count:15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll)) next:(if (= 1 (var "PlayOpposite")) (or {(forEach Piece (forEach Value (values Remembered "Opposite") (if (= (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (forEach Piece container:(mover) (forEach Value (values Remembered "Opposite") (if (= (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (move Pass (then (and {(forget Value "Opposite" All) (set Var "PlayOpposite" 0) (set Pending) (moveAgain)})))}) (do (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (= 1 (value Player Mover))}) (and (remember Value "Opposite" (- 7 (face 28))) (remember Value "Opposite" (- 7 (face 28))))) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))))) (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, with spaces as points, divided in two. Fifteen pieces per player. Two six-sided die. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. The lowest value of the dice must be played; if it cannot, the player does not move. When a player throws doubles, they play the values on each die, as well as the values on the opposite side of the dice (I.e., double 6 if double 1 is thrown, 5 if 2, 3 if 4). However, the values on the bottom can only be played if all of the top values are played. The first double throw is only played once, but every subsequent double throw is played twice, and the top values must be played twice before using the bottom values. Bottom values do not have to be played, or only some of the bottom values may be played if the player wishes. In addition, an extra throw is granted for the second and subsequent throws of doubles. Players enter their pieces onto opposite sections of the board, and proceed around the board toward the section where the opponent enters the board, and then bearing pieces off the board. A player may not land on a point with two or more of the opponent's pieces. A player's piece may land on a point with a single opponent's piece. The opponent's piece is removed from the board and must enter again. The first player to remove all of their pieces from the board wins.
(game "Contrare Puff" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {26 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {27 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice d:6 num:2) (piece "Disc" Each (forEach Die replayDouble:(= 1 (value Player Mover)) if:(!= (pips) 0) (if (= (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain) (if (= 1 (value Player Mover)) (if (and (all DiceEqual) (= 0 (size Array (values Remembered)))) (and (moveAgain) (set Var "PlayOpposite" 1))) (set Value Mover 1)))))) (hand Each)}) (rules (start {(place Stack "Disc1" (handSite P1) count:15) (place Stack "Disc2" (handSite P2) count:15)}) (play (do (if (or (is Pending) (not (is Prev Mover))) (roll)) next:(if (= 1 (var "PlayOpposite")) (or {(forEach Piece (forEach Value (values Remembered "Opposite") (if (= (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (forEach Piece container:(mover) (forEach Value (values Remembered "Opposite") (if (= (trackSite Move from:(from) steps:(value)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(value)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (and (if (is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite Next)))) (forget Value "Opposite" (value)))))) (then (if (!= 0 (size Array (values Remembered "Opposite"))) (moveAgain) (and {(set Var "PlayOpposite" 0) (set Pending) (moveAgain)}))))) top:True) (move Pass (then (and {(forget Value "Opposite" All) (set Var "PlayOpposite" 0) (set Pending) (moveAgain)})))}) (do (if (and {(= 0 (count MovesThisTurn)) (all DiceEqual) (= 1 (value Player Mover))}) (and (remember Value "Opposite" (- 7 (face 28))) (remember Value "Opposite" (- 7 (face 28))))) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))))) (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Twelve pieces per player. Pieces begin on one half of a player's side of the board (the half to the left of one player, and to the right of the other player), two per space, stacked on top of one another. Three dice. To begin, a player must first unstack their pieces, by rolling the number of the space on which the stack is located, and thus removing the stack, but keeping the piece on the same space. Once complete, pieces move in a track the long way around the board toward the portion where the opponent begins. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. No more than two pieces can occupy a space at a time. When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board. Players attempt to bear off their pieces by rolling the exact number of spaces left on the board, plus one. When unstacking the pieces in the beginning or when bearing off at the end, if the player cannot play their roll but the opponent is able, the opponent may use the roll. The first player to bear off all of their pieces wins.
(game "Doblet" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12 -2} P1 directed:True) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 directed:True)} use:Vertex) (dice d:6 num:3) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -2) (move Remove (from)) (move (from) (to (trackSite Move steps:(pips)) if:(< (size Stack at:(trackSite Move steps:(pips))) 2) (apply (if (is Enemy (who at:(to))) (remove (to))))))))) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2 3 4 5}) count:2 state:1) (place Stack "Disc2" (sites {12 13 14 15 16 17}) count:2 state:1)}) phases:{(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Die if:(!= (pips) 0) (if (= (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) (then (and {(set State at:(last To) 0) (if (not (all DiceUsed)) (moveAgain))}))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (= (state at:(site)) 1))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Piece top:True) (then (if (and (not (was Pass)) (not (all DiceUsed))) (moveAgain))))))} (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Twelve pieces per player. Pieces begin on one half of a player's side of the board (the half to the left of one player, and to the right of the other player), two per space, stacked on top of one another. Three dice. To begin, a player must first unstack their pieces, by rolling the number of the space on which the stack is located, and thus removing the stack, but keeping the piece on the same space. Once complete, pieces move in a track the long way around the board toward the portion where the opponent begins. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. No more than two pieces can occupy a space at a time. When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board. Players attempt to bear off their pieces by rolling the exact number of spaces left on the board, plus one. When unstacking the pieces in the beginning or when bearing off at the end, if the player cannot play their roll but the opponent is able, the opponent may use the roll. The first player to bear off all of their pieces wins.
(game "Doblet" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12 -2} P1 directed:True) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 directed:True)} use:Vertex) (dice d:6 num:3) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -2) (move Remove (from)) (move (from) (to (trackSite Move steps:(pips)) if:(< (size Stack at:(trackSite Move steps:(pips))) 2) (apply (if (is Enemy (who at:(to))) (remove (to))))))))) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2 3 4 5}) count:2 state:1) (place Stack "Disc2" (sites {12 13 14 15 16 17}) count:2 state:1)}) phases:{(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Die if:(!= (pips) 0) (if (= (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) (then (and {(set State at:(last To) 0) (if (not (all DiceUsed)) (moveAgain))}))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (= (state at:(site)) 1))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Piece top:True) (then (if (and (not (was Pass)) (not (all DiceUsed))) (moveAgain))))))} (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Twelve pieces per player. Pieces begin on one half of a player's side of the board (the half to the left of one player, and to the right of the other player), two per space, stacked on top of one another. Three dice. To begin, a player must first unstack their pieces, by rolling the number of the space on which the stack is located, and thus removing the stack, but keeping the piece on the same space. Once complete, pieces move in a track the long way around the board toward the portion where the opponent begins. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. No more than two pieces can occupy a space at a time. When a piece lands on a space occupied by a single piece of the opponent, the opponent's piece is removed from the board. Players attempt to bear off their pieces by rolling the exact number of spaces left on the board, plus one. When unstacking the pieces in the beginning or when bearing off at the end, if the player cannot play their roll but the opponent is able, the opponent may use the roll. The first player to bear off all of their pieces wins.
(game "Doblet" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12 -2} P1 directed:True) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0 -2} P2 directed:True)} use:Vertex) (dice d:6 num:3) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -2) (move Remove (from)) (move (from) (to (trackSite Move steps:(pips)) if:(< (size Stack at:(trackSite Move steps:(pips))) 2) (apply (if (is Enemy (who at:(to))) (remove (to))))))))) (map "StartTrack" {(pair P1 0) (pair P2 12)})}) (rules (start {(place Stack "Disc1" (sites {0 1 2 3 4 5}) count:2 state:1) (place Stack "Disc2" (sites {12 13 14 15 16 17}) count:2 state:1)}) phases:{(phase "UnStacking" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Die if:(!= (pips) 0) (if (= (state at:(trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) 1) (move Select (from (trackSite Move from:(mapEntry "StartTrack" (mover)) steps:(- (pips) 1))) (then (and {(set State at:(last To) 0) (if (not (all DiceUsed)) (moveAgain))}))))))) (nextPhase Mover (all Sites (sites Occupied by:Mover) if:(not (= (state at:(site)) 1))) "BearingOff")) (phase "BearingOff" (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Piece top:True) (then (if (and (not (was Pass)) (not (all DiceUsed))) (moveAgain))))))} (end (if (no Pieces Mover) (result Mover Win))))) 
Played on a nxn board. Each player has n-1 cars, that can move either forward or up and down. Cars can leave the board once they have reached the opposite edge. First player to run out of legal moves wins.[Board, "Board Size/4x4", size :<4>, priority 0] 
(game "Dodgem" (players 2) (equipment {(board (square 3)) (piece "Car" P1 E (if (is In (from) (sites Right)) (move Remove (from)) (move Step (directions {Forward Leftward Rightward}) (to if:(is Empty (to)))))) (piece "Car" P2 N (if (is In (from) (sites Top)) (move Remove (from)) (move Step (directions {Forward Leftward Rightward}) (to if:(is Empty (to))))))}) (rules (start {(place "Car1" (difference (sites Left) (sites {"A1"}))) (place "Car2" (difference (sites Bottom) (sites {"A1"})))}) (play (forEach Piece)) (end (if (no Pieces Mover) (result Mover Win))))) 
Played on a nxn board. Each player has n-1 cars, that can move either forward or up and down. Cars can leave the board once they have reached the opposite edge. First player to run out of legal moves wins.[Board, "Board Size/8x8", size :<8>, priority 0] 
(game "Dodgem" (players 2) (equipment {(board (square 3)) (piece "Car" P1 E (if (is In (from) (sites Right)) (move Remove (from)) (move Step (directions {Forward Leftward Rightward}) (to if:(is Empty (to)))))) (piece "Car" P2 N (if (is In (from) (sites Top)) (move Remove (from)) (move Step (directions {Forward Leftward Rightward}) (to if:(is Empty (to))))))}) (rules (start {(place "Car1" (difference (sites Left) (sites {"A1"}))) (place "Car2" (difference (sites Bottom) (sites {"A1"})))}) (play (forEach Piece)) (end (if (no Pieces Mover) (result Mover Win))))) 
Played on a nxn board. Each player has n-1 cars, that can move either forward or up and down. Cars can leave the board once they have reached the opposite edge. First player to run out of legal moves wins.[Board, "Board Size/3x3", size :<3>, priority 1] 
(game "Dodgem" (players 2) (equipment {(board (square 3)) (piece "Car" P1 E (if (is In (from) (sites Right)) (move Remove (from)) (move Step (directions {Forward Leftward Rightward}) (to if:(is Empty (to)))))) (piece "Car" P2 N (if (is In (from) (sites Top)) (move Remove (from)) (move Step (directions {Forward Leftward Rightward}) (to if:(is Empty (to))))))}) (rules (start {(place "Car1" (difference (sites Left) (sites {"A1"}))) (place "Car2" (difference (sites Bottom) (sites {"A1"})))}) (play (forEach Piece)) (end (if (no Pieces Mover) (result Mover Win))))) 
Four players. Circular board, with 24 semi-circular sockets along the circumference, divided into four sections of six. Twelve pieces per player; the player's colors are green, red, black, and white, the sections to which they enter are in that order anti-clockwise around the board. Three seven-sided dice. Play proceeds in an anti-clockwise fashion around the board, as is the order of player turns. Players enter their pieces on the board according to the throws of the dice. The player must enter all of their pieces, and then attempt to move all of their pieces in the section of the board belonging to the player sitting opposite them. Once the player achieves this, they begin bearing their pieces off the board. When a piece lands on a spot occupied by a single piece belonging to the opponent, the opponent's piece is returned to the place where it started. When a player bears off all their pieces, they win.
(game "El Mundo" (players 4) (equipment {(board (concentric {24}) {(track "Track1" {24 0 2 4 6 8 10 12 14 16 18 20 22 23 21 19 17 15 13} P1 directed:True) (track "Track2" {25 12 14 16 18 20 22 23 21 19 17 15 13 11 9 7 5 3 1} P2 directed:True) (track "Track3" {26 23 21 19 17 15 13 11 9 7 5 3 1 0 2 4 6 8 10} P3 directed:True) (track "Track4" {27 11 9 7 5 3 1 0 2 4 6 8 10 12 14 16 18 20 22} P4 directed:True)} use:Vertex) (dice d:7 num:3) (regions "Mundo" P1 {23 21 19 17 15 13}) (regions "Mundo" P2 {11 9 7 5 3 1}) (regions "Mundo" P3 {0 2 4 6 8 10}) (regions "Mundo" P4 {12 14 16 18 20 22}) (piece "Marker" Each (forEach Die if:(!= (pips) 0) (if (and (no Pieces Mover in:(union (sites Hand Mover) (difference (sites Board) (sites Mover "FinalQuadrant")))) (= (trackSite Move from:(from) steps:(pips)) -1)) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (map "Entry" {(pair P1 0) (pair P2 6) (pair P3 12) (pair P4 18)}) (hand Each) (regions "FinalQuadrant" P1 (sites {13 15 17 19 21 23})) (regions "FinalQuadrant" P2 (sites {1 3 5 7 9 11})) (regions "FinalQuadrant" P3 (sites {10 8 6 4 2 0})) (regions "FinalQuadrant" P4 (sites {22 20 18 16 14 12}))}) (rules (start {(place Stack "Marker1" (handSite P1) count:12) (place Stack "Marker2" (handSite P2) count:12) (place Stack "Marker3" (handSite P3) count:12) (place Stack "Marker4" (handSite P4) count:12)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four players. Circular board, with 24 semi-circular sockets along the circumference, divided into four sections of six. Twelve pieces per player; the player's colors are green, red, black, and white, the sections to which they enter are in that order anti-clockwise around the board. Three seven-sided dice. Play proceeds in an anti-clockwise fashion around the board, as is the order of player turns. Players enter their pieces on the board according to the throws of the dice. The player must enter all of their pieces, and then attempt to move all of their pieces in the section of the board belonging to the player sitting opposite them. Once the player achieves this, they begin bearing their pieces off the board. When a piece lands on a spot occupied by a single piece belonging to the opponent, the opponent's piece is returned to the place where it started. When a player bears off all their pieces, they win.
(game "El Mundo" (players 4) (equipment {(board (concentric {24}) {(track "Track1" {24 0 2 4 6 8 10 12 14 16 18 20 22 23 21 19 17 15 13} P1 directed:True) (track "Track2" {25 12 14 16 18 20 22 23 21 19 17 15 13 11 9 7 5 3 1} P2 directed:True) (track "Track3" {26 23 21 19 17 15 13 11 9 7 5 3 1 0 2 4 6 8 10} P3 directed:True) (track "Track4" {27 11 9 7 5 3 1 0 2 4 6 8 10 12 14 16 18 20 22} P4 directed:True)} use:Vertex) (dice d:7 num:3) (regions "Mundo" P1 {23 21 19 17 15 13}) (regions "Mundo" P2 {11 9 7 5 3 1}) (regions "Mundo" P3 {0 2 4 6 8 10}) (regions "Mundo" P4 {12 14 16 18 20 22}) (piece "Marker" Each (forEach Die if:(!= (pips) 0) (if (and (no Pieces Mover in:(union (sites Hand Mover) (difference (sites Board) (sites Mover "FinalQuadrant")))) (= (trackSite Move from:(from) steps:(pips)) -1)) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (map "Entry" {(pair P1 0) (pair P2 6) (pair P3 12) (pair P4 18)}) (hand Each) (regions "FinalQuadrant" P1 (sites {13 15 17 19 21 23})) (regions "FinalQuadrant" P2 (sites {1 3 5 7 9 11})) (regions "FinalQuadrant" P3 (sites {10 8 6 4 2 0})) (regions "FinalQuadrant" P4 (sites {22 20 18 16 14 12}))}) (rules (start {(place Stack "Marker1" (handSite P1) count:12) (place Stack "Marker2" (handSite P2) count:12) (place Stack "Marker3" (handSite P3) count:12) (place Stack "Marker4" (handSite P4) count:12)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))) (end (if (no Pieces Mover) (result Mover Win))))) 
Four players. Circular board, with 24 semi-circular sockets along the circumference, divided into four sections of six. Twelve pieces per player; the player's colors are green, red, black, and white, the sections to which they enter are in that order anti-clockwise around the board. Three seven-sided dice. Play proceeds in an anti-clockwise fashion around the board, as is the order of player turns. Players enter their pieces on the board according to the throws of the dice. The player must enter all of their pieces, and then attempt to move all of their pieces in the section of the board belonging to the player sitting opposite them. Once the player achieves this, they begin bearing their pieces off the board. When a piece lands on a spot occupied by a single piece belonging to the opponent, the opponent's piece is returned to the place where it started. When a player bears off all their pieces, they win.
(game "El Mundo" (players 4) (equipment {(board (concentric {24}) {(track "Track1" {24 0 2 4 6 8 10 12 14 16 18 20 22 23 21 19 17 15 13} P1 directed:True) (track "Track2" {25 12 14 16 18 20 22 23 21 19 17 15 13 11 9 7 5 3 1} P2 directed:True) (track "Track3" {26 23 21 19 17 15 13 11 9 7 5 3 1 0 2 4 6 8 10} P3 directed:True) (track "Track4" {27 11 9 7 5 3 1 0 2 4 6 8 10 12 14 16 18 20 22} P4 directed:True)} use:Vertex) (dice d:7 num:3) (regions "Mundo" P1 {23 21 19 17 15 13}) (regions "Mundo" P2 {11 9 7 5 3 1}) (regions "Mundo" P3 {0 2 4 6 8 10}) (regions "Mundo" P4 {12 14 16 18 20 22}) (piece "Marker" Each (forEach Die if:(!= (pips) 0) (if (and (no Pieces Mover in:(union (sites Hand Mover) (difference (sites Board) (sites Mover "FinalQuadrant")))) (= (trackSite Move from:(from) steps:(pips)) -1)) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (map "Entry" {(pair P1 0) (pair P2 6) (pair P3 12) (pair P4 18)}) (hand Each) (regions "FinalQuadrant" P1 (sites {13 15 17 19 21 23})) (regions "FinalQuadrant" P2 (sites {1 3 5 7 9 11})) (regions "FinalQuadrant" P3 (sites {10 8 6 4 2 0})) (regions "FinalQuadrant" P4 (sites {22 20 18 16 14 12}))}) (rules (start {(place Stack "Marker1" (handSite P1) count:12) (place Stack "Marker2" (handSite P2) count:12) (place Stack "Marker3" (handSite P3) count:12) (place Stack "Marker4" (handSite P4) count:12)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True)))) (end (if (no Pieces Mover) (result Mover Win))))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, toward the point where the opponent's pieces begin, and bearing off the board from there. A player cannot have two of their pieces on the same spot in the starting quadrant. When a piece lands on the same space as a single opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. If players move their pieces such that they fill up all the points in a quadrant, and the other fills up all of the points in an adjacent quadrant such that neither player can move, the game is a draw. It is a prime win when one player has twelve pieces arranged on consecutive points so that the other player cannot pass them. When the player sends four pieces back to the beginning while preserving this state, it is a prime win.
(game "Emperador" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 directed:True)} use:Vertex) (dice d:6 num:3) (hand Each) (regions "StartingQuadrant" P1 (sites {0 1 2 3 4 5})) (regions "StartingQuadrant" P2 (sites {12 13 14 15 16 17})) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move Remove (from)) (if (or {(is Empty (trackSite Move steps:(pips))) (and (is Friend (who at:(trackSite Move steps:(pips)))) (if (is In (to) (sites Mover "StartingQuadrant")) (not (= 1 (size Stack at:(trackSite Move steps:(pips))))) True)) (and (is Enemy (who at:(trackSite Move steps:(pips)))) (= 1 (size Stack at:(trackSite Move steps:(pips)))))}) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))))))}) (rules (start {(place Stack "Disc1" 0 count:15) (place Stack "Disc2" 12 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True) (then (if (not (all DiceUsed)) (moveAgain)))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, toward the point where the opponent's pieces begin, and bearing off the board from there. A player cannot have two of their pieces on the same spot in the starting quadrant. When a piece lands on the same space as a single opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. If players move their pieces such that they fill up all the points in a quadrant, and the other fills up all of the points in an adjacent quadrant such that neither player can move, the game is a draw. It is a prime win when one player has twelve pieces arranged on consecutive points so that the other player cannot pass them. When the player sends four pieces back to the beginning while preserving this state, it is a prime win.
(game "Emperador" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 directed:True)} use:Vertex) (dice d:6 num:3) (hand Each) (regions "StartingQuadrant" P1 (sites {0 1 2 3 4 5})) (regions "StartingQuadrant" P2 (sites {12 13 14 15 16 17})) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move Remove (from)) (if (or {(is Empty (trackSite Move steps:(pips))) (and (is Friend (who at:(trackSite Move steps:(pips)))) (if (is In (to) (sites Mover "StartingQuadrant")) (not (= 1 (size Stack at:(trackSite Move steps:(pips))))) True)) (and (is Enemy (who at:(trackSite Move steps:(pips)))) (= 1 (size Stack at:(trackSite Move steps:(pips)))))}) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))))))}) (rules (start {(place Stack "Disc1" 0 count:15) (place Stack "Disc2" 12 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True) (then (if (not (all DiceUsed)) (moveAgain)))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Three six-sided dice. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. One player begins with all of their pieces on the space furthest to the left on their side, the other with their pieces on the point directly opposite it. Pieces move in opposite directions around the board, toward the point where the opponent's pieces begin, and bearing off the board from there. A player cannot have two of their pieces on the same spot in the starting quadrant. When a piece lands on the same space as a single opponent's piece, the opponent's piece is sent back to where it began. The first person to bear off all their pieces wins. If players move their pieces such that they fill up all the points in a quadrant, and the other fills up all of the points in an adjacent quadrant such that neither player can move, the game is a draw. It is a prime win when one player has twelve pieces arranged on consecutive points so that the other player cannot pass them. When the player sends four pieces back to the beginning while preserving this state, it is a prime win.
(game "Emperador" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {24 0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {25 12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 directed:True)} use:Vertex) (dice d:6 num:3) (hand Each) (regions "StartingQuadrant" P1 (sites {0 1 2 3 4 5})) (regions "StartingQuadrant" P2 (sites {12 13 14 15 16 17})) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move steps:(pips)) -1) (move Remove (from)) (if (or {(is Empty (trackSite Move steps:(pips))) (and (is Friend (who at:(trackSite Move steps:(pips)))) (if (is In (to) (sites Mover "StartingQuadrant")) (not (= 1 (size Stack at:(trackSite Move steps:(pips))))) True)) (and (is Enemy (who at:(trackSite Move steps:(pips)))) (= 1 (size Stack at:(trackSite Move steps:(pips)))))}) (move (from) (to (trackSite Move steps:(pips)) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (handSite (who at:(to))))))))))))}) (rules (start {(place Stack "Disc1" 0 count:15) (place Stack "Disc2" 12 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(or (forEach Piece top:True) (forEach Piece container:(mover) top:True) (then (if (not (all DiceUsed)) (moveAgain)))))) (end {(if (no Pieces Mover) (result Mover Win)) (if (and (no Moves P1) (no Moves P2)) (result Mover Draw))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Play begins with thirteen pieces on the seventh point of the track, and two pieces on the twelfth point. Three six-sided dice. Players move pieces according to the value of each individual die. Play moves around the board through starting from the quadrant where the pieces begin, through the one where the opponent's pieces begin, and then through the remaining quadrant on the opponent's side of the board, where the pieces are borne off the board. When a piece lands on a spot occupied by a single piece of the opponent, the opponent's piece is sent back to its starting quadrant. If a player's piece is sent back to start, but all of the spaces in their starting quadrant are occupied by the opponent's pieces, the player loses automatically. Also, any roll that allows the player to only move to spaces occupied by the opponent results in an automatic loss for the player. Otherwise, the first player to bear off all their pieces wins.
(game "Fallas" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 directed:True)} use:Vertex) (dice d:6 num:3) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (if (is Enemy (who at:(to))) (if (= (count Sites in:(difference (sites Next "StartQuadrant") (union (sites {(to)}) (sites Occupied by:Mover)))) 0) (and (remove (to)) (trigger "StartQuadrantFull" Next)) (fromTo (from (to)) (to (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:0)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:0))))) (regionSite (sites Next "StartQuadrant") index:0) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:1)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:1))))) (regionSite (sites Next "StartQuadrant") index:1) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:2)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:2))))) (regionSite (sites Next "StartQuadrant") index:2) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:3)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:3))))) (regionSite (sites Next "StartQuadrant") index:3) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:4)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:4))))) (regionSite (sites Next "StartQuadrant") index:4) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:5)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:5))))) (regionSite (sites Next "StartQuadrant") index:5) (regionSite (sites Next "StartQuadrant") index:6))))))))))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (regions "StartQuadrant" P1 (sites {6 7 8 9 10 11})) (regions "StartQuadrant" P2 (sites {18 19 20 21 22 23}))}) (rules (start {(place Stack "Disc1" 7 count:13) (place Stack "Disc1" 11 count:2) (place Stack "Disc2" 19 count:13) (place Stack "Disc2" 23 count:2)}) (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Piece))) (end {(if (no Pieces Mover) (result Mover Win)) (if (is Triggered "StartQuadrantFull" P1) (result P2 Win)) (if (is Triggered "StartQuadrantFull" P2) (result P1 Win)) (if (and (not (is Prev Mover)) (no Moves Mover)) (result Mover Loss))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Play begins with thirteen pieces on the seventh point of the track, and two pieces on the twelfth point. Three six-sided dice. Players move pieces according to the value of each individual die. Play moves around the board through starting from the quadrant where the pieces begin, through the one where the opponent's pieces begin, and then through the remaining quadrant on the opponent's side of the board, where the pieces are borne off the board. When a piece lands on a spot occupied by a single piece of the opponent, the opponent's piece is sent back to its starting quadrant. If a player's piece is sent back to start, but all of the spaces in their starting quadrant are occupied by the opponent's pieces, the player loses automatically. Also, any roll that allows the player to only move to spaces occupied by the opponent results in an automatic loss for the player. Otherwise, the first player to bear off all their pieces wins.
(game "Fallas" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 directed:True)} use:Vertex) (dice d:6 num:3) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (if (is Enemy (who at:(to))) (if (= (count Sites in:(difference (sites Next "StartQuadrant") (union (sites {(to)}) (sites Occupied by:Mover)))) 0) (and (remove (to)) (trigger "StartQuadrantFull" Next)) (fromTo (from (to)) (to (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:0)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:0))))) (regionSite (sites Next "StartQuadrant") index:0) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:1)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:1))))) (regionSite (sites Next "StartQuadrant") index:1) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:2)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:2))))) (regionSite (sites Next "StartQuadrant") index:2) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:3)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:3))))) (regionSite (sites Next "StartQuadrant") index:3) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:4)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:4))))) (regionSite (sites Next "StartQuadrant") index:4) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:5)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:5))))) (regionSite (sites Next "StartQuadrant") index:5) (regionSite (sites Next "StartQuadrant") index:6))))))))))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (regions "StartQuadrant" P1 (sites {6 7 8 9 10 11})) (regions "StartQuadrant" P2 (sites {18 19 20 21 22 23}))}) (rules (start {(place Stack "Disc1" 7 count:13) (place Stack "Disc1" 11 count:2) (place Stack "Disc2" 19 count:13) (place Stack "Disc2" 23 count:2)}) (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Piece))) (end {(if (no Pieces Mover) (result Mover Win)) (if (is Triggered "StartQuadrantFull" P1) (result P2 Win)) (if (is Triggered "StartQuadrantFull" P2) (result P1 Win)) (if (and (not (is Prev Mover)) (no Moves Mover)) (result Mover Loss))}))) 
2x12 board, divided in half. Spaces on each side take the form of semi-circular sockets, into which the pieces fit. Fifteen pieces per player. Play begins with thirteen pieces on the seventh point of the track, and two pieces on the twelfth point. Three six-sided dice. Players move pieces according to the value of each individual die. Play moves around the board through starting from the quadrant where the pieces begin, through the one where the opponent's pieces begin, and then through the remaining quadrant on the opponent's side of the board, where the pieces are borne off the board. When a piece lands on a spot occupied by a single piece of the opponent, the opponent's piece is sent back to its starting quadrant. If a player's piece is sent back to start, but all of the spaces in their starting quadrant are occupied by the opponent's pieces, the player loses automatically. Also, any roll that allows the player to only move to spaces occupied by the opponent results in an automatic loss for the player. Otherwise, the first player to bear off all their pieces wins.
(game "Fallas" (players 2) (equipment {(board (merge {(rectangle 1 6) (shift 7 0 (rectangle 1 6)) (shift 0 6 (rectangle 1 6)) (shift 7 6 (rectangle 1 6))}) {(track "Track1" {0 1 2 3 4 5 6 7 8 9 10 11 23 22 21 20 19 18 17 16 15 14 13 12} P1 directed:True) (track "Track2" {12 13 14 15 16 17 18 19 20 21 22 23 11 10 9 8 7 6 5 4 3 2 1 0} P2 directed:True)} use:Vertex) (dice d:6 num:3) (piece "Disc" Each (forEach Die if:(!= (pips) 0) (if (= (trackSite Move from:(from) steps:(pips)) -1) (move Remove (from)) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply (if (is Enemy (who at:(to))) (if (= (count Sites in:(difference (sites Next "StartQuadrant") (union (sites {(to)}) (sites Occupied by:Mover)))) 0) (and (remove (to)) (trigger "StartQuadrantFull" Next)) (fromTo (from (to)) (to (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:0)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:0))))) (regionSite (sites Next "StartQuadrant") index:0) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:1)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:1))))) (regionSite (sites Next "StartQuadrant") index:1) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:2)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:2))))) (regionSite (sites Next "StartQuadrant") index:2) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:3)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:3))))) (regionSite (sites Next "StartQuadrant") index:3) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:4)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:4))))) (regionSite (sites Next "StartQuadrant") index:4) (if (and (!= (to) (regionSite (sites Next "StartQuadrant") index:5)) (not (is Friend (who at:(regionSite (sites Next "StartQuadrant") index:5))))) (regionSite (sites Next "StartQuadrant") index:5) (regionSite (sites Next "StartQuadrant") index:6))))))))))))))) (then (if (not (all DiceUsed)) (moveAgain))))) (regions "StartQuadrant" P1 (sites {6 7 8 9 10 11})) (regions "StartQuadrant" P2 (sites {18 19 20 21 22 23}))}) (rules (start {(place Stack "Disc1" 7 count:13) (place Stack "Disc1" 11 count:2) (place Stack "Disc2" 19 count:13) (place Stack "Disc2" 23 count:2)}) (play (do (if (not (is Prev Mover)) (roll)) next:(forEach Piece))) (end {(if (no Pieces Mover) (result Mover Win)) (if (is Triggered "StartQuadrantFull" P1) (result P2 Win)) (if (is Triggered "StartQuadrantFull" P2) (result P1 Win)) (if (and (not (is Prev Mover)) (no Moves Mover)) (result Mover Loss))}))) 
Played on a standard Backgammon board. Each player has fifteen pieces, which all begin on the leftmost point on each player's side of the board. Both players move anti-clockwise around the board. Both players roll one die, and the player with the higher number plays first. If it is played after another game, the winner of the previous game goes first. The player rolls two die and begins play with that roll. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, they are played twice. If a player can only play one number but not both, they must play the higher number, if possible. To begin, each player may only move one piece, until it passes the opponent's starting point, after which any pieces can be moved. Pieces may only be moved to an empty point or one occupied by another piece belonging to the player. Players may not block all six points in either player's starting quadrant. If a player has blocked six points in a row, and the opponent has moved all of their pieces to the point adjacent to the blocked points, the player must move to unblock one of the points. Once a player has moved all of their pieces into the final six points of their track, they may begin bearing off. They do so by rolling a number equal to the number of points left in the track, plus one. If they cannot bear off, they must make a legal move with a piece that cannot bear off. If no such move is available, then they must bear off the piece which is furthest from the goal. The first player to bear off all their pieces wins the game and gets one point. If the winner bears off all their pieces before the opponent bears off any, they get two points.
(game "Fevga" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P1 directed:True) (track "Track2" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 directed:True)} use:Vertex) (dice num:2) (regions "Home" P1 {20 21 22 23 24 25}) (regions "Home" P2 {7 8 9 10 11 12}) (regions "Side" P1 {0 1 2 3 4 5 6 7 8 9 10 11 12}) (regions "Side" P2 {13 14 15 16 17 18 19 20 21 22 23 24 25}) (map {(pair 1 0) (pair 2 25)}) (piece "Disc" Each (forEach Die replayDouble:True if:(and {(!= (pips) 0) (!= (trackSite Move from:(from) steps:(pips)) -1) (!= (trackSite Move from:(from) steps:(pips)) -2)}) (if (or {(not (= (from) (mapEntry (mover)))) (and (= (from) (mapEntry (mover))) (!= (topLevel at:(from)) 13)) (not (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "Side"))))}) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(not (is Enemy (who at:(to)))))))))}) (rules (start {(place Stack "Disc1" 0 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "Home"))) (forEach Die replayDouble:True if:(!= (pips) 0) (forEach Site (sites Occupied by:Mover) (if (and (is Occupied (site)) (!= (trackSite Move from:(site) steps:(pips)) -1)) (if (= (trackSite Move from:(site) steps:(pips)) -2) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(not (is Enemy (who at:(to)))))))) noMoveYet:(firstMoveOnTrack "Track" Mover (if (and (is Friend (who at:(site))) (< (trackSite Move from:(site) steps:(pips)) 0)) (move Remove (site)))) (then (if (not (all DiceUsed)) (moveAgain))))) (max Distance "Track" Mover (forEach Piece top:True (then (if (not (all DiceUsed)) (moveAgain)))))))) (end (if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack in:(sites Occupied by:P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack in:(sites Occupied by:P1)) 15) 2 1) 0))}))))) 
Played on a standard Backgammon board. Each player has fifteen pieces, which all begin on the leftmost point on each player's side of the board. Both players move anti-clockwise around the board. Both players roll one die, and the player with the higher number plays first. If it is played after another game, the winner of the previous game goes first. The player rolls two die and begins play with that roll. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, they are played twice. If a player can only play one number but not both, they must play the higher number, if possible. To begin, each player may only move one piece, until it passes the opponent's starting point, after which any pieces can be moved. Pieces may only be moved to an empty point or one occupied by another piece belonging to the player. Players may not block all six points in either player's starting quadrant. If a player has blocked six points in a row, and the opponent has moved all of their pieces to the point adjacent to the blocked points, the player must move to unblock one of the points. Once a player has moved all of their pieces into the final six points of their track, they may begin bearing off. They do so by rolling a number equal to the number of points left in the track, plus one. If they cannot bear off, they must make a legal move with a piece that cannot bear off. If no such move is available, then they must bear off the piece which is furthest from the goal. The first player to bear off all their pieces wins the game and gets one point. If the winner bears off all their pieces before the opponent bears off any, they get two points.
(game "Fevga" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P1 directed:True) (track "Track2" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 directed:True)} use:Vertex) (dice num:2) (regions "Home" P1 {20 21 22 23 24 25}) (regions "Home" P2 {7 8 9 10 11 12}) (regions "Side" P1 {0 1 2 3 4 5 6 7 8 9 10 11 12}) (regions "Side" P2 {13 14 15 16 17 18 19 20 21 22 23 24 25}) (map {(pair 1 0) (pair 2 25)}) (piece "Disc" Each (forEach Die replayDouble:True if:(and {(!= (pips) 0) (!= (trackSite Move from:(from) steps:(pips)) -1) (!= (trackSite Move from:(from) steps:(pips)) -2)}) (if (or {(not (= (from) (mapEntry (mover)))) (and (= (from) (mapEntry (mover))) (!= (topLevel at:(from)) 13)) (not (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "Side"))))}) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(not (is Enemy (who at:(to)))))))))}) (rules (start {(place Stack "Disc1" 0 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "Home"))) (forEach Die replayDouble:True if:(!= (pips) 0) (forEach Site (sites Occupied by:Mover) (if (and (is Occupied (site)) (!= (trackSite Move from:(site) steps:(pips)) -1)) (if (= (trackSite Move from:(site) steps:(pips)) -2) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(not (is Enemy (who at:(to)))))))) noMoveYet:(firstMoveOnTrack "Track" Mover (if (and (is Friend (who at:(site))) (< (trackSite Move from:(site) steps:(pips)) 0)) (move Remove (site)))) (then (if (not (all DiceUsed)) (moveAgain))))) (max Distance "Track" Mover (forEach Piece top:True (then (if (not (all DiceUsed)) (moveAgain)))))))) (end (if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack in:(sites Occupied by:P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack in:(sites Occupied by:P1)) 15) 2 1) 0))}))))) 
Played on a standard Backgammon board. Each player has fifteen pieces, which all begin on the leftmost point on each player's side of the board. Both players move anti-clockwise around the board. Both players roll one die, and the player with the higher number plays first. If it is played after another game, the winner of the previous game goes first. The player rolls two die and begins play with that roll. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When doubles are thrown, they are played twice. If a player can only play one number but not both, they must play the higher number, if possible. To begin, each player may only move one piece, until it passes the opponent's starting point, after which any pieces can be moved. Pieces may only be moved to an empty point or one occupied by another piece belonging to the player. Players may not block all six points in either player's starting quadrant. If a player has blocked six points in a row, and the opponent has moved all of their pieces to the point adjacent to the blocked points, the player must move to unblock one of the points. Once a player has moved all of their pieces into the final six points of their track, they may begin bearing off. They do so by rolling a number equal to the number of points left in the track, plus one. If they cannot bear off, they must make a legal move with a piece that cannot bear off. If no such move is available, then they must bear off the piece which is furthest from the goal. The first player to bear off all their pieces wins the game and gets one point. If the winner bears off all their pieces before the opponent bears off any, they get two points.
(game "Fevga" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {0 1 2 3 4 5 7 8 9 10 11 12 25 24 23 22 21 20 18 17 16 15 14 13 -2} P1 directed:True) (track "Track2" {25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12 -2} P2 directed:True)} use:Vertex) (dice num:2) (regions "Home" P1 {20 21 22 23 24 25}) (regions "Home" P2 {7 8 9 10 11 12}) (regions "Side" P1 {0 1 2 3 4 5 6 7 8 9 10 11 12}) (regions "Side" P2 {13 14 15 16 17 18 19 20 21 22 23 24 25}) (map {(pair 1 0) (pair 2 25)}) (piece "Disc" Each (forEach Die replayDouble:True if:(and {(!= (pips) 0) (!= (trackSite Move from:(from) steps:(pips)) -1) (!= (trackSite Move from:(from) steps:(pips)) -2)}) (if (or {(not (= (from) (mapEntry (mover)))) (and (= (from) (mapEntry (mover))) (!= (topLevel at:(from)) 13)) (not (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "Side"))))}) (move (from (from)) (to (trackSite Move from:(from) steps:(pips)) if:(not (is Enemy (who at:(to)))))))))}) (rules (start {(place Stack "Disc1" 0 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Mover "Home"))) (forEach Die replayDouble:True if:(!= (pips) 0) (forEach Site (sites Occupied by:Mover) (if (and (is Occupied (site)) (!= (trackSite Move from:(site) steps:(pips)) -1)) (if (= (trackSite Move from:(site) steps:(pips)) -2) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(not (is Enemy (who at:(to)))))))) noMoveYet:(firstMoveOnTrack "Track" Mover (if (and (is Friend (who at:(site))) (< (trackSite Move from:(site) steps:(pips)) 0)) (move Remove (site)))) (then (if (not (all DiceUsed)) (moveAgain))))) (max Distance "Track" Mover (forEach Piece top:True (then (if (not (all DiceUsed)) (moveAgain)))))))) (end (if (no Pieces Mover) (byScore {(score P1 (if (is Mover P1) (if (= (size Stack in:(sites Occupied by:P2)) 15) 2 1) 0)) (score P2 (if (is Mover P2) (if (= (size Stack in:(sites Occupied by:P1)) 15) 2 1) 0))}))))) 
The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has fifteen pieces, which all begin on the first point of their track. Three dice are used. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When a player rolls triples, the throw is played three times. If a player throws a pair among the three dice, they play the dice as normal if the third die has a greater value than the value which appears twice. If the value of the third die is lower, the player plays the doubles twice and the single value once. When a piece lands on a point with a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the quadrant of the board from which it began. When a piece reaches the end of the track, it may bear off the board with a throw greater than the number of points remaining in the track. The player who bears off all their pieces first wins.
(game "Garanguet" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice num:3) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {7 8 9 10 11 12}) (regions "Home" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 12 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(/ (count Pips) 3)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(/ (count Pips) 3)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (< (value Player Mover) 8) (and (moveAgain) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover))))) (set Value Mover 0)))) (if (or {(and (= (face 26) (face 27)) (> (face 26) (face 28))) (and (= (face 26) (face 28)) (> (face 26) (face 27))) (and (= (face 27) (face 28)) (> (face 27) (face 26)))}) (or (if (not (and (= (value Player Mover) 0) (!= (count MovesThisTurn) 0))) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 26) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 26) (face 27)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 26) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 26) (face 27)))) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (and (if (< (count MovesThisTurn) 4) (moveAgain)) (if (< (value Player Mover) 3) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))) (set Value Mover 0)))))) (if (or (or (= (count MovesThisTurn) (value Player Mover)) (and (= (count MovesThisTurn) 0) (< (value Player Mover) 0))) (and (!= (count MovesThisTurn) 0) (= (value Player Mover) 0))) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 28) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 27) (face 26)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 28) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 27) (face 26)))) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (< (count MovesThisTurn) 4) (moveAgain) (set Value Mover 0)))))) (forEach Die if:(!= (pips) 0) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(pips)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (not (all DiceUsed)) (moveAgain))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has fifteen pieces, which all begin on the first point of their track. Three dice are used. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When a player rolls triples, the throw is played three times. If a player throws a pair among the three dice, they play the dice as normal if the third die has a greater value than the value which appears twice. If the value of the third die is lower, the player plays the doubles twice and the single value once. When a piece lands on a point with a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the quadrant of the board from which it began. When a piece reaches the end of the track, it may bear off the board with a throw greater than the number of points remaining in the track. The player who bears off all their pieces first wins.
(game "Garanguet" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice num:3) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {7 8 9 10 11 12}) (regions "Home" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 12 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(/ (count Pips) 3)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(/ (count Pips) 3)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (< (value Player Mover) 8) (and (moveAgain) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover))))) (set Value Mover 0)))) (if (or {(and (= (face 26) (face 27)) (> (face 26) (face 28))) (and (= (face 26) (face 28)) (> (face 26) (face 27))) (and (= (face 27) (face 28)) (> (face 27) (face 26)))}) (or (if (not (and (= (value Player Mover) 0) (!= (count MovesThisTurn) 0))) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 26) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 26) (face 27)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 26) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 26) (face 27)))) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (and (if (< (count MovesThisTurn) 4) (moveAgain)) (if (< (value Player Mover) 3) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))) (set Value Mover 0)))))) (if (or (or (= (count MovesThisTurn) (value Player Mover)) (and (= (count MovesThisTurn) 0) (< (value Player Mover) 0))) (and (!= (count MovesThisTurn) 0) (= (value Player Mover) 0))) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 28) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 27) (face 26)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 28) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 27) (face 26)))) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (< (count MovesThisTurn) 4) (moveAgain) (set Value Mover 0)))))) (forEach Die if:(!= (pips) 0) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(pips)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (not (all DiceUsed)) (moveAgain))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
The game is played on a board with twelve points on either side. The points form a continuous track in a horseshoe shape; each player progresses in opposite directions (one from their bottom right to the top right, the other from their bottom left to their top left). Each player has fifteen pieces, which all begin on the first point of their track. Three dice are used. Players move according to the number on each die by moving one piece the value on one die then another piece the value on the other die, or by moving one piece the value of one die and then the value of the other. When a player rolls triples, the throw is played three times. If a player throws a pair among the three dice, they play the dice as normal if the third die has a greater value than the value which appears twice. If the value of the third die is lower, the player plays the doubles twice and the single value once. When a piece lands on a point with a single piece belonging to the opponent, the opponent's piece is removed from the board and must enter again from the quadrant of the board from which it began. When a piece reaches the end of the track, it may bear off the board with a throw greater than the number of points remaining in the track. The player who bears off all their pieces first wins.
(game "Garanguet" (players 2) (equipment {(board (rectangle 2 13) {(track "Track1" {6 12 11 10 9 8 7 5 4 3 2 1 0 13 14 15 16 17 18 20 21 22 23 24 25} P1 directed:True) (track "Track2" {19 25 24 23 22 21 20 18 17 16 15 14 13 0 1 2 3 4 5 7 8 9 10 11 12} P2 directed:True)} use:Vertex) (dice num:3) (piece "Disc" Each) (map {(pair 1 6) (pair 2 19)}) (regions "Home" P1 {7 8 9 10 11 12}) (regions "Home" P2 {20 21 22 23 24 25})}) (rules (start {(place Stack "Disc1" 12 count:15) (place Stack "Disc2" 25 count:15)}) (play (do (if (not (is Prev Mover)) (roll)) next:(if (all DiceEqual) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(/ (count Pips) 3)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(/ (count Pips) 3)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (< (value Player Mover) 8) (and (moveAgain) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover))))) (set Value Mover 0)))) (if (or {(and (= (face 26) (face 27)) (> (face 26) (face 28))) (and (= (face 26) (face 28)) (> (face 26) (face 27))) (and (= (face 27) (face 28)) (> (face 27) (face 26)))}) (or (if (not (and (= (value Player Mover) 0) (!= (count MovesThisTurn) 0))) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 26) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 26) (face 27)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 26) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 26) (face 27)))) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (and (if (< (count MovesThisTurn) 4) (moveAgain)) (if (< (value Player Mover) 3) (if (< (value Player Mover) 0) (set Value Mover 1) (set Value Mover (+ 1 (value Player Mover)))) (set Value Mover 0)))))) (if (or (or (= (count MovesThisTurn) (value Player Mover)) (and (= (count MovesThisTurn) 0) (< (value Player Mover) 0))) (and (!= (count MovesThisTurn) 0) (= (value Player Mover) 0))) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 28) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 27) (face 26)))) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(if (and (= (face 26) (face 27)) (> (face 26) (face 28))) (face 28) (if (and (= (face 26) (face 28)) (> (face 26) (face 27))) (face 27) (face 26)))) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (< (count MovesThisTurn) 4) (moveAgain) (set Value Mover 0)))))) (forEach Die if:(!= (pips) 0) (forEach Site (sites Occupied by:Mover) (if (= (trackSite Move from:(site) steps:(pips)) -1) (move Remove (site)) (move (from (site)) (to (trackSite Move from:(site) steps:(pips)) if:(or (not (is Enemy (who at:(to)))) (= 1 (size Stack at:(to)))) (apply if:(is Enemy (who at:(to))) (fromTo (from (to)) (to (mapEntry (next)))))))) (then (if (not (all DiceUsed)) (moveAgain))))))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Played on a board with 36 holes arranged in a square, with a gap in the center of each side. There are arcs of five holes branching from opposite corners. Can be played with two to four players, who can also play on teams. One or two pieces per player. Four stick dice are used, with one marked side. Each die is marked differently for a different value: 4, 6, 14, 15. The throws are as follows: All marked sides up = 5; three marked sides up = 3; two marked sides up = 2, one marked side up = the value of the marked side; zero marked sides up = 10. Players’ pieces enter on the branching arcs. The second piece cannot enter before the first one leaves the arc. Each player can choose which direction they wish to move around the board, but they must continue in this direction for the rest of the game. If a player lands on the same spot as the opponent, the opponent’s piece is removed from the board and must re-enter. Player must make an exact throw to get a piece off the board after reentering the arc from the spot where the player entered the board. The player to get both of their pieces off the board first wins.[Players, "Players/3", num:<3> arc3:<(regions "Arc" P3 (sites {1..5}))> arc4:<> track3:<
        (track "TrackCW3" "48,5,SSE,N,E,S,W,NNW,End" P3 directed:True)
        (track "TrackCCW3" "48,5,SSE,E,N,W,S,NNW,End" P3 directed:True)
        > track4:<>, priority 0] [Num, "Start Rules/1", piece:<1>, priority 0] 
(game "Ghingskoot" (players 2) (equipment {(board (add (merge {(shift -1.25 -0.34 (rotate 30 (rectangle 6 1))) (rectangle 1 5) (rectangle 5 1) (shift 0 6 (rectangle 5 1)) (shift 0 10 (rectangle 1 5)) (shift 7 0 (rectangle 1 5)) (shift 7 10 (rectangle 1 5)) (shift 11 0 (rectangle 5 1)) (shift 11 6 (rectangle 5 1)) (shift 12.25 5.33 (rotate 30 (rectangle 6 1)))}) edges:{{13 14} {22 28} {37 36} {9 23}}) {(track "TrackCW1" "46,5,SSE,N,E,S,W,NNW,End" P1 directed:True) (track "TrackCCW1" "46,5,SSE,E,N,W,S,NNW,End" P1 directed:True) (track "TrackCW2" "47,41,NNW,S,W,N,E,SSE,End" P2 directed:True) (track "TrackCCW2" "47,41,NNW,W,S,E,N,SSE,End" P2 directed:True)} use:Vertex) (regions "AllSites" (sites Board)) (regions "Arc" P1 (sites {1 2 3 4 5})) (regions "Arc" P2 (sites {41 42 43 44 45})) (regions "AllSitesDifferentThanArc" (difference (sites Board) (union {(sites P1 "Arc") (sites P2 "Arc") (sites {0 32})}))) (dice d:2 facesByDie:{{0 4} {0 6} {0 14} {0 15}} num:4) (piece "Marker" Each (if (= (state at:(from)) 0) (if (or (!= (from) (handSite Mover)) (and (= (from) (handSite Mover)) (all Sites (sites Mover "Arc") if:(!= (who at:(site)) Mover)))) (or (if (= (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) -2) (move Remove (from)) (if (!= (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who at:(trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))))) (move (from) (to (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next))))))))) (then (if (and (= (state at:(last To)) 0) (is In (last To) (sites "AllSitesDifferentThanArc"))) (set State at:(last To) 1)))) (if (= (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) -2) (move Remove (from)) (if (!= (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who at:(trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips)))))) (move (from) (to (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next))))))))) (then (if (and (= (state at:(last To)) 0) (is In (last To) (sites "AllSitesDifferentThanArc"))) (set State at:(last To) 2)))))) (if (= (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) -2) (move Remove (from)) (if (!= (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) -1) (if (not (is Friend (who at:(if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))))))) (move (from) (to (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next)))))))))))) (hand Each) (map "Throw" {(pair 0 10) (pair 39 5) (pair 24 3) (pair 25 3) (pair 35 3) (pair 33 3) (pair 10 2) (pair 18 2) (pair 19 2) (pair 20 2) (pair 21 2) (pair 29 2)})}) (rules (start (place "Marker" "Hand" count:2)) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Played on a board with 36 holes arranged in a square, with a gap in the center of each side. There are arcs of five holes branching from opposite corners. Can be played with two to four players, who can also play on teams. One or two pieces per player. Four stick dice are used, with one marked side. Each die is marked differently for a different value: 4, 6, 14, 15. The throws are as follows: All marked sides up = 5; three marked sides up = 3; two marked sides up = 2, one marked side up = the value of the marked side; zero marked sides up = 10. Players’ pieces enter on the branching arcs. The second piece cannot enter before the first one leaves the arc. Each player can choose which direction they wish to move around the board, but they must continue in this direction for the rest of the game. If a player lands on the same spot as the opponent, the opponent’s piece is removed from the board and must re-enter. Player must make an exact throw to get a piece off the board after reentering the arc from the spot where the player entered the board. The player to get both of their pieces off the board first wins.[Players, "Players/4", num:<4> arc3:<(regions "Arc" P3 (sites {1..5}))> arc4:<(regions "Arc" P4 (sites {41..45}))> track3:<
        (track "TrackCW3" "48,5,SSE,N,E,S,W,NNW,End" P3 directed:True)
        (track "TrackCCW3" "48,5,SSE,E,N,W,S,NNW,End" P3 directed:True)
        > track4:<
        (track "TrackCW4" "49,41,NNW,S,W,N,E,SSE,End" P4 directed:True)
        (track "TrackCCW4" "49,41,NNW,W,S,E,N,SSE,End" P4 directed:True)
        >, priority 0] [Num, "Start Rules/2", piece:<2>, priority 2] 
(game "Ghingskoot" (players 2) (equipment {(board (add (merge {(shift -1.25 -0.34 (rotate 30 (rectangle 6 1))) (rectangle 1 5) (rectangle 5 1) (shift 0 6 (rectangle 5 1)) (shift 0 10 (rectangle 1 5)) (shift 7 0 (rectangle 1 5)) (shift 7 10 (rectangle 1 5)) (shift 11 0 (rectangle 5 1)) (shift 11 6 (rectangle 5 1)) (shift 12.25 5.33 (rotate 30 (rectangle 6 1)))}) edges:{{13 14} {22 28} {37 36} {9 23}}) {(track "TrackCW1" "46,5,SSE,N,E,S,W,NNW,End" P1 directed:True) (track "TrackCCW1" "46,5,SSE,E,N,W,S,NNW,End" P1 directed:True) (track "TrackCW2" "47,41,NNW,S,W,N,E,SSE,End" P2 directed:True) (track "TrackCCW2" "47,41,NNW,W,S,E,N,SSE,End" P2 directed:True)} use:Vertex) (regions "AllSites" (sites Board)) (regions "Arc" P1 (sites {1 2 3 4 5})) (regions "Arc" P2 (sites {41 42 43 44 45})) (regions "AllSitesDifferentThanArc" (difference (sites Board) (union {(sites P1 "Arc") (sites P2 "Arc") (sites {0 32})}))) (dice d:2 facesByDie:{{0 4} {0 6} {0 14} {0 15}} num:4) (piece "Marker" Each (if (= (state at:(from)) 0) (if (or (!= (from) (handSite Mover)) (and (= (from) (handSite Mover)) (all Sites (sites Mover "Arc") if:(!= (who at:(site)) Mover)))) (or (if (= (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) -2) (move Remove (from)) (if (!= (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who at:(trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))))) (move (from) (to (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next))))))))) (then (if (and (= (state at:(last To)) 0) (is In (last To) (sites "AllSitesDifferentThanArc"))) (set State at:(last To) 1)))) (if (= (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) -2) (move Remove (from)) (if (!= (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who at:(trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips)))))) (move (from) (to (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next))))))))) (then (if (and (= (state at:(last To)) 0) (is In (last To) (sites "AllSitesDifferentThanArc"))) (set State at:(last To) 2)))))) (if (= (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) -2) (move Remove (from)) (if (!= (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) -1) (if (not (is Friend (who at:(if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))))))) (move (from) (to (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next)))))))))))) (hand Each) (map "Throw" {(pair 0 10) (pair 39 5) (pair 24 3) (pair 25 3) (pair 35 3) (pair 33 3) (pair 10 2) (pair 18 2) (pair 19 2) (pair 20 2) (pair 21 2) (pair 29 2)})}) (rules (start (place "Marker" "Hand" count:2)) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
Played on a board with 36 holes arranged in a square, with a gap in the center of each side. There are arcs of five holes branching from opposite corners. Can be played with two to four players, who can also play on teams. One or two pieces per player. Four stick dice are used, with one marked side. Each die is marked differently for a different value: 4, 6, 14, 15. The throws are as follows: All marked sides up = 5; three marked sides up = 3; two marked sides up = 2, one marked side up = the value of the marked side; zero marked sides up = 10. Players’ pieces enter on the branching arcs. The second piece cannot enter before the first one leaves the arc. Each player can choose which direction they wish to move around the board, but they must continue in this direction for the rest of the game. If a player lands on the same spot as the opponent, the opponent’s piece is removed from the board and must re-enter. Player must make an exact throw to get a piece off the board after reentering the arc from the spot where the player entered the board. The player to get both of their pieces off the board first wins.[Players, "Players/2", num:<2> arc3:<> arc4:<> track3:<> track4:<>, priority 2] [Num, "Start Rules/1", piece:<1>, priority 0] 
(game "Ghingskoot" (players 2) (equipment {(board (add (merge {(shift -1.25 -0.34 (rotate 30 (rectangle 6 1))) (rectangle 1 5) (rectangle 5 1) (shift 0 6 (rectangle 5 1)) (shift 0 10 (rectangle 1 5)) (shift 7 0 (rectangle 1 5)) (shift 7 10 (rectangle 1 5)) (shift 11 0 (rectangle 5 1)) (shift 11 6 (rectangle 5 1)) (shift 12.25 5.33 (rotate 30 (rectangle 6 1)))}) edges:{{13 14} {22 28} {37 36} {9 23}}) {(track "TrackCW1" "46,5,SSE,N,E,S,W,NNW,End" P1 directed:True) (track "TrackCCW1" "46,5,SSE,E,N,W,S,NNW,End" P1 directed:True) (track "TrackCW2" "47,41,NNW,S,W,N,E,SSE,End" P2 directed:True) (track "TrackCCW2" "47,41,NNW,W,S,E,N,SSE,End" P2 directed:True)} use:Vertex) (regions "AllSites" (sites Board)) (regions "Arc" P1 (sites {1 2 3 4 5})) (regions "Arc" P2 (sites {41 42 43 44 45})) (regions "AllSitesDifferentThanArc" (difference (sites Board) (union {(sites P1 "Arc") (sites P2 "Arc") (sites {0 32})}))) (dice d:2 facesByDie:{{0 4} {0 6} {0 14} {0 15}} num:4) (piece "Marker" Each (if (= (state at:(from)) 0) (if (or (!= (from) (handSite Mover)) (and (= (from) (handSite Mover)) (all Sites (sites Mover "Arc") if:(!= (who at:(site)) Mover)))) (or (if (= (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) -2) (move Remove (from)) (if (!= (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who at:(trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))))) (move (from) (to (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next))))))))) (then (if (and (= (state at:(last To)) 0) (is In (last To) (sites "AllSitesDifferentThanArc"))) (set State at:(last To) 1)))) (if (= (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) -2) (move Remove (from)) (if (!= (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) -1) (if (not (is Friend (who at:(trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips)))))) (move (from) (to (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next))))))))) (then (if (and (= (state at:(last To)) 0) (is In (last To) (sites "AllSitesDifferentThanArc"))) (set State at:(last To) 2)))))) (if (= (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) -2) (move Remove (from)) (if (!= (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) -1) (if (not (is Friend (who at:(if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips))))))) (move (from) (to (if (= (state at:(from)) 2) (trackSite Move "TrackCCW" steps:(mapEntry "Throw" (count Pips))) (trackSite Move "TrackCW" steps:(mapEntry "Throw" (count Pips)))) (apply if:(is Enemy (who at:(to))) (and (set State at:(to) 0) (fromTo (from (to)) (to (handSite Next)))))))))))) (hand Each) (map "Throw" {(pair 0 10) (pair 39 5) (pair 24 3) (pair 25 3) (pair 35 3) (pair 33 3) (pair 10 2) (pair 18 2) (pair 19 2) (pair 20 2) (pair 21 2) (pair 29 2)})}) (rules (start (place "Marker" "Hand" count:2)) (play (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover))))) (end (if (no Pieces Mover) (result Mover Win))))) 
